
LabaPES_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004034  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08004204  08004204  00014204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044dc  080044dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080044dc  080044dc  000144dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044e4  080044e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044e4  080044e4  000144e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044e8  080044e8  000144e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080044ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000070  0800455c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  0800455c  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b685  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d75  00000000  00000000  0002b725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0002d4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000708  00000000  00000000  0002dc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217be  00000000  00000000  0002e378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6a8  00000000  00000000  0004fb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8c1e  00000000  00000000  0005b1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00123dfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000264c  00000000  00000000  00123e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080041ec 	.word	0x080041ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080041ec 	.word	0x080041ec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <MX_GPIO_Init+0x4c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <MX_GPIO_Init+0x4c>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <MX_GPIO_Init+0x4c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_GPIO_Init+0x4c>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a08      	ldr	r2, [pc, #32]	; (8000604 <MX_GPIO_Init+0x4c>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_GPIO_Init+0x4c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]

}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b0ca      	sub	sp, #296	; 0x128
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t flag_err = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	uint8_t tstring[255];
	uint8_t rstring[BUFF_SIZE + 1];
	char string[10] = {0,0};
 8000614:	463b      	mov	r3, r7
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	3304      	adds	r3, #4
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	809a      	strh	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fb9f 	bl	8000d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f8cb 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f7ff ffc5 	bl	80005b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062e:	f000 faf5 	bl	8000c1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RING_Init(&ring, buff, sizeof(buff) / sizeof(buff[0])); // Initialize UART receiver ring buffer.
 8000632:	2210      	movs	r2, #16
 8000634:	4959      	ldr	r1, [pc, #356]	; (800079c <main+0x194>)
 8000636:	485a      	ldr	r0, [pc, #360]	; (80007a0 <main+0x198>)
 8000638:	f000 f979 	bl	800092e <RING_Init>
  sprintf((char*)tstring,"\r\nEnter command:\n\r"
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4958      	ldr	r1, [pc, #352]	; (80007a4 <main+0x19c>)
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fce0 	bl	8003008 <siprintf>
  		  "L=xx -- brightness for LEDs, where xx - value of brightness\n\r"
  		  "OR\n\r"
  		  "l=xx -- brightness for LEDs, where xx - value of brightness.\n\r\n\r");
  HAL_UART_Transmit(&huart2,tstring,strlen((char*)tstring), HAL_MAX_DELAY);
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff fddf 	bl	8000210 <strlen>
 8000652:	4603      	mov	r3, r0
 8000654:	b29a      	uxth	r2, r3
 8000656:	f107 0120 	add.w	r1, r7, #32
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	4852      	ldr	r0, [pc, #328]	; (80007a8 <main+0x1a0>)
 8000660:	f001 fce1 	bl	8002026 <HAL_UART_Transmit>
  // Start UART receiver in the non blocking mode
  HAL_UART_Receive_IT(&huart2,ring.buffer,1);
 8000664:	4b4e      	ldr	r3, [pc, #312]	; (80007a0 <main+0x198>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2201      	movs	r2, #1
 800066a:	4619      	mov	r1, r3
 800066c:	484e      	ldr	r0, [pc, #312]	; (80007a8 <main+0x1a0>)
 800066e:	f001 fdb1 	bl	80021d4 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (Ring_GetMessage(&ring, rstring))
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	4619      	mov	r1, r3
 8000678:	4849      	ldr	r0, [pc, #292]	; (80007a0 <main+0x198>)
 800067a:	f000 f9cc 	bl	8000a16 <Ring_GetMessage>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0f6      	beq.n	8000672 <main+0x6a>
	  {
		  sscanf((char*)rstring,"%s", string);
 8000684:	463a      	mov	r2, r7
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	4948      	ldr	r1, [pc, #288]	; (80007ac <main+0x1a4>)
 800068c:	4618      	mov	r0, r3
 800068e:	f002 fcdb 	bl	8003048 <siscanf>
		  for (int i = 0; i < 3; i++)
 8000692:	2300      	movs	r3, #0
 8000694:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000698:	e00f      	b.n	80006ba <main+0xb2>
		  {
			  str[i] = string[i+2];
 800069a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800069e:	3302      	adds	r3, #2
 80006a0:	463a      	mov	r2, r7
 80006a2:	5cd1      	ldrb	r1, [r2, r3]
 80006a4:	4a42      	ldr	r2, [pc, #264]	; (80007b0 <main+0x1a8>)
 80006a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80006aa:	4413      	add	r3, r2
 80006ac:	460a      	mov	r2, r1
 80006ae:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++)
 80006b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80006b4:	3301      	adds	r3, #1
 80006b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80006ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80006be:	2b02      	cmp	r3, #2
 80006c0:	ddeb      	ble.n	800069a <main+0x92>
		  }
		  if (str[1] == '\r' || str[1] == '\n' || str[1] == '\0')
 80006c2:	4b3b      	ldr	r3, [pc, #236]	; (80007b0 <main+0x1a8>)
 80006c4:	785b      	ldrb	r3, [r3, #1]
 80006c6:	2b0d      	cmp	r3, #13
 80006c8:	d007      	beq.n	80006da <main+0xd2>
 80006ca:	4b39      	ldr	r3, [pc, #228]	; (80007b0 <main+0x1a8>)
 80006cc:	785b      	ldrb	r3, [r3, #1]
 80006ce:	2b0a      	cmp	r3, #10
 80006d0:	d003      	beq.n	80006da <main+0xd2>
 80006d2:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <main+0x1a8>)
 80006d4:	785b      	ldrb	r3, [r3, #1]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d109      	bne.n	80006ee <main+0xe6>
		  {
			  brightness = ((int) str[0]) - 48;
 80006da:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <main+0x1a8>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	3b30      	subs	r3, #48	; 0x30
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b34      	ldr	r3, [pc, #208]	; (80007b4 <main+0x1ac>)
 80006e4:	701a      	strb	r2, [r3, #0]
			  flag_err = 1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 80006ec:	e023      	b.n	8000736 <main+0x12e>
		  }
		  else if (str[2] == '\r' || str[2] == '\n' || str[2] == '\0')
 80006ee:	4b30      	ldr	r3, [pc, #192]	; (80007b0 <main+0x1a8>)
 80006f0:	789b      	ldrb	r3, [r3, #2]
 80006f2:	2b0d      	cmp	r3, #13
 80006f4:	d007      	beq.n	8000706 <main+0xfe>
 80006f6:	4b2e      	ldr	r3, [pc, #184]	; (80007b0 <main+0x1a8>)
 80006f8:	789b      	ldrb	r3, [r3, #2]
 80006fa:	2b0a      	cmp	r3, #10
 80006fc:	d003      	beq.n	8000706 <main+0xfe>
 80006fe:	4b2c      	ldr	r3, [pc, #176]	; (80007b0 <main+0x1a8>)
 8000700:	789b      	ldrb	r3, [r3, #2]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d114      	bne.n	8000730 <main+0x128>
		  {
			  brightness = ((((int) str[0]) - 48) * 10) + (((int) str[1]) - 48);
 8000706:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <main+0x1a8>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	3b30      	subs	r3, #48	; 0x30
 800070c:	b2db      	uxtb	r3, r3
 800070e:	461a      	mov	r2, r3
 8000710:	0092      	lsls	r2, r2, #2
 8000712:	4413      	add	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <main+0x1a8>)
 800071a:	785b      	ldrb	r3, [r3, #1]
 800071c:	4413      	add	r3, r2
 800071e:	b2db      	uxtb	r3, r3
 8000720:	3b30      	subs	r3, #48	; 0x30
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <main+0x1ac>)
 8000726:	701a      	strb	r2, [r3, #0]
			  flag_err = 1;
 8000728:	2301      	movs	r3, #1
 800072a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 800072e:	e002      	b.n	8000736 <main+0x12e>
		  }
		  else
		  {
			  flag_err = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		  }
		  RING_Clear(&ring);
 8000736:	481a      	ldr	r0, [pc, #104]	; (80007a0 <main+0x198>)
 8000738:	f000 f914 	bl	8000964 <RING_Clear>
		  if ((string[0] == 'L' || string[0] == 'l') && (string[1] == '=') && (flag_err == 1))
 800073c:	463b      	mov	r3, r7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b4c      	cmp	r3, #76	; 0x4c
 8000742:	d003      	beq.n	800074c <main+0x144>
 8000744:	463b      	mov	r3, r7
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b6c      	cmp	r3, #108	; 0x6c
 800074a:	d10f      	bne.n	800076c <main+0x164>
 800074c:	463b      	mov	r3, r7
 800074e:	785b      	ldrb	r3, [r3, #1]
 8000750:	2b3d      	cmp	r3, #61	; 0x3d
 8000752:	d10b      	bne.n	800076c <main+0x164>
 8000754:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000758:	2b01      	cmp	r3, #1
 800075a:	d107      	bne.n	800076c <main+0x164>
		  {
			  sprintf((char*)tstring,"\n\rEcho: %s\n\r"
 800075c:	463a      	mov	r2, r7
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	4915      	ldr	r1, [pc, #84]	; (80007b8 <main+0x1b0>)
 8000764:	4618      	mov	r0, r3
 8000766:	f002 fc4f 	bl	8003008 <siprintf>
 800076a:	e005      	b.n	8000778 <main+0x170>
			  				  "Enter command 'L=xx' or 'l=xx'\r\n",string);
		  }
		  else
		  {
			  sprintf((char*)tstring,"\n\rEcho: Wrong command!!!\r\n"
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4912      	ldr	r1, [pc, #72]	; (80007bc <main+0x1b4>)
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fc48 	bl	8003008 <siprintf>
					  	  	  "Enter command 'L=xx' or 'l=xx'\r\n");
		  }
		  HAL_UART_Transmit_IT(&huart2,tstring,strlen((char*)tstring));
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fd47 	bl	8000210 <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	b29a      	uxth	r2, r3
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	4619      	mov	r1, r3
 800078c:	4806      	ldr	r0, [pc, #24]	; (80007a8 <main+0x1a0>)
 800078e:	f001 fcdc 	bl	800214a <HAL_UART_Transmit_IT>
		  flag_err = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	  if (Ring_GetMessage(&ring, rstring))
 8000798:	e76b      	b.n	8000672 <main+0x6a>
 800079a:	bf00      	nop
 800079c:	2000009c 	.word	0x2000009c
 80007a0:	200000ac 	.word	0x200000ac
 80007a4:	08004204 	.word	0x08004204
 80007a8:	200000bc 	.word	0x200000bc
 80007ac:	08004298 	.word	0x08004298
 80007b0:	2000008c 	.word	0x2000008c
 80007b4:	2000008f 	.word	0x2000008f
 80007b8:	0800429c 	.word	0x0800429c
 80007bc:	080042cc 	.word	0x080042cc

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b094      	sub	sp, #80	; 0x50
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	2234      	movs	r2, #52	; 0x34
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 fc12 	bl	8002ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	4b2a      	ldr	r3, [pc, #168]	; (8000894 <SystemClock_Config+0xd4>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	4a29      	ldr	r2, [pc, #164]	; (8000894 <SystemClock_Config+0xd4>)
 80007ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f2:	6413      	str	r3, [r2, #64]	; 0x40
 80007f4:	4b27      	ldr	r3, [pc, #156]	; (8000894 <SystemClock_Config+0xd4>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000800:	2300      	movs	r3, #0
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	4b24      	ldr	r3, [pc, #144]	; (8000898 <SystemClock_Config+0xd8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800080c:	4a22      	ldr	r2, [pc, #136]	; (8000898 <SystemClock_Config+0xd8>)
 800080e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b20      	ldr	r3, [pc, #128]	; (8000898 <SystemClock_Config+0xd8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000820:	2302      	movs	r3, #2
 8000822:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000828:	2310      	movs	r3, #16
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082c:	2302      	movs	r3, #2
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000830:	2300      	movs	r3, #0
 8000832:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000834:	2310      	movs	r3, #16
 8000836:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000838:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800083c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800083e:	2304      	movs	r3, #4
 8000840:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4618      	mov	r0, r3
 8000850:	f001 f8fe 	bl	8001a50 <HAL_RCC_OscConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800085a:	f000 f863 	bl	8000924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	230f      	movs	r3, #15
 8000860:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000862:	2302      	movs	r3, #2
 8000864:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800086a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	2102      	movs	r1, #2
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fe1c 	bl	80014b8 <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000886:	f000 f84d 	bl	8000924 <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	3750      	adds	r7, #80	; 0x50
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40007000 	.word	0x40007000

0800089c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	// Check that interrupt caused by UART2
	if (huart == &huart2)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a1d      	ldr	r2, [pc, #116]	; (800091c <HAL_UART_RxCpltCallback+0x80>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d133      	bne.n	8000914 <HAL_UART_RxCpltCallback+0x78>
	{
		// Put new character from the UART receiver data register (DR) to the ring buffer
		RING_Put(huart->Instance->DR, &ring);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	491a      	ldr	r1, [pc, #104]	; (8000920 <HAL_UART_RxCpltCallback+0x84>)
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f86e 	bl	8000998 <RING_Put>
		// Set the overrun flag if the message is longer than ring buffer can hold
		if (ring.idxOut == ring.idxIn) ring.flag.BufferOverrun = 1;
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <HAL_UART_RxCpltCallback+0x84>)
 80008be:	88da      	ldrh	r2, [r3, #6]
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <HAL_UART_RxCpltCallback+0x84>)
 80008c2:	889b      	ldrh	r3, [r3, #4]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d104      	bne.n	80008d2 <HAL_UART_RxCpltCallback+0x36>
 80008c8:	4a15      	ldr	r2, [pc, #84]	; (8000920 <HAL_UART_RxCpltCallback+0x84>)
 80008ca:	7b13      	ldrb	r3, [r2, #12]
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	7313      	strb	r3, [r2, #12]
		// Set the message ready flag if the end of line character has been received
		if ((ring.buffer[ring.idxIn -1] == '\r') ||
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <HAL_UART_RxCpltCallback+0x84>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_UART_RxCpltCallback+0x84>)
 80008d8:	889b      	ldrh	r3, [r3, #4]
 80008da:	3b01      	subs	r3, #1
 80008dc:	4413      	add	r3, r2
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b0d      	cmp	r3, #13
 80008e2:	d008      	beq.n	80008f6 <HAL_UART_RxCpltCallback+0x5a>
				(ring.buffer[ring.idxOut -1] == '\n'))
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <HAL_UART_RxCpltCallback+0x84>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <HAL_UART_RxCpltCallback+0x84>)
 80008ea:	88db      	ldrh	r3, [r3, #6]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	4413      	add	r3, r2
 80008f0:	781b      	ldrb	r3, [r3, #0]
		if ((ring.buffer[ring.idxIn -1] == '\r') ||
 80008f2:	2b0a      	cmp	r3, #10
 80008f4:	d104      	bne.n	8000900 <HAL_UART_RxCpltCallback+0x64>
			ring.flag.MessageReady = 1;
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <HAL_UART_RxCpltCallback+0x84>)
 80008f8:	7b13      	ldrb	r3, [r2, #12]
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	7313      	strb	r3, [r2, #12]
		// Receive the next character from UART in non blocking mode
		HAL_UART_Receive_IT(&huart2,&ring.buffer[ring.idxOut],1);
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <HAL_UART_RxCpltCallback+0x84>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <HAL_UART_RxCpltCallback+0x84>)
 8000906:	88d2      	ldrh	r2, [r2, #6]
 8000908:	4413      	add	r3, r2
 800090a:	2201      	movs	r2, #1
 800090c:	4619      	mov	r1, r3
 800090e:	4803      	ldr	r0, [pc, #12]	; (800091c <HAL_UART_RxCpltCallback+0x80>)
 8000910:	f001 fc60 	bl	80021d4 <HAL_UART_Receive_IT>
	}
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200000bc 	.word	0x200000bc
 8000920:	200000ac 	.word	0x200000ac

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>

0800092e <RING_Init>:
@param uint8_t *buf − Указатель на буфер хранения.
@param uint16_t size − Сколько элементов в буфере.
@return RING_ErrorStatus_t Результат инициализации @ref RING_ErrorStatus_t
 */
RING_ErrorStatus_t RING_Init(RING_buffer_t *ring, uint8_t *buf, uint16_t size)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b084      	sub	sp, #16
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	4613      	mov	r3, r2
 800093a:	80fb      	strh	r3, [r7, #6]
    ring->size = size;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	88fa      	ldrh	r2, [r7, #6]
 8000940:	811a      	strh	r2, [r3, #8]
    ring->buffer = buf;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	68ba      	ldr	r2, [r7, #8]
 8000946:	601a      	str	r2, [r3, #0]
    RING_Clear( ring );
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	f000 f80b 	bl	8000964 <RING_Clear>

    return ( ring->buffer ? RING_SUCCESS : RING_ERROR ) ;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	bf14      	ite	ne
 8000956:	2301      	movne	r3, #1
 8000958:	2300      	moveq	r3, #0
 800095a:	b2db      	uxtb	r3, r3
}
 800095c:	4618      	mov	r0, r3
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <RING_Clear>:
/**
@function RING_Clear − Очищает буфер.
@param RING_buffer_t *buf − Указатель на кольцевой буфер.
 */
void RING_Clear(RING_buffer_t* buf)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
    buf->idxIn = 0;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2200      	movs	r2, #0
 8000970:	809a      	strh	r2, [r3, #4]
    buf->idxOut = 0;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2200      	movs	r2, #0
 8000976:	80da      	strh	r2, [r3, #6]
	buf->flag.BufferOverrun = 0;
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	7b13      	ldrb	r3, [r2, #12]
 800097c:	f36f 0341 	bfc	r3, #1, #1
 8000980:	7313      	strb	r3, [r2, #12]
	buf->flag.MessageReady = 0;
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	7b13      	ldrb	r3, [r2, #12]
 8000986:	f36f 0300 	bfc	r3, #0, #1
 800098a:	7313      	strb	r3, [r2, #12]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <RING_Put>:
@function RING_Put − Загружает элемент в буфер.
@param uint8_t symbol − Элемент для загрузки в буфер.
@param RING_buffer_t *buf − Указатель на кольцевой буфер.
 */
void RING_Put(uint8_t symbol, RING_buffer_t* buf)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	6039      	str	r1, [r7, #0]
 80009a2:	71fb      	strb	r3, [r7, #7]
    buf->buffer[buf->idxOut++] = symbol;
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	88db      	ldrh	r3, [r3, #6]
 80009ac:	1c59      	adds	r1, r3, #1
 80009ae:	b288      	uxth	r0, r1
 80009b0:	6839      	ldr	r1, [r7, #0]
 80009b2:	80c8      	strh	r0, [r1, #6]
 80009b4:	4413      	add	r3, r2
 80009b6:	79fa      	ldrb	r2, [r7, #7]
 80009b8:	701a      	strb	r2, [r3, #0]
    if (buf->idxOut >= buf->size) buf->idxOut = 0;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	88da      	ldrh	r2, [r3, #6]
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	891b      	ldrh	r3, [r3, #8]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d302      	bcc.n	80009cc <RING_Put+0x34>
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	2200      	movs	r2, #0
 80009ca:	80da      	strh	r2, [r3, #6]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <RING_Pop>:
@function RING_Pop − Получает из буфера байт.
@param RING_buffer_t *buf − Указатель на кольцевой буфер.
@return uint8_t Значение полученого элемента.
 */
uint8_t RING_Pop(RING_buffer_t *buf)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
    uint8_t retval = buf->buffer[buf->idxIn++];
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	889b      	ldrh	r3, [r3, #4]
 80009e8:	1c59      	adds	r1, r3, #1
 80009ea:	b288      	uxth	r0, r1
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	8088      	strh	r0, [r1, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	73fb      	strb	r3, [r7, #15]
    if (buf->idxIn >= buf->size) buf->idxIn = 0;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	889a      	ldrh	r2, [r3, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	891b      	ldrh	r3, [r3, #8]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d302      	bcc.n	8000a08 <RING_Pop+0x30>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	809a      	strh	r2, [r3, #4]
    return retval;
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <Ring_GetMessage>:
@function Ring_GetMessage − Reads full message from the ring buffer and clears appropriate flags.
@param RING_buffer_t *ringbuf − Указатель на кольцевой буфер.
@param uint8_t *string − Указатель на строчку.
 */
uint8_t Ring_GetMessage(RING_buffer_t *ringbuf, uint8_t * string)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b084      	sub	sp, #16
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	6039      	str	r1, [r7, #0]
	uint16_t char_count = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	81fb      	strh	r3, [r7, #14]
	// Check if the message has been received
	if (ringbuf->flag.MessageReady)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	7b1b      	ldrb	r3, [r3, #12]
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d049      	beq.n	8000ac6 <Ring_GetMessage+0xb0>
		{
			if (ringbuf->flag.BufferOverrun)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	7b1b      	ldrb	r3, [r3, #12]
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d016      	beq.n	8000a6e <Ring_GetMessage+0x58>
				{
				ringbuf->idxIn = ringbuf->idxOut;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	88da      	ldrh	r2, [r3, #6]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	809a      	strh	r2, [r3, #4]
				ringbuf->flag.BufferOverrun = 0;
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	7b13      	ldrb	r3, [r2, #12]
 8000a4c:	f36f 0341 	bfc	r3, #1, #1
 8000a50:	7313      	strb	r3, [r2, #12]
				}
			while ((ringbuf->buffer[ringbuf->idxIn] != '\r') &&
 8000a52:	e00c      	b.n	8000a6e <Ring_GetMessage+0x58>
						 (ringbuf->buffer[ringbuf->idxIn] != '\n') &&
						 (ringbuf->size != char_count - 1))
				{
					*string =  RING_Pop(ringbuf);
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff ffbf 	bl	80009d8 <RING_Pop>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	701a      	strb	r2, [r3, #0]
					string++;
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	3301      	adds	r3, #1
 8000a66:	603b      	str	r3, [r7, #0]
					char_count++;
 8000a68:	89fb      	ldrh	r3, [r7, #14]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	81fb      	strh	r3, [r7, #14]
			while ((ringbuf->buffer[ringbuf->idxIn] != '\r') &&
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	8892      	ldrh	r2, [r2, #4]
 8000a76:	4413      	add	r3, r2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b0d      	cmp	r3, #13
 8000a7c:	d00e      	beq.n	8000a9c <Ring_GetMessage+0x86>
						 (ringbuf->buffer[ringbuf->idxIn] != '\n') &&
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	8892      	ldrh	r2, [r2, #4]
 8000a86:	4413      	add	r3, r2
 8000a88:	781b      	ldrb	r3, [r3, #0]
			while ((ringbuf->buffer[ringbuf->idxIn] != '\r') &&
 8000a8a:	2b0a      	cmp	r3, #10
 8000a8c:	d006      	beq.n	8000a9c <Ring_GetMessage+0x86>
						 (ringbuf->size != char_count - 1))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	891b      	ldrh	r3, [r3, #8]
 8000a92:	461a      	mov	r2, r3
 8000a94:	89fb      	ldrh	r3, [r7, #14]
 8000a96:	3b01      	subs	r3, #1
						 (ringbuf->buffer[ringbuf->idxIn] != '\n') &&
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d1db      	bne.n	8000a54 <Ring_GetMessage+0x3e>
				}
			*string =  RING_Pop(ringbuf);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff9b 	bl	80009d8 <RING_Pop>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	701a      	strb	r2, [r3, #0]
			string++;
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	3301      	adds	r3, #1
 8000aae:	603b      	str	r3, [r7, #0]
			char_count++;
 8000ab0:	89fb      	ldrh	r3, [r7, #14]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	81fb      	strh	r3, [r7, #14]
			*string = '\0';
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
			ringbuf->flag.MessageReady = 0;
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	7b13      	ldrb	r3, [r2, #12]
 8000ac0:	f36f 0300 	bfc	r3, #0, #1
 8000ac4:	7313      	strb	r3, [r2, #12]
		}
	return char_count;
 8000ac6:	89fb      	ldrh	r3, [r7, #14]
 8000ac8:	b2db      	uxtb	r3, r3
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b12:	2007      	movs	r0, #7
 8000b14:	f000 fa68 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler+0x4>

08000b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b70:	f000 f94a 	bl	8000e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <USART2_IRQHandler+0x10>)
 8000b7e:	f001 fb59 	bl	8002234 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000bc 	.word	0x200000bc

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f002 f9f2 	bl	8002fa4 <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20020000 	.word	0x20020000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	20000090 	.word	0x20000090
 8000bf4:	20000118 	.word	0x20000118

08000bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <SystemInit+0x20>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <SystemInit+0x20>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <MX_USART2_UART_Init+0x50>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c52:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c56:	f001 f999 	bl	8001f8c <HAL_UART_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000c60:	f7ff fe60 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200000bc 	.word	0x200000bc
 8000c6c:	40004400 	.word	0x40004400

08000c70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a1d      	ldr	r2, [pc, #116]	; (8000d04 <HAL_UART_MspInit+0x94>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d133      	bne.n	8000cfa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <HAL_UART_MspInit+0x98>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a1b      	ldr	r2, [pc, #108]	; (8000d08 <HAL_UART_MspInit+0x98>)
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <HAL_UART_MspInit+0x98>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_UART_MspInit+0x98>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <HAL_UART_MspInit+0x98>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_UART_MspInit+0x98>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cca:	230c      	movs	r3, #12
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cda:	2307      	movs	r3, #7
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4809      	ldr	r0, [pc, #36]	; (8000d0c <HAL_UART_MspInit+0x9c>)
 8000ce6:	f000 fa53 	bl	8001190 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2026      	movs	r0, #38	; 0x26
 8000cf0:	f000 f985 	bl	8000ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cf4:	2026      	movs	r0, #38	; 0x26
 8000cf6:	f000 f99e 	bl	8001036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	; 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40004400 	.word	0x40004400
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000

08000d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d16:	490e      	ldr	r1, [pc, #56]	; (8000d50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d18:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d2c:	4c0b      	ldr	r4, [pc, #44]	; (8000d5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d3a:	f7ff ff5d 	bl	8000bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f002 f937 	bl	8002fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d42:	f7ff fc61 	bl	8000608 <main>
  bx  lr    
 8000d46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d54:	080044ec 	.word	0x080044ec
  ldr r2, =_sbss
 8000d58:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d5c:	20000114 	.word	0x20000114

08000d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <HAL_Init+0x40>)
 8000d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_Init+0x40>)
 8000d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_Init+0x40>)
 8000d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 f92b 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 f808 	bl	8000da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d98:	f7ff fe9c 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023c00 	.word	0x40023c00

08000da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_InitTick+0x54>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x58>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f943 	bl	8001052 <HAL_SYSTICK_Config>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00e      	b.n	8000df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b0f      	cmp	r3, #15
 8000dda:	d80a      	bhi.n	8000df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f000 f90b 	bl	8000ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de8:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <HAL_InitTick+0x5c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e000      	b.n	8000df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000004 	.word	0x20000004

08000e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x20>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x24>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_IncTick+0x24>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000100 	.word	0x20000100

08000e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <HAL_GetTick+0x14>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000100 	.word	0x20000100

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db0b      	blt.n	8000ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 021f 	and.w	r2, r3, #31
 8000ec4:	4907      	ldr	r1, [pc, #28]	; (8000ee4 <__NVIC_EnableIRQ+0x38>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	2001      	movs	r0, #1
 8000ece:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	; (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb4:	d301      	bcc.n	8000fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00f      	b.n	8000fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <SysTick_Config+0x40>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f7ff ff8e 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <SysTick_Config+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <SysTick_Config+0x40>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff29 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001010:	f7ff ff3e 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8001014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff ff8e 	bl	8000f3c <NVIC_EncodePriority>
 8001020:	4602      	mov	r2, r0
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff5d 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff31 	bl	8000eac <__NVIC_EnableIRQ>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffa2 	bl	8000fa4 <SysTick_Config>
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b084      	sub	sp, #16
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff feda 	bl	8000e30 <HAL_GetTick>
 800107c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d008      	beq.n	800109c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e052      	b.n	8001142 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0216 	bic.w	r2, r2, #22
 80010aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	695a      	ldr	r2, [r3, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d103      	bne.n	80010cc <HAL_DMA_Abort+0x62>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d007      	beq.n	80010dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0208 	bic.w	r2, r2, #8
 80010da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0201 	bic.w	r2, r2, #1
 80010ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ec:	e013      	b.n	8001116 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ee:	f7ff fe9f 	bl	8000e30 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b05      	cmp	r3, #5
 80010fa:	d90c      	bls.n	8001116 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2220      	movs	r2, #32
 8001100:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2203      	movs	r2, #3
 8001106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e015      	b.n	8001142 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e4      	bne.n	80010ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001128:	223f      	movs	r2, #63	; 0x3f
 800112a:	409a      	lsls	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d004      	beq.n	8001168 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e00c      	b.n	8001182 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2205      	movs	r2, #5
 800116c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0201 	bic.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e165      	b.n	8001478 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 8154 	bne.w	8001472 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d005      	beq.n	80011e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d130      	bne.n	8001244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 0201 	and.w	r2, r3, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b03      	cmp	r3, #3
 800124e:	d017      	beq.n	8001280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d123      	bne.n	80012d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	69b9      	ldr	r1, [r7, #24]
 80012d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80ae 	beq.w	8001472 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b5d      	ldr	r3, [pc, #372]	; (8001490 <HAL_GPIO_Init+0x300>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a5c      	ldr	r2, [pc, #368]	; (8001490 <HAL_GPIO_Init+0x300>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b5a      	ldr	r3, [pc, #360]	; (8001490 <HAL_GPIO_Init+0x300>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001332:	4a58      	ldr	r2, [pc, #352]	; (8001494 <HAL_GPIO_Init+0x304>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4f      	ldr	r2, [pc, #316]	; (8001498 <HAL_GPIO_Init+0x308>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d025      	beq.n	80013aa <HAL_GPIO_Init+0x21a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4e      	ldr	r2, [pc, #312]	; (800149c <HAL_GPIO_Init+0x30c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d01f      	beq.n	80013a6 <HAL_GPIO_Init+0x216>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4d      	ldr	r2, [pc, #308]	; (80014a0 <HAL_GPIO_Init+0x310>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d019      	beq.n	80013a2 <HAL_GPIO_Init+0x212>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4c      	ldr	r2, [pc, #304]	; (80014a4 <HAL_GPIO_Init+0x314>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d013      	beq.n	800139e <HAL_GPIO_Init+0x20e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4b      	ldr	r2, [pc, #300]	; (80014a8 <HAL_GPIO_Init+0x318>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d00d      	beq.n	800139a <HAL_GPIO_Init+0x20a>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4a      	ldr	r2, [pc, #296]	; (80014ac <HAL_GPIO_Init+0x31c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d007      	beq.n	8001396 <HAL_GPIO_Init+0x206>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a49      	ldr	r2, [pc, #292]	; (80014b0 <HAL_GPIO_Init+0x320>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d101      	bne.n	8001392 <HAL_GPIO_Init+0x202>
 800138e:	2306      	movs	r3, #6
 8001390:	e00c      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 8001392:	2307      	movs	r3, #7
 8001394:	e00a      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 8001396:	2305      	movs	r3, #5
 8001398:	e008      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 800139a:	2304      	movs	r3, #4
 800139c:	e006      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 800139e:	2303      	movs	r3, #3
 80013a0:	e004      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e002      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 80013aa:	2300      	movs	r3, #0
 80013ac:	69fa      	ldr	r2, [r7, #28]
 80013ae:	f002 0203 	and.w	r2, r2, #3
 80013b2:	0092      	lsls	r2, r2, #2
 80013b4:	4093      	lsls	r3, r2
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013bc:	4935      	ldr	r1, [pc, #212]	; (8001494 <HAL_GPIO_Init+0x304>)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3302      	adds	r3, #2
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ca:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <HAL_GPIO_Init+0x324>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ee:	4a31      	ldr	r2, [pc, #196]	; (80014b4 <HAL_GPIO_Init+0x324>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013f4:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <HAL_GPIO_Init+0x324>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001418:	4a26      	ldr	r2, [pc, #152]	; (80014b4 <HAL_GPIO_Init+0x324>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141e:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <HAL_GPIO_Init+0x324>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001442:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <HAL_GPIO_Init+0x324>)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_GPIO_Init+0x324>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800146c:	4a11      	ldr	r2, [pc, #68]	; (80014b4 <HAL_GPIO_Init+0x324>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	2b0f      	cmp	r3, #15
 800147c:	f67f ae96 	bls.w	80011ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3724      	adds	r7, #36	; 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40013800 	.word	0x40013800
 8001498:	40020000 	.word	0x40020000
 800149c:	40020400 	.word	0x40020400
 80014a0:	40020800 	.word	0x40020800
 80014a4:	40020c00 	.word	0x40020c00
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40021400 	.word	0x40021400
 80014b0:	40021800 	.word	0x40021800
 80014b4:	40013c00 	.word	0x40013c00

080014b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e0cc      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014cc:	4b68      	ldr	r3, [pc, #416]	; (8001670 <HAL_RCC_ClockConfig+0x1b8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 030f 	and.w	r3, r3, #15
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d90c      	bls.n	80014f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014da:	4b65      	ldr	r3, [pc, #404]	; (8001670 <HAL_RCC_ClockConfig+0x1b8>)
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e2:	4b63      	ldr	r3, [pc, #396]	; (8001670 <HAL_RCC_ClockConfig+0x1b8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d001      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0b8      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d020      	beq.n	8001542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800150c:	4b59      	ldr	r3, [pc, #356]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	4a58      	ldr	r2, [pc, #352]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001516:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001524:	4b53      	ldr	r3, [pc, #332]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4a52      	ldr	r2, [pc, #328]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800152e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001530:	4b50      	ldr	r3, [pc, #320]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	494d      	ldr	r1, [pc, #308]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	4313      	orrs	r3, r2
 8001540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d044      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d107      	bne.n	8001566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	4b47      	ldr	r3, [pc, #284]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d119      	bne.n	8001596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e07f      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d003      	beq.n	8001576 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001572:	2b03      	cmp	r3, #3
 8001574:	d107      	bne.n	8001586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001576:	4b3f      	ldr	r3, [pc, #252]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d109      	bne.n	8001596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e06f      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001586:	4b3b      	ldr	r3, [pc, #236]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e067      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001596:	4b37      	ldr	r3, [pc, #220]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f023 0203 	bic.w	r2, r3, #3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4934      	ldr	r1, [pc, #208]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015a8:	f7ff fc42 	bl	8000e30 <HAL_GetTick>
 80015ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ae:	e00a      	b.n	80015c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b0:	f7ff fc3e 	bl	8000e30 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e04f      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c6:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 020c 	and.w	r2, r3, #12
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d1eb      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015d8:	4b25      	ldr	r3, [pc, #148]	; (8001670 <HAL_RCC_ClockConfig+0x1b8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 030f 	and.w	r3, r3, #15
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d20c      	bcs.n	8001600 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e6:	4b22      	ldr	r3, [pc, #136]	; (8001670 <HAL_RCC_ClockConfig+0x1b8>)
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <HAL_RCC_ClockConfig+0x1b8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d001      	beq.n	8001600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e032      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d008      	beq.n	800161e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	4916      	ldr	r1, [pc, #88]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d009      	beq.n	800163e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	490e      	ldr	r1, [pc, #56]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	4313      	orrs	r3, r2
 800163c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800163e:	f000 f855 	bl	80016ec <HAL_RCC_GetSysClockFreq>
 8001642:	4602      	mov	r2, r0
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	091b      	lsrs	r3, r3, #4
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	490a      	ldr	r1, [pc, #40]	; (8001678 <HAL_RCC_ClockConfig+0x1c0>)
 8001650:	5ccb      	ldrb	r3, [r1, r3]
 8001652:	fa22 f303 	lsr.w	r3, r2, r3
 8001656:	4a09      	ldr	r2, [pc, #36]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 8001658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_RCC_ClockConfig+0x1c8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fba2 	bl	8000da8 <HAL_InitTick>

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023c00 	.word	0x40023c00
 8001674:	40023800 	.word	0x40023800
 8001678:	08004314 	.word	0x08004314
 800167c:	20000000 	.word	0x20000000
 8001680:	20000004 	.word	0x20000004

08001684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_RCC_GetHCLKFreq+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000000 	.word	0x20000000

0800169c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016a0:	f7ff fff0 	bl	8001684 <HAL_RCC_GetHCLKFreq>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	0a9b      	lsrs	r3, r3, #10
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	4903      	ldr	r1, [pc, #12]	; (80016c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016b2:	5ccb      	ldrb	r3, [r1, r3]
 80016b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40023800 	.word	0x40023800
 80016c0:	08004324 	.word	0x08004324

080016c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016c8:	f7ff ffdc 	bl	8001684 <HAL_RCC_GetHCLKFreq>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	0b5b      	lsrs	r3, r3, #13
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	4903      	ldr	r1, [pc, #12]	; (80016e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016da:	5ccb      	ldrb	r3, [r1, r3]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40023800 	.word	0x40023800
 80016e8:	08004324 	.word	0x08004324

080016ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016f0:	b088      	sub	sp, #32
 80016f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001708:	4bce      	ldr	r3, [pc, #824]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x358>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	2b0c      	cmp	r3, #12
 8001712:	f200 818d 	bhi.w	8001a30 <HAL_RCC_GetSysClockFreq+0x344>
 8001716:	a201      	add	r2, pc, #4	; (adr r2, 800171c <HAL_RCC_GetSysClockFreq+0x30>)
 8001718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171c:	08001751 	.word	0x08001751
 8001720:	08001a31 	.word	0x08001a31
 8001724:	08001a31 	.word	0x08001a31
 8001728:	08001a31 	.word	0x08001a31
 800172c:	08001757 	.word	0x08001757
 8001730:	08001a31 	.word	0x08001a31
 8001734:	08001a31 	.word	0x08001a31
 8001738:	08001a31 	.word	0x08001a31
 800173c:	0800175d 	.word	0x0800175d
 8001740:	08001a31 	.word	0x08001a31
 8001744:	08001a31 	.word	0x08001a31
 8001748:	08001a31 	.word	0x08001a31
 800174c:	080018d1 	.word	0x080018d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001750:	4bbd      	ldr	r3, [pc, #756]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001752:	61bb      	str	r3, [r7, #24]
       break;
 8001754:	e16f      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001756:	4bbd      	ldr	r3, [pc, #756]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x360>)
 8001758:	61bb      	str	r3, [r7, #24]
      break;
 800175a:	e16c      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800175c:	4bb9      	ldr	r3, [pc, #740]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x358>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001764:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001766:	4bb7      	ldr	r3, [pc, #732]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x358>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d053      	beq.n	800181a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001772:	4bb4      	ldr	r3, [pc, #720]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x358>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	461a      	mov	r2, r3
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001782:	f04f 0100 	mov.w	r1, #0
 8001786:	ea02 0400 	and.w	r4, r2, r0
 800178a:	603c      	str	r4, [r7, #0]
 800178c:	400b      	ands	r3, r1
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001794:	4620      	mov	r0, r4
 8001796:	4629      	mov	r1, r5
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	014b      	lsls	r3, r1, #5
 80017a2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017a6:	0142      	lsls	r2, r0, #5
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	4623      	mov	r3, r4
 80017ae:	1ac0      	subs	r0, r0, r3
 80017b0:	462b      	mov	r3, r5
 80017b2:	eb61 0103 	sbc.w	r1, r1, r3
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	018b      	lsls	r3, r1, #6
 80017c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017c4:	0182      	lsls	r2, r0, #6
 80017c6:	1a12      	subs	r2, r2, r0
 80017c8:	eb63 0301 	sbc.w	r3, r3, r1
 80017cc:	f04f 0000 	mov.w	r0, #0
 80017d0:	f04f 0100 	mov.w	r1, #0
 80017d4:	00d9      	lsls	r1, r3, #3
 80017d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017da:	00d0      	lsls	r0, r2, #3
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4621      	mov	r1, r4
 80017e2:	1852      	adds	r2, r2, r1
 80017e4:	4629      	mov	r1, r5
 80017e6:	eb43 0101 	adc.w	r1, r3, r1
 80017ea:	460b      	mov	r3, r1
 80017ec:	f04f 0000 	mov.w	r0, #0
 80017f0:	f04f 0100 	mov.w	r1, #0
 80017f4:	0259      	lsls	r1, r3, #9
 80017f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80017fa:	0250      	lsls	r0, r2, #9
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	461a      	mov	r2, r3
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	f7fe fd58 	bl	80002c0 <__aeabi_uldivmod>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4613      	mov	r3, r2
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	e04c      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800181a:	4b8a      	ldr	r3, [pc, #552]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x358>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	099b      	lsrs	r3, r3, #6
 8001820:	461a      	mov	r2, r3
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	f240 10ff 	movw	r0, #511	; 0x1ff
 800182a:	f04f 0100 	mov.w	r1, #0
 800182e:	ea02 0a00 	and.w	sl, r2, r0
 8001832:	ea03 0b01 	and.w	fp, r3, r1
 8001836:	4650      	mov	r0, sl
 8001838:	4659      	mov	r1, fp
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	014b      	lsls	r3, r1, #5
 8001844:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001848:	0142      	lsls	r2, r0, #5
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	ebb0 000a 	subs.w	r0, r0, sl
 8001852:	eb61 010b 	sbc.w	r1, r1, fp
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	018b      	lsls	r3, r1, #6
 8001860:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001864:	0182      	lsls	r2, r0, #6
 8001866:	1a12      	subs	r2, r2, r0
 8001868:	eb63 0301 	sbc.w	r3, r3, r1
 800186c:	f04f 0000 	mov.w	r0, #0
 8001870:	f04f 0100 	mov.w	r1, #0
 8001874:	00d9      	lsls	r1, r3, #3
 8001876:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800187a:	00d0      	lsls	r0, r2, #3
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	eb12 020a 	adds.w	r2, r2, sl
 8001884:	eb43 030b 	adc.w	r3, r3, fp
 8001888:	f04f 0000 	mov.w	r0, #0
 800188c:	f04f 0100 	mov.w	r1, #0
 8001890:	0299      	lsls	r1, r3, #10
 8001892:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001896:	0290      	lsls	r0, r2, #10
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	461a      	mov	r2, r3
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	f7fe fd0a 	bl	80002c0 <__aeabi_uldivmod>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4613      	mov	r3, r2
 80018b2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018b4:	4b63      	ldr	r3, [pc, #396]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x358>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	0c1b      	lsrs	r3, r3, #16
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	3301      	adds	r3, #1
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018cc:	61bb      	str	r3, [r7, #24]
      break;
 80018ce:	e0b2      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d0:	4b5c      	ldr	r3, [pc, #368]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x358>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018da:	4b5a      	ldr	r3, [pc, #360]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x358>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d04d      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e6:	4b57      	ldr	r3, [pc, #348]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x358>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	099b      	lsrs	r3, r3, #6
 80018ec:	461a      	mov	r2, r3
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018f6:	f04f 0100 	mov.w	r1, #0
 80018fa:	ea02 0800 	and.w	r8, r2, r0
 80018fe:	ea03 0901 	and.w	r9, r3, r1
 8001902:	4640      	mov	r0, r8
 8001904:	4649      	mov	r1, r9
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	014b      	lsls	r3, r1, #5
 8001910:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001914:	0142      	lsls	r2, r0, #5
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	ebb0 0008 	subs.w	r0, r0, r8
 800191e:	eb61 0109 	sbc.w	r1, r1, r9
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	018b      	lsls	r3, r1, #6
 800192c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001930:	0182      	lsls	r2, r0, #6
 8001932:	1a12      	subs	r2, r2, r0
 8001934:	eb63 0301 	sbc.w	r3, r3, r1
 8001938:	f04f 0000 	mov.w	r0, #0
 800193c:	f04f 0100 	mov.w	r1, #0
 8001940:	00d9      	lsls	r1, r3, #3
 8001942:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001946:	00d0      	lsls	r0, r2, #3
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	eb12 0208 	adds.w	r2, r2, r8
 8001950:	eb43 0309 	adc.w	r3, r3, r9
 8001954:	f04f 0000 	mov.w	r0, #0
 8001958:	f04f 0100 	mov.w	r1, #0
 800195c:	0259      	lsls	r1, r3, #9
 800195e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001962:	0250      	lsls	r0, r2, #9
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	461a      	mov	r2, r3
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	f7fe fca4 	bl	80002c0 <__aeabi_uldivmod>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4613      	mov	r3, r2
 800197e:	61fb      	str	r3, [r7, #28]
 8001980:	e04a      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001982:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x358>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	099b      	lsrs	r3, r3, #6
 8001988:	461a      	mov	r2, r3
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001992:	f04f 0100 	mov.w	r1, #0
 8001996:	ea02 0400 	and.w	r4, r2, r0
 800199a:	ea03 0501 	and.w	r5, r3, r1
 800199e:	4620      	mov	r0, r4
 80019a0:	4629      	mov	r1, r5
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	014b      	lsls	r3, r1, #5
 80019ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019b0:	0142      	lsls	r2, r0, #5
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	1b00      	subs	r0, r0, r4
 80019b8:	eb61 0105 	sbc.w	r1, r1, r5
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	018b      	lsls	r3, r1, #6
 80019c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019ca:	0182      	lsls	r2, r0, #6
 80019cc:	1a12      	subs	r2, r2, r0
 80019ce:	eb63 0301 	sbc.w	r3, r3, r1
 80019d2:	f04f 0000 	mov.w	r0, #0
 80019d6:	f04f 0100 	mov.w	r1, #0
 80019da:	00d9      	lsls	r1, r3, #3
 80019dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019e0:	00d0      	lsls	r0, r2, #3
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	1912      	adds	r2, r2, r4
 80019e8:	eb45 0303 	adc.w	r3, r5, r3
 80019ec:	f04f 0000 	mov.w	r0, #0
 80019f0:	f04f 0100 	mov.w	r1, #0
 80019f4:	0299      	lsls	r1, r3, #10
 80019f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019fa:	0290      	lsls	r0, r2, #10
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	461a      	mov	r2, r3
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	f7fe fc58 	bl	80002c0 <__aeabi_uldivmod>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4613      	mov	r3, r2
 8001a16:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	0f1b      	lsrs	r3, r3, #28
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2c:	61bb      	str	r3, [r7, #24]
      break;
 8001a2e:	e002      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a32:	61bb      	str	r3, [r7, #24]
      break;
 8001a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a36:	69bb      	ldr	r3, [r7, #24]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3720      	adds	r7, #32
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	00f42400 	.word	0x00f42400
 8001a4c:	007a1200 	.word	0x007a1200

08001a50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e28d      	b.n	8001f7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8083 	beq.w	8001b76 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a70:	4b94      	ldr	r3, [pc, #592]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d019      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a7c:	4b91      	ldr	r3, [pc, #580]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a88:	4b8e      	ldr	r3, [pc, #568]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a94:	d00c      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a96:	4b8b      	ldr	r3, [pc, #556]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d112      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aa2:	4b88      	ldr	r3, [pc, #544]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aae:	d10b      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab0:	4b84      	ldr	r3, [pc, #528]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d05b      	beq.n	8001b74 <HAL_RCC_OscConfig+0x124>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d157      	bne.n	8001b74 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e25a      	b.n	8001f7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad0:	d106      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x90>
 8001ad2:	4b7c      	ldr	r3, [pc, #496]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a7b      	ldr	r2, [pc, #492]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e01d      	b.n	8001b1c <HAL_RCC_OscConfig+0xcc>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0xb4>
 8001aea:	4b76      	ldr	r3, [pc, #472]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a75      	ldr	r2, [pc, #468]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b73      	ldr	r3, [pc, #460]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a72      	ldr	r2, [pc, #456]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_OscConfig+0xcc>
 8001b04:	4b6f      	ldr	r3, [pc, #444]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a6e      	ldr	r2, [pc, #440]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b6c      	ldr	r3, [pc, #432]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a6b      	ldr	r2, [pc, #428]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff f984 	bl	8000e30 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff f980 	bl	8000e30 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	; 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e21f      	b.n	8001f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	4b61      	ldr	r3, [pc, #388]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0xdc>
 8001b4a:	e014      	b.n	8001b76 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f970 	bl	8000e30 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff f96c 	bl	8000e30 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e20b      	b.n	8001f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	4b57      	ldr	r3, [pc, #348]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x104>
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d06f      	beq.n	8001c62 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b82:	4b50      	ldr	r3, [pc, #320]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d017      	beq.n	8001bbe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b8e:	4b4d      	ldr	r3, [pc, #308]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d105      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b9a:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba6:	4b47      	ldr	r3, [pc, #284]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	d11c      	bne.n	8001bec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bb2:	4b44      	ldr	r3, [pc, #272]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d116      	bne.n	8001bec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bbe:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x186>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e1d3      	b.n	8001f7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4937      	ldr	r1, [pc, #220]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bea:	e03a      	b.n	8001c62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d020      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf4:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <HAL_RCC_OscConfig+0x278>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f919 	bl	8000e30 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c02:	f7ff f915 	bl	8000e30 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e1b4      	b.n	8001f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c20:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4925      	ldr	r1, [pc, #148]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	600b      	str	r3, [r1, #0]
 8001c34:	e015      	b.n	8001c62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c36:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <HAL_RCC_OscConfig+0x278>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7ff f8f8 	bl	8000e30 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c44:	f7ff f8f4 	bl	8000e30 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e193      	b.n	8001f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d036      	beq.n	8001cdc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d016      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7c:	f7ff f8d8 	bl	8000e30 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c84:	f7ff f8d4 	bl	8000e30 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e173      	b.n	8001f7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x234>
 8001ca2:	e01b      	b.n	8001cdc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001caa:	f7ff f8c1 	bl	8000e30 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb0:	e00e      	b.n	8001cd0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cb2:	f7ff f8bd 	bl	8000e30 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d907      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e15c      	b.n	8001f7e <HAL_RCC_OscConfig+0x52e>
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	42470000 	.word	0x42470000
 8001ccc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd0:	4b8a      	ldr	r3, [pc, #552]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1ea      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 8097 	beq.w	8001e18 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cee:	4b83      	ldr	r3, [pc, #524]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10f      	bne.n	8001d1a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	4b7f      	ldr	r3, [pc, #508]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a7e      	ldr	r2, [pc, #504]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b7c      	ldr	r3, [pc, #496]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d16:	2301      	movs	r3, #1
 8001d18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1a:	4b79      	ldr	r3, [pc, #484]	; (8001f00 <HAL_RCC_OscConfig+0x4b0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d118      	bne.n	8001d58 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d26:	4b76      	ldr	r3, [pc, #472]	; (8001f00 <HAL_RCC_OscConfig+0x4b0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a75      	ldr	r2, [pc, #468]	; (8001f00 <HAL_RCC_OscConfig+0x4b0>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d32:	f7ff f87d 	bl	8000e30 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3a:	f7ff f879 	bl	8000e30 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e118      	b.n	8001f7e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	4b6c      	ldr	r3, [pc, #432]	; (8001f00 <HAL_RCC_OscConfig+0x4b0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_OscConfig+0x31e>
 8001d60:	4b66      	ldr	r3, [pc, #408]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d64:	4a65      	ldr	r2, [pc, #404]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6c:	e01c      	b.n	8001da8 <HAL_RCC_OscConfig+0x358>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b05      	cmp	r3, #5
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x340>
 8001d76:	4b61      	ldr	r3, [pc, #388]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	4a60      	ldr	r2, [pc, #384]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6713      	str	r3, [r2, #112]	; 0x70
 8001d82:	4b5e      	ldr	r3, [pc, #376]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	4a5d      	ldr	r2, [pc, #372]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8e:	e00b      	b.n	8001da8 <HAL_RCC_OscConfig+0x358>
 8001d90:	4b5a      	ldr	r3, [pc, #360]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d94:	4a59      	ldr	r2, [pc, #356]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001d96:	f023 0301 	bic.w	r3, r3, #1
 8001d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9c:	4b57      	ldr	r3, [pc, #348]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da0:	4a56      	ldr	r2, [pc, #344]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001da2:	f023 0304 	bic.w	r3, r3, #4
 8001da6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d015      	beq.n	8001ddc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db0:	f7ff f83e 	bl	8000e30 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db6:	e00a      	b.n	8001dce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db8:	f7ff f83a 	bl	8000e30 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e0d7      	b.n	8001f7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dce:	4b4b      	ldr	r3, [pc, #300]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0ee      	beq.n	8001db8 <HAL_RCC_OscConfig+0x368>
 8001dda:	e014      	b.n	8001e06 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ddc:	f7ff f828 	bl	8000e30 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de2:	e00a      	b.n	8001dfa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de4:	f7ff f824 	bl	8000e30 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e0c1      	b.n	8001f7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfa:	4b40      	ldr	r3, [pc, #256]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1ee      	bne.n	8001de4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e06:	7dfb      	ldrb	r3, [r7, #23]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d105      	bne.n	8001e18 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0c:	4b3b      	ldr	r3, [pc, #236]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	4a3a      	ldr	r2, [pc, #232]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80ad 	beq.w	8001f7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e22:	4b36      	ldr	r3, [pc, #216]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d060      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d145      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e36:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <HAL_RCC_OscConfig+0x4b4>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7fe fff8 	bl	8000e30 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e44:	f7fe fff4 	bl	8000e30 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e093      	b.n	8001f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e56:	4b29      	ldr	r3, [pc, #164]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69da      	ldr	r2, [r3, #28]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	019b      	lsls	r3, r3, #6
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e78:	085b      	lsrs	r3, r3, #1
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	041b      	lsls	r3, r3, #16
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	071b      	lsls	r3, r3, #28
 8001e8e:	491b      	ldr	r1, [pc, #108]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <HAL_RCC_OscConfig+0x4b4>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7fe ffc9 	bl	8000e30 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7fe ffc5 	bl	8000e30 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e064      	b.n	8001f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x452>
 8001ec0:	e05c      	b.n	8001f7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_RCC_OscConfig+0x4b4>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7fe ffb2 	bl	8000e30 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7fe ffae 	bl	8000e30 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e04d      	b.n	8001f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x480>
 8001eee:	e045      	b.n	8001f7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e040      	b.n	8001f7e <HAL_RCC_OscConfig+0x52e>
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40007000 	.word	0x40007000
 8001f04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f08:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <HAL_RCC_OscConfig+0x538>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d030      	beq.n	8001f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d129      	bne.n	8001f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d122      	bne.n	8001f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f38:	4013      	ands	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d119      	bne.n	8001f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	085b      	lsrs	r3, r3, #1
 8001f50:	3b01      	subs	r3, #1
 8001f52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d10f      	bne.n	8001f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d107      	bne.n	8001f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800

08001f8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e03f      	b.n	800201e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7fe fe5c 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2224      	movs	r2, #36	; 0x24
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 fe1f 	bl	8002c14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ff4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002004:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b08a      	sub	sp, #40	; 0x28
 800202a:	af02      	add	r7, sp, #8
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	4613      	mov	r3, r2
 8002034:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b20      	cmp	r3, #32
 8002044:	d17c      	bne.n	8002140 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <HAL_UART_Transmit+0x2c>
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e075      	b.n	8002142 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_UART_Transmit+0x3e>
 8002060:	2302      	movs	r3, #2
 8002062:	e06e      	b.n	8002142 <HAL_UART_Transmit+0x11c>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2221      	movs	r2, #33	; 0x21
 8002076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800207a:	f7fe fed9 	bl	8000e30 <HAL_GetTick>
 800207e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	88fa      	ldrh	r2, [r7, #6]
 8002084:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	88fa      	ldrh	r2, [r7, #6]
 800208a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002094:	d108      	bne.n	80020a8 <HAL_UART_Transmit+0x82>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d104      	bne.n	80020a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	e003      	b.n	80020b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020b8:	e02a      	b.n	8002110 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2200      	movs	r2, #0
 80020c2:	2180      	movs	r1, #128	; 0x80
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 fb63 	bl	8002790 <UART_WaitOnFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e036      	b.n	8002142 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10b      	bne.n	80020f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	3302      	adds	r3, #2
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	e007      	b.n	8002102 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	781a      	ldrb	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	3301      	adds	r3, #1
 8002100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002114:	b29b      	uxth	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1cf      	bne.n	80020ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2200      	movs	r2, #0
 8002122:	2140      	movs	r1, #64	; 0x40
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 fb33 	bl	8002790 <UART_WaitOnFlagUntilTimeout>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e006      	b.n	8002142 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	e000      	b.n	8002142 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002140:	2302      	movs	r3, #2
  }
}
 8002142:	4618      	mov	r0, r3
 8002144:	3720      	adds	r7, #32
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800214a:	b480      	push	{r7}
 800214c:	b085      	sub	sp, #20
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	4613      	mov	r3, r2
 8002156:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b20      	cmp	r3, #32
 8002162:	d130      	bne.n	80021c6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <HAL_UART_Transmit_IT+0x26>
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e029      	b.n	80021c8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_UART_Transmit_IT+0x38>
 800217e:	2302      	movs	r3, #2
 8002180:	e022      	b.n	80021c8 <HAL_UART_Transmit_IT+0x7e>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	88fa      	ldrh	r2, [r7, #6]
 8002194:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	88fa      	ldrh	r2, [r7, #6]
 800219a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2221      	movs	r2, #33	; 0x21
 80021a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021c0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e000      	b.n	80021c8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
  }
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	4613      	mov	r3, r2
 80021e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	d11d      	bne.n	800222a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <HAL_UART_Receive_IT+0x26>
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e016      	b.n	800222c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_UART_Receive_IT+0x38>
 8002208:	2302      	movs	r3, #2
 800220a:	e00f      	b.n	800222c <HAL_UART_Receive_IT+0x58>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	461a      	mov	r2, r3
 800221e:	68b9      	ldr	r1, [r7, #8]
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fb23 	bl	800286c <UART_Start_Receive_IT>
 8002226:	4603      	mov	r3, r0
 8002228:	e000      	b.n	800222c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800222a:	2302      	movs	r3, #2
  }
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b0ba      	sub	sp, #232	; 0xe8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002272:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10f      	bne.n	800229a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800227a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_UART_IRQHandler+0x66>
 8002286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 fc03 	bl	8002a9e <UART_Receive_IT>
      return;
 8002298:	e256      	b.n	8002748 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800229a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 80de 	beq.w	8002460 <HAL_UART_IRQHandler+0x22c>
 80022a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d106      	bne.n	80022be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80d1 	beq.w	8002460 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <HAL_UART_IRQHandler+0xae>
 80022ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00b      	beq.n	8002306 <HAL_UART_IRQHandler+0xd2>
 80022ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f043 0202 	orr.w	r2, r3, #2
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00b      	beq.n	800232a <HAL_UART_IRQHandler+0xf6>
 8002312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f043 0204 	orr.w	r2, r3, #4
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800232a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d011      	beq.n	800235a <HAL_UART_IRQHandler+0x126>
 8002336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	2b00      	cmp	r3, #0
 8002340:	d105      	bne.n	800234e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f043 0208 	orr.w	r2, r3, #8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 81ed 	beq.w	800273e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002368:	f003 0320 	and.w	r3, r3, #32
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_UART_IRQHandler+0x14e>
 8002370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002374:	f003 0320 	and.w	r3, r3, #32
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fb8e 	bl	8002a9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238c:	2b40      	cmp	r3, #64	; 0x40
 800238e:	bf0c      	ite	eq
 8002390:	2301      	moveq	r3, #1
 8002392:	2300      	movne	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d103      	bne.n	80023ae <HAL_UART_IRQHandler+0x17a>
 80023a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d04f      	beq.n	800244e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 fa96 	bl	80028e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023be:	2b40      	cmp	r3, #64	; 0x40
 80023c0:	d141      	bne.n	8002446 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	3314      	adds	r3, #20
 80023c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023d0:	e853 3f00 	ldrex	r3, [r3]
 80023d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80023d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	3314      	adds	r3, #20
 80023ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80023ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80023f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80023fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80023fe:	e841 2300 	strex	r3, r2, [r1]
 8002402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002406:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1d9      	bne.n	80023c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002412:	2b00      	cmp	r3, #0
 8002414:	d013      	beq.n	800243e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241a:	4a7d      	ldr	r2, [pc, #500]	; (8002610 <HAL_UART_IRQHandler+0x3dc>)
 800241c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fe91 	bl	800114a <HAL_DMA_Abort_IT>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d016      	beq.n	800245c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002438:	4610      	mov	r0, r2
 800243a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800243c:	e00e      	b.n	800245c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f990 	bl	8002764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002444:	e00a      	b.n	800245c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f98c 	bl	8002764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800244c:	e006      	b.n	800245c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f988 	bl	8002764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800245a:	e170      	b.n	800273e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800245c:	bf00      	nop
    return;
 800245e:	e16e      	b.n	800273e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	2b01      	cmp	r3, #1
 8002466:	f040 814a 	bne.w	80026fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800246a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 8143 	beq.w	80026fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 813c 	beq.w	80026fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a6:	2b40      	cmp	r3, #64	; 0x40
 80024a8:	f040 80b4 	bne.w	8002614 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 8140 	beq.w	8002742 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024ca:	429a      	cmp	r2, r3
 80024cc:	f080 8139 	bcs.w	8002742 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e2:	f000 8088 	beq.w	80025f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	330c      	adds	r3, #12
 80024ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024f4:	e853 3f00 	ldrex	r3, [r3]
 80024f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80024fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002504:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	330c      	adds	r3, #12
 800250e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002512:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800251a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800251e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002522:	e841 2300 	strex	r3, r2, [r1]
 8002526:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800252a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1d9      	bne.n	80024e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	3314      	adds	r3, #20
 8002538:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800253c:	e853 3f00 	ldrex	r3, [r3]
 8002540:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002542:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002544:	f023 0301 	bic.w	r3, r3, #1
 8002548:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3314      	adds	r3, #20
 8002552:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002556:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800255a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800255c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800255e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002562:	e841 2300 	strex	r3, r2, [r1]
 8002566:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1e1      	bne.n	8002532 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	3314      	adds	r3, #20
 8002574:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002578:	e853 3f00 	ldrex	r3, [r3]
 800257c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800257e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002584:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	3314      	adds	r3, #20
 800258e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002592:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002594:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002596:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002598:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800259a:	e841 2300 	strex	r3, r2, [r1]
 800259e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80025a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1e3      	bne.n	800256e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	330c      	adds	r3, #12
 80025ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025be:	e853 3f00 	ldrex	r3, [r3]
 80025c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80025c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c6:	f023 0310 	bic.w	r3, r3, #16
 80025ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	330c      	adds	r3, #12
 80025d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80025d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80025da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025e0:	e841 2300 	strex	r3, r2, [r1]
 80025e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80025e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1e3      	bne.n	80025b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fd3a 	bl	800106a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025fe:	b29b      	uxth	r3, r3
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	b29b      	uxth	r3, r3
 8002604:	4619      	mov	r1, r3
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f8b6 	bl	8002778 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800260c:	e099      	b.n	8002742 <HAL_UART_IRQHandler+0x50e>
 800260e:	bf00      	nop
 8002610:	080029a7 	.word	0x080029a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800261c:	b29b      	uxth	r3, r3
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 808b 	beq.w	8002746 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8086 	beq.w	8002746 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	330c      	adds	r3, #12
 8002640:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002644:	e853 3f00 	ldrex	r3, [r3]
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800264a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002650:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	330c      	adds	r3, #12
 800265a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800265e:	647a      	str	r2, [r7, #68]	; 0x44
 8002660:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002662:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002664:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002666:	e841 2300 	strex	r3, r2, [r1]
 800266a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800266c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1e3      	bne.n	800263a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3314      	adds	r3, #20
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	e853 3f00 	ldrex	r3, [r3]
 8002680:	623b      	str	r3, [r7, #32]
   return(result);
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	f023 0301 	bic.w	r3, r3, #1
 8002688:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3314      	adds	r3, #20
 8002692:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002696:	633a      	str	r2, [r7, #48]	; 0x30
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800269c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800269e:	e841 2300 	strex	r3, r2, [r1]
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1e3      	bne.n	8002672 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	330c      	adds	r3, #12
 80026be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	e853 3f00 	ldrex	r3, [r3]
 80026c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f023 0310 	bic.w	r3, r3, #16
 80026ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	330c      	adds	r3, #12
 80026d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80026dc:	61fa      	str	r2, [r7, #28]
 80026de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e0:	69b9      	ldr	r1, [r7, #24]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	e841 2300 	strex	r3, r2, [r1]
 80026e8:	617b      	str	r3, [r7, #20]
   return(result);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1e3      	bne.n	80026b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026f4:	4619      	mov	r1, r3
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f83e 	bl	8002778 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026fc:	e023      	b.n	8002746 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <HAL_UART_IRQHandler+0x4ea>
 800270a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f959 	bl	80029ce <UART_Transmit_IT>
    return;
 800271c:	e014      	b.n	8002748 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800271e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00e      	beq.n	8002748 <HAL_UART_IRQHandler+0x514>
 800272a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800272e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002732:	2b00      	cmp	r3, #0
 8002734:	d008      	beq.n	8002748 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f999 	bl	8002a6e <UART_EndTransmit_IT>
    return;
 800273c:	e004      	b.n	8002748 <HAL_UART_IRQHandler+0x514>
    return;
 800273e:	bf00      	nop
 8002740:	e002      	b.n	8002748 <HAL_UART_IRQHandler+0x514>
      return;
 8002742:	bf00      	nop
 8002744:	e000      	b.n	8002748 <HAL_UART_IRQHandler+0x514>
      return;
 8002746:	bf00      	nop
  }
}
 8002748:	37e8      	adds	r7, #232	; 0xe8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop

08002750 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b090      	sub	sp, #64	; 0x40
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	4613      	mov	r3, r2
 800279e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027a0:	e050      	b.n	8002844 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a8:	d04c      	beq.n	8002844 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80027b0:	f7fe fb3e 	bl	8000e30 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027bc:	429a      	cmp	r2, r3
 80027be:	d241      	bcs.n	8002844 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	330c      	adds	r3, #12
 80027c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	e853 3f00 	ldrex	r3, [r3]
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80027d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	330c      	adds	r3, #12
 80027de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027e0:	637a      	str	r2, [r7, #52]	; 0x34
 80027e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027e8:	e841 2300 	strex	r3, r2, [r1]
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1e5      	bne.n	80027c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	3314      	adds	r3, #20
 80027fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	e853 3f00 	ldrex	r3, [r3]
 8002802:	613b      	str	r3, [r7, #16]
   return(result);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	63bb      	str	r3, [r7, #56]	; 0x38
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	3314      	adds	r3, #20
 8002812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002814:	623a      	str	r2, [r7, #32]
 8002816:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002818:	69f9      	ldr	r1, [r7, #28]
 800281a:	6a3a      	ldr	r2, [r7, #32]
 800281c:	e841 2300 	strex	r3, r2, [r1]
 8002820:	61bb      	str	r3, [r7, #24]
   return(result);
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e5      	bne.n	80027f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e00f      	b.n	8002864 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4013      	ands	r3, r2
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	429a      	cmp	r2, r3
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	429a      	cmp	r2, r3
 8002860:	d09f      	beq.n	80027a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3740      	adds	r7, #64	; 0x40
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	4613      	mov	r3, r2
 8002878:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	88fa      	ldrh	r2, [r7, #6]
 8002884:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	88fa      	ldrh	r2, [r7, #6]
 800288a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2222      	movs	r2, #34	; 0x22
 8002896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028b0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0201 	orr.w	r2, r2, #1
 80028c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0220 	orr.w	r2, r2, #32
 80028d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b095      	sub	sp, #84	; 0x54
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f2:	e853 3f00 	ldrex	r3, [r3]
 80028f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	330c      	adds	r3, #12
 8002906:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002908:	643a      	str	r2, [r7, #64]	; 0x40
 800290a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800290e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002910:	e841 2300 	strex	r3, r2, [r1]
 8002914:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1e5      	bne.n	80028e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3314      	adds	r3, #20
 8002922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	e853 3f00 	ldrex	r3, [r3]
 800292a:	61fb      	str	r3, [r7, #28]
   return(result);
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f023 0301 	bic.w	r3, r3, #1
 8002932:	64bb      	str	r3, [r7, #72]	; 0x48
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3314      	adds	r3, #20
 800293a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800293c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002944:	e841 2300 	strex	r3, r2, [r1]
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1e5      	bne.n	800291c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	2b01      	cmp	r3, #1
 8002956:	d119      	bne.n	800298c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	330c      	adds	r3, #12
 800295e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	e853 3f00 	ldrex	r3, [r3]
 8002966:	60bb      	str	r3, [r7, #8]
   return(result);
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f023 0310 	bic.w	r3, r3, #16
 800296e:	647b      	str	r3, [r7, #68]	; 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	330c      	adds	r3, #12
 8002976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002978:	61ba      	str	r2, [r7, #24]
 800297a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297c:	6979      	ldr	r1, [r7, #20]
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	e841 2300 	strex	r3, r2, [r1]
 8002984:	613b      	str	r3, [r7, #16]
   return(result);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e5      	bne.n	8002958 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
}
 800299a:	bf00      	nop
 800299c:	3754      	adds	r7, #84	; 0x54
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f7ff fecf 	bl	8002764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b21      	cmp	r3, #33	; 0x21
 80029e0:	d13e      	bne.n	8002a60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ea:	d114      	bne.n	8002a16 <UART_Transmit_IT+0x48>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d110      	bne.n	8002a16 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	1c9a      	adds	r2, r3, #2
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	621a      	str	r2, [r3, #32]
 8002a14:	e008      	b.n	8002a28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	1c59      	adds	r1, r3, #1
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6211      	str	r1, [r2, #32]
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4619      	mov	r1, r3
 8002a36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10f      	bne.n	8002a5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e000      	b.n	8002a62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a60:	2302      	movs	r3, #2
  }
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff fe5e 	bl	8002750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b08c      	sub	sp, #48	; 0x30
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b22      	cmp	r3, #34	; 0x22
 8002ab0:	f040 80ab 	bne.w	8002c0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002abc:	d117      	bne.n	8002aee <UART_Receive_IT+0x50>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d113      	bne.n	8002aee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	1c9a      	adds	r2, r3, #2
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28
 8002aec:	e026      	b.n	8002b3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b00:	d007      	beq.n	8002b12 <UART_Receive_IT+0x74>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10a      	bne.n	8002b20 <UART_Receive_IT+0x82>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e008      	b.n	8002b32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d15a      	bne.n	8002c06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0220 	bic.w	r2, r2, #32
 8002b5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d135      	bne.n	8002bfc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	330c      	adds	r3, #12
 8002b9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	e853 3f00 	ldrex	r3, [r3]
 8002ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f023 0310 	bic.w	r3, r3, #16
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	330c      	adds	r3, #12
 8002bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb6:	623a      	str	r2, [r7, #32]
 8002bb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bba:	69f9      	ldr	r1, [r7, #28]
 8002bbc:	6a3a      	ldr	r2, [r7, #32]
 8002bbe:	e841 2300 	strex	r3, r2, [r1]
 8002bc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1e5      	bne.n	8002b96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d10a      	bne.n	8002bee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff fdbf 	bl	8002778 <HAL_UARTEx_RxEventCallback>
 8002bfa:	e002      	b.n	8002c02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7fd fe4d 	bl	800089c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e002      	b.n	8002c0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
  }
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3730      	adds	r7, #48	; 0x30
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c18:	b09f      	sub	sp, #124	; 0x7c
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2a:	68d9      	ldr	r1, [r3, #12]
 8002c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	ea40 0301 	orr.w	r3, r0, r1
 8002c34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c58:	f021 010c 	bic.w	r1, r1, #12
 8002c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c62:	430b      	orrs	r3, r1
 8002c64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c72:	6999      	ldr	r1, [r3, #24]
 8002c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	ea40 0301 	orr.w	r3, r0, r1
 8002c7c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4bc5      	ldr	r3, [pc, #788]	; (8002f98 <UART_SetConfig+0x384>)
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d004      	beq.n	8002c92 <UART_SetConfig+0x7e>
 8002c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4bc3      	ldr	r3, [pc, #780]	; (8002f9c <UART_SetConfig+0x388>)
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d103      	bne.n	8002c9a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c92:	f7fe fd17 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
 8002c96:	6778      	str	r0, [r7, #116]	; 0x74
 8002c98:	e002      	b.n	8002ca0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c9a:	f7fe fcff 	bl	800169c <HAL_RCC_GetPCLK1Freq>
 8002c9e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca8:	f040 80b6 	bne.w	8002e18 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cae:	461c      	mov	r4, r3
 8002cb0:	f04f 0500 	mov.w	r5, #0
 8002cb4:	4622      	mov	r2, r4
 8002cb6:	462b      	mov	r3, r5
 8002cb8:	1891      	adds	r1, r2, r2
 8002cba:	6439      	str	r1, [r7, #64]	; 0x40
 8002cbc:	415b      	adcs	r3, r3
 8002cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cc4:	1912      	adds	r2, r2, r4
 8002cc6:	eb45 0303 	adc.w	r3, r5, r3
 8002cca:	f04f 0000 	mov.w	r0, #0
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	00d9      	lsls	r1, r3, #3
 8002cd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cd8:	00d0      	lsls	r0, r2, #3
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	1911      	adds	r1, r2, r4
 8002ce0:	6639      	str	r1, [r7, #96]	; 0x60
 8002ce2:	416b      	adcs	r3, r5
 8002ce4:	667b      	str	r3, [r7, #100]	; 0x64
 8002ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	461a      	mov	r2, r3
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	1891      	adds	r1, r2, r2
 8002cf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cf4:	415b      	adcs	r3, r3
 8002cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002cfc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002d00:	f7fd fade 	bl	80002c0 <__aeabi_uldivmod>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4ba5      	ldr	r3, [pc, #660]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	011e      	lsls	r6, r3, #4
 8002d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d14:	461c      	mov	r4, r3
 8002d16:	f04f 0500 	mov.w	r5, #0
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	462b      	mov	r3, r5
 8002d1e:	1891      	adds	r1, r2, r2
 8002d20:	6339      	str	r1, [r7, #48]	; 0x30
 8002d22:	415b      	adcs	r3, r3
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
 8002d26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d2a:	1912      	adds	r2, r2, r4
 8002d2c:	eb45 0303 	adc.w	r3, r5, r3
 8002d30:	f04f 0000 	mov.w	r0, #0
 8002d34:	f04f 0100 	mov.w	r1, #0
 8002d38:	00d9      	lsls	r1, r3, #3
 8002d3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d3e:	00d0      	lsls	r0, r2, #3
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	1911      	adds	r1, r2, r4
 8002d46:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d48:	416b      	adcs	r3, r5
 8002d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	461a      	mov	r2, r3
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	1891      	adds	r1, r2, r2
 8002d58:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d5a:	415b      	adcs	r3, r3
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d62:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d66:	f7fd faab 	bl	80002c0 <__aeabi_uldivmod>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4b8c      	ldr	r3, [pc, #560]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002d70:	fba3 1302 	umull	r1, r3, r3, r2
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	2164      	movs	r1, #100	; 0x64
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	3332      	adds	r3, #50	; 0x32
 8002d82:	4a87      	ldr	r2, [pc, #540]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d90:	441e      	add	r6, r3
 8002d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d94:	4618      	mov	r0, r3
 8002d96:	f04f 0100 	mov.w	r1, #0
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	1894      	adds	r4, r2, r2
 8002da0:	623c      	str	r4, [r7, #32]
 8002da2:	415b      	adcs	r3, r3
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
 8002da6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002daa:	1812      	adds	r2, r2, r0
 8002dac:	eb41 0303 	adc.w	r3, r1, r3
 8002db0:	f04f 0400 	mov.w	r4, #0
 8002db4:	f04f 0500 	mov.w	r5, #0
 8002db8:	00dd      	lsls	r5, r3, #3
 8002dba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002dbe:	00d4      	lsls	r4, r2, #3
 8002dc0:	4622      	mov	r2, r4
 8002dc2:	462b      	mov	r3, r5
 8002dc4:	1814      	adds	r4, r2, r0
 8002dc6:	653c      	str	r4, [r7, #80]	; 0x50
 8002dc8:	414b      	adcs	r3, r1
 8002dca:	657b      	str	r3, [r7, #84]	; 0x54
 8002dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	1891      	adds	r1, r2, r2
 8002dd8:	61b9      	str	r1, [r7, #24]
 8002dda:	415b      	adcs	r3, r3
 8002ddc:	61fb      	str	r3, [r7, #28]
 8002dde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002de6:	f7fd fa6b 	bl	80002c0 <__aeabi_uldivmod>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4b6c      	ldr	r3, [pc, #432]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002df0:	fba3 1302 	umull	r1, r3, r3, r2
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	2164      	movs	r1, #100	; 0x64
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	3332      	adds	r3, #50	; 0x32
 8002e02:	4a67      	ldr	r2, [pc, #412]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	f003 0207 	and.w	r2, r3, #7
 8002e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4432      	add	r2, r6
 8002e14:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e16:	e0b9      	b.n	8002f8c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e1a:	461c      	mov	r4, r3
 8002e1c:	f04f 0500 	mov.w	r5, #0
 8002e20:	4622      	mov	r2, r4
 8002e22:	462b      	mov	r3, r5
 8002e24:	1891      	adds	r1, r2, r2
 8002e26:	6139      	str	r1, [r7, #16]
 8002e28:	415b      	adcs	r3, r3
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e30:	1912      	adds	r2, r2, r4
 8002e32:	eb45 0303 	adc.w	r3, r5, r3
 8002e36:	f04f 0000 	mov.w	r0, #0
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	00d9      	lsls	r1, r3, #3
 8002e40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e44:	00d0      	lsls	r0, r2, #3
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	eb12 0804 	adds.w	r8, r2, r4
 8002e4e:	eb43 0905 	adc.w	r9, r3, r5
 8002e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	008b      	lsls	r3, r1, #2
 8002e66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e6a:	0082      	lsls	r2, r0, #2
 8002e6c:	4640      	mov	r0, r8
 8002e6e:	4649      	mov	r1, r9
 8002e70:	f7fd fa26 	bl	80002c0 <__aeabi_uldivmod>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4b49      	ldr	r3, [pc, #292]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	011e      	lsls	r6, r3, #4
 8002e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e84:	4618      	mov	r0, r3
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	1894      	adds	r4, r2, r2
 8002e90:	60bc      	str	r4, [r7, #8]
 8002e92:	415b      	adcs	r3, r3
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e9a:	1812      	adds	r2, r2, r0
 8002e9c:	eb41 0303 	adc.w	r3, r1, r3
 8002ea0:	f04f 0400 	mov.w	r4, #0
 8002ea4:	f04f 0500 	mov.w	r5, #0
 8002ea8:	00dd      	lsls	r5, r3, #3
 8002eaa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002eae:	00d4      	lsls	r4, r2, #3
 8002eb0:	4622      	mov	r2, r4
 8002eb2:	462b      	mov	r3, r5
 8002eb4:	1814      	adds	r4, r2, r0
 8002eb6:	64bc      	str	r4, [r7, #72]	; 0x48
 8002eb8:	414b      	adcs	r3, r1
 8002eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f04f 0100 	mov.w	r1, #0
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	008b      	lsls	r3, r1, #2
 8002ed0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ed4:	0082      	lsls	r2, r0, #2
 8002ed6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002eda:	f7fd f9f1 	bl	80002c0 <__aeabi_uldivmod>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4b2f      	ldr	r3, [pc, #188]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	2164      	movs	r1, #100	; 0x64
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	3332      	adds	r3, #50	; 0x32
 8002ef6:	4a2a      	ldr	r2, [pc, #168]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f02:	441e      	add	r6, r3
 8002f04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f06:	4618      	mov	r0, r3
 8002f08:	f04f 0100 	mov.w	r1, #0
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	1894      	adds	r4, r2, r2
 8002f12:	603c      	str	r4, [r7, #0]
 8002f14:	415b      	adcs	r3, r3
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f1c:	1812      	adds	r2, r2, r0
 8002f1e:	eb41 0303 	adc.w	r3, r1, r3
 8002f22:	f04f 0400 	mov.w	r4, #0
 8002f26:	f04f 0500 	mov.w	r5, #0
 8002f2a:	00dd      	lsls	r5, r3, #3
 8002f2c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f30:	00d4      	lsls	r4, r2, #3
 8002f32:	4622      	mov	r2, r4
 8002f34:	462b      	mov	r3, r5
 8002f36:	eb12 0a00 	adds.w	sl, r2, r0
 8002f3a:	eb43 0b01 	adc.w	fp, r3, r1
 8002f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f04f 0100 	mov.w	r1, #0
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	008b      	lsls	r3, r1, #2
 8002f52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f56:	0082      	lsls	r2, r0, #2
 8002f58:	4650      	mov	r0, sl
 8002f5a:	4659      	mov	r1, fp
 8002f5c:	f7fd f9b0 	bl	80002c0 <__aeabi_uldivmod>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002f66:	fba3 1302 	umull	r1, r3, r3, r2
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2164      	movs	r1, #100	; 0x64
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	3332      	adds	r3, #50	; 0x32
 8002f78:	4a09      	ldr	r2, [pc, #36]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	f003 020f 	and.w	r2, r3, #15
 8002f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4432      	add	r2, r6
 8002f8a:	609a      	str	r2, [r3, #8]
}
 8002f8c:	bf00      	nop
 8002f8e:	377c      	adds	r7, #124	; 0x7c
 8002f90:	46bd      	mov	sp, r7
 8002f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f96:	bf00      	nop
 8002f98:	40011000 	.word	0x40011000
 8002f9c:	40011400 	.word	0x40011400
 8002fa0:	51eb851f 	.word	0x51eb851f

08002fa4 <__errno>:
 8002fa4:	4b01      	ldr	r3, [pc, #4]	; (8002fac <__errno+0x8>)
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	2000000c 	.word	0x2000000c

08002fb0 <__libc_init_array>:
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	4d0d      	ldr	r5, [pc, #52]	; (8002fe8 <__libc_init_array+0x38>)
 8002fb4:	4c0d      	ldr	r4, [pc, #52]	; (8002fec <__libc_init_array+0x3c>)
 8002fb6:	1b64      	subs	r4, r4, r5
 8002fb8:	10a4      	asrs	r4, r4, #2
 8002fba:	2600      	movs	r6, #0
 8002fbc:	42a6      	cmp	r6, r4
 8002fbe:	d109      	bne.n	8002fd4 <__libc_init_array+0x24>
 8002fc0:	4d0b      	ldr	r5, [pc, #44]	; (8002ff0 <__libc_init_array+0x40>)
 8002fc2:	4c0c      	ldr	r4, [pc, #48]	; (8002ff4 <__libc_init_array+0x44>)
 8002fc4:	f001 f912 	bl	80041ec <_init>
 8002fc8:	1b64      	subs	r4, r4, r5
 8002fca:	10a4      	asrs	r4, r4, #2
 8002fcc:	2600      	movs	r6, #0
 8002fce:	42a6      	cmp	r6, r4
 8002fd0:	d105      	bne.n	8002fde <__libc_init_array+0x2e>
 8002fd2:	bd70      	pop	{r4, r5, r6, pc}
 8002fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd8:	4798      	blx	r3
 8002fda:	3601      	adds	r6, #1
 8002fdc:	e7ee      	b.n	8002fbc <__libc_init_array+0xc>
 8002fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe2:	4798      	blx	r3
 8002fe4:	3601      	adds	r6, #1
 8002fe6:	e7f2      	b.n	8002fce <__libc_init_array+0x1e>
 8002fe8:	080044e4 	.word	0x080044e4
 8002fec:	080044e4 	.word	0x080044e4
 8002ff0:	080044e4 	.word	0x080044e4
 8002ff4:	080044e8 	.word	0x080044e8

08002ff8 <memset>:
 8002ff8:	4402      	add	r2, r0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d100      	bne.n	8003002 <memset+0xa>
 8003000:	4770      	bx	lr
 8003002:	f803 1b01 	strb.w	r1, [r3], #1
 8003006:	e7f9      	b.n	8002ffc <memset+0x4>

08003008 <siprintf>:
 8003008:	b40e      	push	{r1, r2, r3}
 800300a:	b500      	push	{lr}
 800300c:	b09c      	sub	sp, #112	; 0x70
 800300e:	ab1d      	add	r3, sp, #116	; 0x74
 8003010:	9002      	str	r0, [sp, #8]
 8003012:	9006      	str	r0, [sp, #24]
 8003014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003018:	4809      	ldr	r0, [pc, #36]	; (8003040 <siprintf+0x38>)
 800301a:	9107      	str	r1, [sp, #28]
 800301c:	9104      	str	r1, [sp, #16]
 800301e:	4909      	ldr	r1, [pc, #36]	; (8003044 <siprintf+0x3c>)
 8003020:	f853 2b04 	ldr.w	r2, [r3], #4
 8003024:	9105      	str	r1, [sp, #20]
 8003026:	6800      	ldr	r0, [r0, #0]
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	a902      	add	r1, sp, #8
 800302c:	f000 f896 	bl	800315c <_svfiprintf_r>
 8003030:	9b02      	ldr	r3, [sp, #8]
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]
 8003036:	b01c      	add	sp, #112	; 0x70
 8003038:	f85d eb04 	ldr.w	lr, [sp], #4
 800303c:	b003      	add	sp, #12
 800303e:	4770      	bx	lr
 8003040:	2000000c 	.word	0x2000000c
 8003044:	ffff0208 	.word	0xffff0208

08003048 <siscanf>:
 8003048:	b40e      	push	{r1, r2, r3}
 800304a:	b510      	push	{r4, lr}
 800304c:	b09f      	sub	sp, #124	; 0x7c
 800304e:	ac21      	add	r4, sp, #132	; 0x84
 8003050:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003054:	f854 2b04 	ldr.w	r2, [r4], #4
 8003058:	9201      	str	r2, [sp, #4]
 800305a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800305e:	9004      	str	r0, [sp, #16]
 8003060:	9008      	str	r0, [sp, #32]
 8003062:	f7fd f8d5 	bl	8000210 <strlen>
 8003066:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <siscanf+0x50>)
 8003068:	9005      	str	r0, [sp, #20]
 800306a:	9009      	str	r0, [sp, #36]	; 0x24
 800306c:	930d      	str	r3, [sp, #52]	; 0x34
 800306e:	480b      	ldr	r0, [pc, #44]	; (800309c <siscanf+0x54>)
 8003070:	9a01      	ldr	r2, [sp, #4]
 8003072:	6800      	ldr	r0, [r0, #0]
 8003074:	9403      	str	r4, [sp, #12]
 8003076:	2300      	movs	r3, #0
 8003078:	9311      	str	r3, [sp, #68]	; 0x44
 800307a:	9316      	str	r3, [sp, #88]	; 0x58
 800307c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003080:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003084:	a904      	add	r1, sp, #16
 8003086:	4623      	mov	r3, r4
 8003088:	f000 f9c2 	bl	8003410 <__ssvfiscanf_r>
 800308c:	b01f      	add	sp, #124	; 0x7c
 800308e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003092:	b003      	add	sp, #12
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	080030a1 	.word	0x080030a1
 800309c:	2000000c 	.word	0x2000000c

080030a0 <__seofread>:
 80030a0:	2000      	movs	r0, #0
 80030a2:	4770      	bx	lr

080030a4 <__ssputs_r>:
 80030a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030a8:	688e      	ldr	r6, [r1, #8]
 80030aa:	429e      	cmp	r6, r3
 80030ac:	4682      	mov	sl, r0
 80030ae:	460c      	mov	r4, r1
 80030b0:	4690      	mov	r8, r2
 80030b2:	461f      	mov	r7, r3
 80030b4:	d838      	bhi.n	8003128 <__ssputs_r+0x84>
 80030b6:	898a      	ldrh	r2, [r1, #12]
 80030b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030bc:	d032      	beq.n	8003124 <__ssputs_r+0x80>
 80030be:	6825      	ldr	r5, [r4, #0]
 80030c0:	6909      	ldr	r1, [r1, #16]
 80030c2:	eba5 0901 	sub.w	r9, r5, r1
 80030c6:	6965      	ldr	r5, [r4, #20]
 80030c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030d0:	3301      	adds	r3, #1
 80030d2:	444b      	add	r3, r9
 80030d4:	106d      	asrs	r5, r5, #1
 80030d6:	429d      	cmp	r5, r3
 80030d8:	bf38      	it	cc
 80030da:	461d      	movcc	r5, r3
 80030dc:	0553      	lsls	r3, r2, #21
 80030de:	d531      	bpl.n	8003144 <__ssputs_r+0xa0>
 80030e0:	4629      	mov	r1, r5
 80030e2:	f000 ffdf 	bl	80040a4 <_malloc_r>
 80030e6:	4606      	mov	r6, r0
 80030e8:	b950      	cbnz	r0, 8003100 <__ssputs_r+0x5c>
 80030ea:	230c      	movs	r3, #12
 80030ec:	f8ca 3000 	str.w	r3, [sl]
 80030f0:	89a3      	ldrh	r3, [r4, #12]
 80030f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030f6:	81a3      	strh	r3, [r4, #12]
 80030f8:	f04f 30ff 	mov.w	r0, #4294967295
 80030fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003100:	6921      	ldr	r1, [r4, #16]
 8003102:	464a      	mov	r2, r9
 8003104:	f000 ff56 	bl	8003fb4 <memcpy>
 8003108:	89a3      	ldrh	r3, [r4, #12]
 800310a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800310e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003112:	81a3      	strh	r3, [r4, #12]
 8003114:	6126      	str	r6, [r4, #16]
 8003116:	6165      	str	r5, [r4, #20]
 8003118:	444e      	add	r6, r9
 800311a:	eba5 0509 	sub.w	r5, r5, r9
 800311e:	6026      	str	r6, [r4, #0]
 8003120:	60a5      	str	r5, [r4, #8]
 8003122:	463e      	mov	r6, r7
 8003124:	42be      	cmp	r6, r7
 8003126:	d900      	bls.n	800312a <__ssputs_r+0x86>
 8003128:	463e      	mov	r6, r7
 800312a:	4632      	mov	r2, r6
 800312c:	6820      	ldr	r0, [r4, #0]
 800312e:	4641      	mov	r1, r8
 8003130:	f000 ff4e 	bl	8003fd0 <memmove>
 8003134:	68a3      	ldr	r3, [r4, #8]
 8003136:	6822      	ldr	r2, [r4, #0]
 8003138:	1b9b      	subs	r3, r3, r6
 800313a:	4432      	add	r2, r6
 800313c:	60a3      	str	r3, [r4, #8]
 800313e:	6022      	str	r2, [r4, #0]
 8003140:	2000      	movs	r0, #0
 8003142:	e7db      	b.n	80030fc <__ssputs_r+0x58>
 8003144:	462a      	mov	r2, r5
 8003146:	f001 f807 	bl	8004158 <_realloc_r>
 800314a:	4606      	mov	r6, r0
 800314c:	2800      	cmp	r0, #0
 800314e:	d1e1      	bne.n	8003114 <__ssputs_r+0x70>
 8003150:	6921      	ldr	r1, [r4, #16]
 8003152:	4650      	mov	r0, sl
 8003154:	f000 ff56 	bl	8004004 <_free_r>
 8003158:	e7c7      	b.n	80030ea <__ssputs_r+0x46>
	...

0800315c <_svfiprintf_r>:
 800315c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003160:	4698      	mov	r8, r3
 8003162:	898b      	ldrh	r3, [r1, #12]
 8003164:	061b      	lsls	r3, r3, #24
 8003166:	b09d      	sub	sp, #116	; 0x74
 8003168:	4607      	mov	r7, r0
 800316a:	460d      	mov	r5, r1
 800316c:	4614      	mov	r4, r2
 800316e:	d50e      	bpl.n	800318e <_svfiprintf_r+0x32>
 8003170:	690b      	ldr	r3, [r1, #16]
 8003172:	b963      	cbnz	r3, 800318e <_svfiprintf_r+0x32>
 8003174:	2140      	movs	r1, #64	; 0x40
 8003176:	f000 ff95 	bl	80040a4 <_malloc_r>
 800317a:	6028      	str	r0, [r5, #0]
 800317c:	6128      	str	r0, [r5, #16]
 800317e:	b920      	cbnz	r0, 800318a <_svfiprintf_r+0x2e>
 8003180:	230c      	movs	r3, #12
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	e0d1      	b.n	800332e <_svfiprintf_r+0x1d2>
 800318a:	2340      	movs	r3, #64	; 0x40
 800318c:	616b      	str	r3, [r5, #20]
 800318e:	2300      	movs	r3, #0
 8003190:	9309      	str	r3, [sp, #36]	; 0x24
 8003192:	2320      	movs	r3, #32
 8003194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003198:	f8cd 800c 	str.w	r8, [sp, #12]
 800319c:	2330      	movs	r3, #48	; 0x30
 800319e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003348 <_svfiprintf_r+0x1ec>
 80031a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031a6:	f04f 0901 	mov.w	r9, #1
 80031aa:	4623      	mov	r3, r4
 80031ac:	469a      	mov	sl, r3
 80031ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031b2:	b10a      	cbz	r2, 80031b8 <_svfiprintf_r+0x5c>
 80031b4:	2a25      	cmp	r2, #37	; 0x25
 80031b6:	d1f9      	bne.n	80031ac <_svfiprintf_r+0x50>
 80031b8:	ebba 0b04 	subs.w	fp, sl, r4
 80031bc:	d00b      	beq.n	80031d6 <_svfiprintf_r+0x7a>
 80031be:	465b      	mov	r3, fp
 80031c0:	4622      	mov	r2, r4
 80031c2:	4629      	mov	r1, r5
 80031c4:	4638      	mov	r0, r7
 80031c6:	f7ff ff6d 	bl	80030a4 <__ssputs_r>
 80031ca:	3001      	adds	r0, #1
 80031cc:	f000 80aa 	beq.w	8003324 <_svfiprintf_r+0x1c8>
 80031d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031d2:	445a      	add	r2, fp
 80031d4:	9209      	str	r2, [sp, #36]	; 0x24
 80031d6:	f89a 3000 	ldrb.w	r3, [sl]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80a2 	beq.w	8003324 <_svfiprintf_r+0x1c8>
 80031e0:	2300      	movs	r3, #0
 80031e2:	f04f 32ff 	mov.w	r2, #4294967295
 80031e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031ea:	f10a 0a01 	add.w	sl, sl, #1
 80031ee:	9304      	str	r3, [sp, #16]
 80031f0:	9307      	str	r3, [sp, #28]
 80031f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031f6:	931a      	str	r3, [sp, #104]	; 0x68
 80031f8:	4654      	mov	r4, sl
 80031fa:	2205      	movs	r2, #5
 80031fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003200:	4851      	ldr	r0, [pc, #324]	; (8003348 <_svfiprintf_r+0x1ec>)
 8003202:	f7fd f80d 	bl	8000220 <memchr>
 8003206:	9a04      	ldr	r2, [sp, #16]
 8003208:	b9d8      	cbnz	r0, 8003242 <_svfiprintf_r+0xe6>
 800320a:	06d0      	lsls	r0, r2, #27
 800320c:	bf44      	itt	mi
 800320e:	2320      	movmi	r3, #32
 8003210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003214:	0711      	lsls	r1, r2, #28
 8003216:	bf44      	itt	mi
 8003218:	232b      	movmi	r3, #43	; 0x2b
 800321a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800321e:	f89a 3000 	ldrb.w	r3, [sl]
 8003222:	2b2a      	cmp	r3, #42	; 0x2a
 8003224:	d015      	beq.n	8003252 <_svfiprintf_r+0xf6>
 8003226:	9a07      	ldr	r2, [sp, #28]
 8003228:	4654      	mov	r4, sl
 800322a:	2000      	movs	r0, #0
 800322c:	f04f 0c0a 	mov.w	ip, #10
 8003230:	4621      	mov	r1, r4
 8003232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003236:	3b30      	subs	r3, #48	; 0x30
 8003238:	2b09      	cmp	r3, #9
 800323a:	d94e      	bls.n	80032da <_svfiprintf_r+0x17e>
 800323c:	b1b0      	cbz	r0, 800326c <_svfiprintf_r+0x110>
 800323e:	9207      	str	r2, [sp, #28]
 8003240:	e014      	b.n	800326c <_svfiprintf_r+0x110>
 8003242:	eba0 0308 	sub.w	r3, r0, r8
 8003246:	fa09 f303 	lsl.w	r3, r9, r3
 800324a:	4313      	orrs	r3, r2
 800324c:	9304      	str	r3, [sp, #16]
 800324e:	46a2      	mov	sl, r4
 8003250:	e7d2      	b.n	80031f8 <_svfiprintf_r+0x9c>
 8003252:	9b03      	ldr	r3, [sp, #12]
 8003254:	1d19      	adds	r1, r3, #4
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	9103      	str	r1, [sp, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	bfbb      	ittet	lt
 800325e:	425b      	neglt	r3, r3
 8003260:	f042 0202 	orrlt.w	r2, r2, #2
 8003264:	9307      	strge	r3, [sp, #28]
 8003266:	9307      	strlt	r3, [sp, #28]
 8003268:	bfb8      	it	lt
 800326a:	9204      	strlt	r2, [sp, #16]
 800326c:	7823      	ldrb	r3, [r4, #0]
 800326e:	2b2e      	cmp	r3, #46	; 0x2e
 8003270:	d10c      	bne.n	800328c <_svfiprintf_r+0x130>
 8003272:	7863      	ldrb	r3, [r4, #1]
 8003274:	2b2a      	cmp	r3, #42	; 0x2a
 8003276:	d135      	bne.n	80032e4 <_svfiprintf_r+0x188>
 8003278:	9b03      	ldr	r3, [sp, #12]
 800327a:	1d1a      	adds	r2, r3, #4
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	9203      	str	r2, [sp, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	bfb8      	it	lt
 8003284:	f04f 33ff 	movlt.w	r3, #4294967295
 8003288:	3402      	adds	r4, #2
 800328a:	9305      	str	r3, [sp, #20]
 800328c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003358 <_svfiprintf_r+0x1fc>
 8003290:	7821      	ldrb	r1, [r4, #0]
 8003292:	2203      	movs	r2, #3
 8003294:	4650      	mov	r0, sl
 8003296:	f7fc ffc3 	bl	8000220 <memchr>
 800329a:	b140      	cbz	r0, 80032ae <_svfiprintf_r+0x152>
 800329c:	2340      	movs	r3, #64	; 0x40
 800329e:	eba0 000a 	sub.w	r0, r0, sl
 80032a2:	fa03 f000 	lsl.w	r0, r3, r0
 80032a6:	9b04      	ldr	r3, [sp, #16]
 80032a8:	4303      	orrs	r3, r0
 80032aa:	3401      	adds	r4, #1
 80032ac:	9304      	str	r3, [sp, #16]
 80032ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032b2:	4826      	ldr	r0, [pc, #152]	; (800334c <_svfiprintf_r+0x1f0>)
 80032b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032b8:	2206      	movs	r2, #6
 80032ba:	f7fc ffb1 	bl	8000220 <memchr>
 80032be:	2800      	cmp	r0, #0
 80032c0:	d038      	beq.n	8003334 <_svfiprintf_r+0x1d8>
 80032c2:	4b23      	ldr	r3, [pc, #140]	; (8003350 <_svfiprintf_r+0x1f4>)
 80032c4:	bb1b      	cbnz	r3, 800330e <_svfiprintf_r+0x1b2>
 80032c6:	9b03      	ldr	r3, [sp, #12]
 80032c8:	3307      	adds	r3, #7
 80032ca:	f023 0307 	bic.w	r3, r3, #7
 80032ce:	3308      	adds	r3, #8
 80032d0:	9303      	str	r3, [sp, #12]
 80032d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032d4:	4433      	add	r3, r6
 80032d6:	9309      	str	r3, [sp, #36]	; 0x24
 80032d8:	e767      	b.n	80031aa <_svfiprintf_r+0x4e>
 80032da:	fb0c 3202 	mla	r2, ip, r2, r3
 80032de:	460c      	mov	r4, r1
 80032e0:	2001      	movs	r0, #1
 80032e2:	e7a5      	b.n	8003230 <_svfiprintf_r+0xd4>
 80032e4:	2300      	movs	r3, #0
 80032e6:	3401      	adds	r4, #1
 80032e8:	9305      	str	r3, [sp, #20]
 80032ea:	4619      	mov	r1, r3
 80032ec:	f04f 0c0a 	mov.w	ip, #10
 80032f0:	4620      	mov	r0, r4
 80032f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032f6:	3a30      	subs	r2, #48	; 0x30
 80032f8:	2a09      	cmp	r2, #9
 80032fa:	d903      	bls.n	8003304 <_svfiprintf_r+0x1a8>
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0c5      	beq.n	800328c <_svfiprintf_r+0x130>
 8003300:	9105      	str	r1, [sp, #20]
 8003302:	e7c3      	b.n	800328c <_svfiprintf_r+0x130>
 8003304:	fb0c 2101 	mla	r1, ip, r1, r2
 8003308:	4604      	mov	r4, r0
 800330a:	2301      	movs	r3, #1
 800330c:	e7f0      	b.n	80032f0 <_svfiprintf_r+0x194>
 800330e:	ab03      	add	r3, sp, #12
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	462a      	mov	r2, r5
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <_svfiprintf_r+0x1f8>)
 8003316:	a904      	add	r1, sp, #16
 8003318:	4638      	mov	r0, r7
 800331a:	f3af 8000 	nop.w
 800331e:	1c42      	adds	r2, r0, #1
 8003320:	4606      	mov	r6, r0
 8003322:	d1d6      	bne.n	80032d2 <_svfiprintf_r+0x176>
 8003324:	89ab      	ldrh	r3, [r5, #12]
 8003326:	065b      	lsls	r3, r3, #25
 8003328:	f53f af2c 	bmi.w	8003184 <_svfiprintf_r+0x28>
 800332c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800332e:	b01d      	add	sp, #116	; 0x74
 8003330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003334:	ab03      	add	r3, sp, #12
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	462a      	mov	r2, r5
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <_svfiprintf_r+0x1f8>)
 800333c:	a904      	add	r1, sp, #16
 800333e:	4638      	mov	r0, r7
 8003340:	f000 fa4c 	bl	80037dc <_printf_i>
 8003344:	e7eb      	b.n	800331e <_svfiprintf_r+0x1c2>
 8003346:	bf00      	nop
 8003348:	0800432c 	.word	0x0800432c
 800334c:	08004336 	.word	0x08004336
 8003350:	00000000 	.word	0x00000000
 8003354:	080030a5 	.word	0x080030a5
 8003358:	08004332 	.word	0x08004332

0800335c <_sungetc_r>:
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	1c4b      	adds	r3, r1, #1
 8003360:	4614      	mov	r4, r2
 8003362:	d103      	bne.n	800336c <_sungetc_r+0x10>
 8003364:	f04f 35ff 	mov.w	r5, #4294967295
 8003368:	4628      	mov	r0, r5
 800336a:	bd38      	pop	{r3, r4, r5, pc}
 800336c:	8993      	ldrh	r3, [r2, #12]
 800336e:	f023 0320 	bic.w	r3, r3, #32
 8003372:	8193      	strh	r3, [r2, #12]
 8003374:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003376:	6852      	ldr	r2, [r2, #4]
 8003378:	b2cd      	uxtb	r5, r1
 800337a:	b18b      	cbz	r3, 80033a0 <_sungetc_r+0x44>
 800337c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800337e:	4293      	cmp	r3, r2
 8003380:	dd08      	ble.n	8003394 <_sungetc_r+0x38>
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	1e5a      	subs	r2, r3, #1
 8003386:	6022      	str	r2, [r4, #0]
 8003388:	f803 5c01 	strb.w	r5, [r3, #-1]
 800338c:	6863      	ldr	r3, [r4, #4]
 800338e:	3301      	adds	r3, #1
 8003390:	6063      	str	r3, [r4, #4]
 8003392:	e7e9      	b.n	8003368 <_sungetc_r+0xc>
 8003394:	4621      	mov	r1, r4
 8003396:	f000 fdd1 	bl	8003f3c <__submore>
 800339a:	2800      	cmp	r0, #0
 800339c:	d0f1      	beq.n	8003382 <_sungetc_r+0x26>
 800339e:	e7e1      	b.n	8003364 <_sungetc_r+0x8>
 80033a0:	6921      	ldr	r1, [r4, #16]
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	b151      	cbz	r1, 80033bc <_sungetc_r+0x60>
 80033a6:	4299      	cmp	r1, r3
 80033a8:	d208      	bcs.n	80033bc <_sungetc_r+0x60>
 80033aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80033ae:	42a9      	cmp	r1, r5
 80033b0:	d104      	bne.n	80033bc <_sungetc_r+0x60>
 80033b2:	3b01      	subs	r3, #1
 80033b4:	3201      	adds	r2, #1
 80033b6:	6023      	str	r3, [r4, #0]
 80033b8:	6062      	str	r2, [r4, #4]
 80033ba:	e7d5      	b.n	8003368 <_sungetc_r+0xc>
 80033bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80033c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033c4:	6363      	str	r3, [r4, #52]	; 0x34
 80033c6:	2303      	movs	r3, #3
 80033c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80033ca:	4623      	mov	r3, r4
 80033cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80033d0:	6023      	str	r3, [r4, #0]
 80033d2:	2301      	movs	r3, #1
 80033d4:	e7dc      	b.n	8003390 <_sungetc_r+0x34>

080033d6 <__ssrefill_r>:
 80033d6:	b510      	push	{r4, lr}
 80033d8:	460c      	mov	r4, r1
 80033da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80033dc:	b169      	cbz	r1, 80033fa <__ssrefill_r+0x24>
 80033de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033e2:	4299      	cmp	r1, r3
 80033e4:	d001      	beq.n	80033ea <__ssrefill_r+0x14>
 80033e6:	f000 fe0d 	bl	8004004 <_free_r>
 80033ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033ec:	6063      	str	r3, [r4, #4]
 80033ee:	2000      	movs	r0, #0
 80033f0:	6360      	str	r0, [r4, #52]	; 0x34
 80033f2:	b113      	cbz	r3, 80033fa <__ssrefill_r+0x24>
 80033f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033f6:	6023      	str	r3, [r4, #0]
 80033f8:	bd10      	pop	{r4, pc}
 80033fa:	6923      	ldr	r3, [r4, #16]
 80033fc:	6023      	str	r3, [r4, #0]
 80033fe:	2300      	movs	r3, #0
 8003400:	6063      	str	r3, [r4, #4]
 8003402:	89a3      	ldrh	r3, [r4, #12]
 8003404:	f043 0320 	orr.w	r3, r3, #32
 8003408:	81a3      	strh	r3, [r4, #12]
 800340a:	f04f 30ff 	mov.w	r0, #4294967295
 800340e:	e7f3      	b.n	80033f8 <__ssrefill_r+0x22>

08003410 <__ssvfiscanf_r>:
 8003410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003414:	460c      	mov	r4, r1
 8003416:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800341a:	2100      	movs	r1, #0
 800341c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003420:	49b2      	ldr	r1, [pc, #712]	; (80036ec <__ssvfiscanf_r+0x2dc>)
 8003422:	91a0      	str	r1, [sp, #640]	; 0x280
 8003424:	f10d 0804 	add.w	r8, sp, #4
 8003428:	49b1      	ldr	r1, [pc, #708]	; (80036f0 <__ssvfiscanf_r+0x2e0>)
 800342a:	4fb2      	ldr	r7, [pc, #712]	; (80036f4 <__ssvfiscanf_r+0x2e4>)
 800342c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80036f8 <__ssvfiscanf_r+0x2e8>
 8003430:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003434:	4606      	mov	r6, r0
 8003436:	91a1      	str	r1, [sp, #644]	; 0x284
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	f892 a000 	ldrb.w	sl, [r2]
 800343e:	f1ba 0f00 	cmp.w	sl, #0
 8003442:	f000 8151 	beq.w	80036e8 <__ssvfiscanf_r+0x2d8>
 8003446:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800344a:	f013 0308 	ands.w	r3, r3, #8
 800344e:	f102 0501 	add.w	r5, r2, #1
 8003452:	d019      	beq.n	8003488 <__ssvfiscanf_r+0x78>
 8003454:	6863      	ldr	r3, [r4, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	dd0f      	ble.n	800347a <__ssvfiscanf_r+0x6a>
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	781a      	ldrb	r2, [r3, #0]
 800345e:	5cba      	ldrb	r2, [r7, r2]
 8003460:	0712      	lsls	r2, r2, #28
 8003462:	d401      	bmi.n	8003468 <__ssvfiscanf_r+0x58>
 8003464:	462a      	mov	r2, r5
 8003466:	e7e8      	b.n	800343a <__ssvfiscanf_r+0x2a>
 8003468:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800346a:	3201      	adds	r2, #1
 800346c:	9245      	str	r2, [sp, #276]	; 0x114
 800346e:	6862      	ldr	r2, [r4, #4]
 8003470:	3301      	adds	r3, #1
 8003472:	3a01      	subs	r2, #1
 8003474:	6062      	str	r2, [r4, #4]
 8003476:	6023      	str	r3, [r4, #0]
 8003478:	e7ec      	b.n	8003454 <__ssvfiscanf_r+0x44>
 800347a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800347c:	4621      	mov	r1, r4
 800347e:	4630      	mov	r0, r6
 8003480:	4798      	blx	r3
 8003482:	2800      	cmp	r0, #0
 8003484:	d0e9      	beq.n	800345a <__ssvfiscanf_r+0x4a>
 8003486:	e7ed      	b.n	8003464 <__ssvfiscanf_r+0x54>
 8003488:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800348c:	f040 8083 	bne.w	8003596 <__ssvfiscanf_r+0x186>
 8003490:	9341      	str	r3, [sp, #260]	; 0x104
 8003492:	9343      	str	r3, [sp, #268]	; 0x10c
 8003494:	7853      	ldrb	r3, [r2, #1]
 8003496:	2b2a      	cmp	r3, #42	; 0x2a
 8003498:	bf02      	ittt	eq
 800349a:	2310      	moveq	r3, #16
 800349c:	1c95      	addeq	r5, r2, #2
 800349e:	9341      	streq	r3, [sp, #260]	; 0x104
 80034a0:	220a      	movs	r2, #10
 80034a2:	46ab      	mov	fp, r5
 80034a4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80034a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80034ac:	2b09      	cmp	r3, #9
 80034ae:	d91d      	bls.n	80034ec <__ssvfiscanf_r+0xdc>
 80034b0:	4891      	ldr	r0, [pc, #580]	; (80036f8 <__ssvfiscanf_r+0x2e8>)
 80034b2:	2203      	movs	r2, #3
 80034b4:	f7fc feb4 	bl	8000220 <memchr>
 80034b8:	b140      	cbz	r0, 80034cc <__ssvfiscanf_r+0xbc>
 80034ba:	2301      	movs	r3, #1
 80034bc:	eba0 0009 	sub.w	r0, r0, r9
 80034c0:	fa03 f000 	lsl.w	r0, r3, r0
 80034c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80034c6:	4318      	orrs	r0, r3
 80034c8:	9041      	str	r0, [sp, #260]	; 0x104
 80034ca:	465d      	mov	r5, fp
 80034cc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80034d0:	2b78      	cmp	r3, #120	; 0x78
 80034d2:	d806      	bhi.n	80034e2 <__ssvfiscanf_r+0xd2>
 80034d4:	2b57      	cmp	r3, #87	; 0x57
 80034d6:	d810      	bhi.n	80034fa <__ssvfiscanf_r+0xea>
 80034d8:	2b25      	cmp	r3, #37	; 0x25
 80034da:	d05c      	beq.n	8003596 <__ssvfiscanf_r+0x186>
 80034dc:	d856      	bhi.n	800358c <__ssvfiscanf_r+0x17c>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d074      	beq.n	80035cc <__ssvfiscanf_r+0x1bc>
 80034e2:	2303      	movs	r3, #3
 80034e4:	9347      	str	r3, [sp, #284]	; 0x11c
 80034e6:	230a      	movs	r3, #10
 80034e8:	9342      	str	r3, [sp, #264]	; 0x108
 80034ea:	e081      	b.n	80035f0 <__ssvfiscanf_r+0x1e0>
 80034ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80034ee:	fb02 1303 	mla	r3, r2, r3, r1
 80034f2:	3b30      	subs	r3, #48	; 0x30
 80034f4:	9343      	str	r3, [sp, #268]	; 0x10c
 80034f6:	465d      	mov	r5, fp
 80034f8:	e7d3      	b.n	80034a2 <__ssvfiscanf_r+0x92>
 80034fa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80034fe:	2a20      	cmp	r2, #32
 8003500:	d8ef      	bhi.n	80034e2 <__ssvfiscanf_r+0xd2>
 8003502:	a101      	add	r1, pc, #4	; (adr r1, 8003508 <__ssvfiscanf_r+0xf8>)
 8003504:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003508:	080035db 	.word	0x080035db
 800350c:	080034e3 	.word	0x080034e3
 8003510:	080034e3 	.word	0x080034e3
 8003514:	08003639 	.word	0x08003639
 8003518:	080034e3 	.word	0x080034e3
 800351c:	080034e3 	.word	0x080034e3
 8003520:	080034e3 	.word	0x080034e3
 8003524:	080034e3 	.word	0x080034e3
 8003528:	080034e3 	.word	0x080034e3
 800352c:	080034e3 	.word	0x080034e3
 8003530:	080034e3 	.word	0x080034e3
 8003534:	0800364f 	.word	0x0800364f
 8003538:	08003625 	.word	0x08003625
 800353c:	08003593 	.word	0x08003593
 8003540:	08003593 	.word	0x08003593
 8003544:	08003593 	.word	0x08003593
 8003548:	080034e3 	.word	0x080034e3
 800354c:	08003629 	.word	0x08003629
 8003550:	080034e3 	.word	0x080034e3
 8003554:	080034e3 	.word	0x080034e3
 8003558:	080034e3 	.word	0x080034e3
 800355c:	080034e3 	.word	0x080034e3
 8003560:	0800365f 	.word	0x0800365f
 8003564:	08003631 	.word	0x08003631
 8003568:	080035d3 	.word	0x080035d3
 800356c:	080034e3 	.word	0x080034e3
 8003570:	080034e3 	.word	0x080034e3
 8003574:	0800365b 	.word	0x0800365b
 8003578:	080034e3 	.word	0x080034e3
 800357c:	08003625 	.word	0x08003625
 8003580:	080034e3 	.word	0x080034e3
 8003584:	080034e3 	.word	0x080034e3
 8003588:	080035db 	.word	0x080035db
 800358c:	3b45      	subs	r3, #69	; 0x45
 800358e:	2b02      	cmp	r3, #2
 8003590:	d8a7      	bhi.n	80034e2 <__ssvfiscanf_r+0xd2>
 8003592:	2305      	movs	r3, #5
 8003594:	e02b      	b.n	80035ee <__ssvfiscanf_r+0x1de>
 8003596:	6863      	ldr	r3, [r4, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	dd0d      	ble.n	80035b8 <__ssvfiscanf_r+0x1a8>
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	781a      	ldrb	r2, [r3, #0]
 80035a0:	4552      	cmp	r2, sl
 80035a2:	f040 80a1 	bne.w	80036e8 <__ssvfiscanf_r+0x2d8>
 80035a6:	3301      	adds	r3, #1
 80035a8:	6862      	ldr	r2, [r4, #4]
 80035aa:	6023      	str	r3, [r4, #0]
 80035ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80035ae:	3a01      	subs	r2, #1
 80035b0:	3301      	adds	r3, #1
 80035b2:	6062      	str	r2, [r4, #4]
 80035b4:	9345      	str	r3, [sp, #276]	; 0x114
 80035b6:	e755      	b.n	8003464 <__ssvfiscanf_r+0x54>
 80035b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80035ba:	4621      	mov	r1, r4
 80035bc:	4630      	mov	r0, r6
 80035be:	4798      	blx	r3
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d0eb      	beq.n	800359c <__ssvfiscanf_r+0x18c>
 80035c4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80035c6:	2800      	cmp	r0, #0
 80035c8:	f040 8084 	bne.w	80036d4 <__ssvfiscanf_r+0x2c4>
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	e086      	b.n	80036e0 <__ssvfiscanf_r+0x2d0>
 80035d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80035d4:	f042 0220 	orr.w	r2, r2, #32
 80035d8:	9241      	str	r2, [sp, #260]	; 0x104
 80035da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80035dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e0:	9241      	str	r2, [sp, #260]	; 0x104
 80035e2:	2210      	movs	r2, #16
 80035e4:	2b6f      	cmp	r3, #111	; 0x6f
 80035e6:	9242      	str	r2, [sp, #264]	; 0x108
 80035e8:	bf34      	ite	cc
 80035ea:	2303      	movcc	r3, #3
 80035ec:	2304      	movcs	r3, #4
 80035ee:	9347      	str	r3, [sp, #284]	; 0x11c
 80035f0:	6863      	ldr	r3, [r4, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	dd41      	ble.n	800367a <__ssvfiscanf_r+0x26a>
 80035f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80035f8:	0659      	lsls	r1, r3, #25
 80035fa:	d404      	bmi.n	8003606 <__ssvfiscanf_r+0x1f6>
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	781a      	ldrb	r2, [r3, #0]
 8003600:	5cba      	ldrb	r2, [r7, r2]
 8003602:	0712      	lsls	r2, r2, #28
 8003604:	d440      	bmi.n	8003688 <__ssvfiscanf_r+0x278>
 8003606:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003608:	2b02      	cmp	r3, #2
 800360a:	dc4f      	bgt.n	80036ac <__ssvfiscanf_r+0x29c>
 800360c:	466b      	mov	r3, sp
 800360e:	4622      	mov	r2, r4
 8003610:	a941      	add	r1, sp, #260	; 0x104
 8003612:	4630      	mov	r0, r6
 8003614:	f000 fa08 	bl	8003a28 <_scanf_chars>
 8003618:	2801      	cmp	r0, #1
 800361a:	d065      	beq.n	80036e8 <__ssvfiscanf_r+0x2d8>
 800361c:	2802      	cmp	r0, #2
 800361e:	f47f af21 	bne.w	8003464 <__ssvfiscanf_r+0x54>
 8003622:	e7cf      	b.n	80035c4 <__ssvfiscanf_r+0x1b4>
 8003624:	220a      	movs	r2, #10
 8003626:	e7dd      	b.n	80035e4 <__ssvfiscanf_r+0x1d4>
 8003628:	2300      	movs	r3, #0
 800362a:	9342      	str	r3, [sp, #264]	; 0x108
 800362c:	2303      	movs	r3, #3
 800362e:	e7de      	b.n	80035ee <__ssvfiscanf_r+0x1de>
 8003630:	2308      	movs	r3, #8
 8003632:	9342      	str	r3, [sp, #264]	; 0x108
 8003634:	2304      	movs	r3, #4
 8003636:	e7da      	b.n	80035ee <__ssvfiscanf_r+0x1de>
 8003638:	4629      	mov	r1, r5
 800363a:	4640      	mov	r0, r8
 800363c:	f000 fb40 	bl	8003cc0 <__sccl>
 8003640:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003646:	9341      	str	r3, [sp, #260]	; 0x104
 8003648:	4605      	mov	r5, r0
 800364a:	2301      	movs	r3, #1
 800364c:	e7cf      	b.n	80035ee <__ssvfiscanf_r+0x1de>
 800364e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003654:	9341      	str	r3, [sp, #260]	; 0x104
 8003656:	2300      	movs	r3, #0
 8003658:	e7c9      	b.n	80035ee <__ssvfiscanf_r+0x1de>
 800365a:	2302      	movs	r3, #2
 800365c:	e7c7      	b.n	80035ee <__ssvfiscanf_r+0x1de>
 800365e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003660:	06c3      	lsls	r3, r0, #27
 8003662:	f53f aeff 	bmi.w	8003464 <__ssvfiscanf_r+0x54>
 8003666:	9b00      	ldr	r3, [sp, #0]
 8003668:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800366a:	1d19      	adds	r1, r3, #4
 800366c:	9100      	str	r1, [sp, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	07c0      	lsls	r0, r0, #31
 8003672:	bf4c      	ite	mi
 8003674:	801a      	strhmi	r2, [r3, #0]
 8003676:	601a      	strpl	r2, [r3, #0]
 8003678:	e6f4      	b.n	8003464 <__ssvfiscanf_r+0x54>
 800367a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800367c:	4621      	mov	r1, r4
 800367e:	4630      	mov	r0, r6
 8003680:	4798      	blx	r3
 8003682:	2800      	cmp	r0, #0
 8003684:	d0b7      	beq.n	80035f6 <__ssvfiscanf_r+0x1e6>
 8003686:	e79d      	b.n	80035c4 <__ssvfiscanf_r+0x1b4>
 8003688:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800368a:	3201      	adds	r2, #1
 800368c:	9245      	str	r2, [sp, #276]	; 0x114
 800368e:	6862      	ldr	r2, [r4, #4]
 8003690:	3a01      	subs	r2, #1
 8003692:	2a00      	cmp	r2, #0
 8003694:	6062      	str	r2, [r4, #4]
 8003696:	dd02      	ble.n	800369e <__ssvfiscanf_r+0x28e>
 8003698:	3301      	adds	r3, #1
 800369a:	6023      	str	r3, [r4, #0]
 800369c:	e7ae      	b.n	80035fc <__ssvfiscanf_r+0x1ec>
 800369e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80036a0:	4621      	mov	r1, r4
 80036a2:	4630      	mov	r0, r6
 80036a4:	4798      	blx	r3
 80036a6:	2800      	cmp	r0, #0
 80036a8:	d0a8      	beq.n	80035fc <__ssvfiscanf_r+0x1ec>
 80036aa:	e78b      	b.n	80035c4 <__ssvfiscanf_r+0x1b4>
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	dc06      	bgt.n	80036be <__ssvfiscanf_r+0x2ae>
 80036b0:	466b      	mov	r3, sp
 80036b2:	4622      	mov	r2, r4
 80036b4:	a941      	add	r1, sp, #260	; 0x104
 80036b6:	4630      	mov	r0, r6
 80036b8:	f000 fa0e 	bl	8003ad8 <_scanf_i>
 80036bc:	e7ac      	b.n	8003618 <__ssvfiscanf_r+0x208>
 80036be:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <__ssvfiscanf_r+0x2ec>)
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f43f aecf 	beq.w	8003464 <__ssvfiscanf_r+0x54>
 80036c6:	466b      	mov	r3, sp
 80036c8:	4622      	mov	r2, r4
 80036ca:	a941      	add	r1, sp, #260	; 0x104
 80036cc:	4630      	mov	r0, r6
 80036ce:	f3af 8000 	nop.w
 80036d2:	e7a1      	b.n	8003618 <__ssvfiscanf_r+0x208>
 80036d4:	89a3      	ldrh	r3, [r4, #12]
 80036d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80036da:	bf18      	it	ne
 80036dc:	f04f 30ff 	movne.w	r0, #4294967295
 80036e0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80036e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80036ea:	e7f9      	b.n	80036e0 <__ssvfiscanf_r+0x2d0>
 80036ec:	0800335d 	.word	0x0800335d
 80036f0:	080033d7 	.word	0x080033d7
 80036f4:	0800437b 	.word	0x0800437b
 80036f8:	08004332 	.word	0x08004332
 80036fc:	00000000 	.word	0x00000000

08003700 <_printf_common>:
 8003700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003704:	4616      	mov	r6, r2
 8003706:	4699      	mov	r9, r3
 8003708:	688a      	ldr	r2, [r1, #8]
 800370a:	690b      	ldr	r3, [r1, #16]
 800370c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003710:	4293      	cmp	r3, r2
 8003712:	bfb8      	it	lt
 8003714:	4613      	movlt	r3, r2
 8003716:	6033      	str	r3, [r6, #0]
 8003718:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800371c:	4607      	mov	r7, r0
 800371e:	460c      	mov	r4, r1
 8003720:	b10a      	cbz	r2, 8003726 <_printf_common+0x26>
 8003722:	3301      	adds	r3, #1
 8003724:	6033      	str	r3, [r6, #0]
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	0699      	lsls	r1, r3, #26
 800372a:	bf42      	ittt	mi
 800372c:	6833      	ldrmi	r3, [r6, #0]
 800372e:	3302      	addmi	r3, #2
 8003730:	6033      	strmi	r3, [r6, #0]
 8003732:	6825      	ldr	r5, [r4, #0]
 8003734:	f015 0506 	ands.w	r5, r5, #6
 8003738:	d106      	bne.n	8003748 <_printf_common+0x48>
 800373a:	f104 0a19 	add.w	sl, r4, #25
 800373e:	68e3      	ldr	r3, [r4, #12]
 8003740:	6832      	ldr	r2, [r6, #0]
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	42ab      	cmp	r3, r5
 8003746:	dc26      	bgt.n	8003796 <_printf_common+0x96>
 8003748:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800374c:	1e13      	subs	r3, r2, #0
 800374e:	6822      	ldr	r2, [r4, #0]
 8003750:	bf18      	it	ne
 8003752:	2301      	movne	r3, #1
 8003754:	0692      	lsls	r2, r2, #26
 8003756:	d42b      	bmi.n	80037b0 <_printf_common+0xb0>
 8003758:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800375c:	4649      	mov	r1, r9
 800375e:	4638      	mov	r0, r7
 8003760:	47c0      	blx	r8
 8003762:	3001      	adds	r0, #1
 8003764:	d01e      	beq.n	80037a4 <_printf_common+0xa4>
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	68e5      	ldr	r5, [r4, #12]
 800376a:	6832      	ldr	r2, [r6, #0]
 800376c:	f003 0306 	and.w	r3, r3, #6
 8003770:	2b04      	cmp	r3, #4
 8003772:	bf08      	it	eq
 8003774:	1aad      	subeq	r5, r5, r2
 8003776:	68a3      	ldr	r3, [r4, #8]
 8003778:	6922      	ldr	r2, [r4, #16]
 800377a:	bf0c      	ite	eq
 800377c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003780:	2500      	movne	r5, #0
 8003782:	4293      	cmp	r3, r2
 8003784:	bfc4      	itt	gt
 8003786:	1a9b      	subgt	r3, r3, r2
 8003788:	18ed      	addgt	r5, r5, r3
 800378a:	2600      	movs	r6, #0
 800378c:	341a      	adds	r4, #26
 800378e:	42b5      	cmp	r5, r6
 8003790:	d11a      	bne.n	80037c8 <_printf_common+0xc8>
 8003792:	2000      	movs	r0, #0
 8003794:	e008      	b.n	80037a8 <_printf_common+0xa8>
 8003796:	2301      	movs	r3, #1
 8003798:	4652      	mov	r2, sl
 800379a:	4649      	mov	r1, r9
 800379c:	4638      	mov	r0, r7
 800379e:	47c0      	blx	r8
 80037a0:	3001      	adds	r0, #1
 80037a2:	d103      	bne.n	80037ac <_printf_common+0xac>
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ac:	3501      	adds	r5, #1
 80037ae:	e7c6      	b.n	800373e <_printf_common+0x3e>
 80037b0:	18e1      	adds	r1, r4, r3
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	2030      	movs	r0, #48	; 0x30
 80037b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037ba:	4422      	add	r2, r4
 80037bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037c4:	3302      	adds	r3, #2
 80037c6:	e7c7      	b.n	8003758 <_printf_common+0x58>
 80037c8:	2301      	movs	r3, #1
 80037ca:	4622      	mov	r2, r4
 80037cc:	4649      	mov	r1, r9
 80037ce:	4638      	mov	r0, r7
 80037d0:	47c0      	blx	r8
 80037d2:	3001      	adds	r0, #1
 80037d4:	d0e6      	beq.n	80037a4 <_printf_common+0xa4>
 80037d6:	3601      	adds	r6, #1
 80037d8:	e7d9      	b.n	800378e <_printf_common+0x8e>
	...

080037dc <_printf_i>:
 80037dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037e0:	460c      	mov	r4, r1
 80037e2:	4691      	mov	r9, r2
 80037e4:	7e27      	ldrb	r7, [r4, #24]
 80037e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80037e8:	2f78      	cmp	r7, #120	; 0x78
 80037ea:	4680      	mov	r8, r0
 80037ec:	469a      	mov	sl, r3
 80037ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037f2:	d807      	bhi.n	8003804 <_printf_i+0x28>
 80037f4:	2f62      	cmp	r7, #98	; 0x62
 80037f6:	d80a      	bhi.n	800380e <_printf_i+0x32>
 80037f8:	2f00      	cmp	r7, #0
 80037fa:	f000 80d8 	beq.w	80039ae <_printf_i+0x1d2>
 80037fe:	2f58      	cmp	r7, #88	; 0x58
 8003800:	f000 80a3 	beq.w	800394a <_printf_i+0x16e>
 8003804:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003808:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800380c:	e03a      	b.n	8003884 <_printf_i+0xa8>
 800380e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003812:	2b15      	cmp	r3, #21
 8003814:	d8f6      	bhi.n	8003804 <_printf_i+0x28>
 8003816:	a001      	add	r0, pc, #4	; (adr r0, 800381c <_printf_i+0x40>)
 8003818:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800381c:	08003875 	.word	0x08003875
 8003820:	08003889 	.word	0x08003889
 8003824:	08003805 	.word	0x08003805
 8003828:	08003805 	.word	0x08003805
 800382c:	08003805 	.word	0x08003805
 8003830:	08003805 	.word	0x08003805
 8003834:	08003889 	.word	0x08003889
 8003838:	08003805 	.word	0x08003805
 800383c:	08003805 	.word	0x08003805
 8003840:	08003805 	.word	0x08003805
 8003844:	08003805 	.word	0x08003805
 8003848:	08003995 	.word	0x08003995
 800384c:	080038b9 	.word	0x080038b9
 8003850:	08003977 	.word	0x08003977
 8003854:	08003805 	.word	0x08003805
 8003858:	08003805 	.word	0x08003805
 800385c:	080039b7 	.word	0x080039b7
 8003860:	08003805 	.word	0x08003805
 8003864:	080038b9 	.word	0x080038b9
 8003868:	08003805 	.word	0x08003805
 800386c:	08003805 	.word	0x08003805
 8003870:	0800397f 	.word	0x0800397f
 8003874:	680b      	ldr	r3, [r1, #0]
 8003876:	1d1a      	adds	r2, r3, #4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	600a      	str	r2, [r1, #0]
 800387c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003884:	2301      	movs	r3, #1
 8003886:	e0a3      	b.n	80039d0 <_printf_i+0x1f4>
 8003888:	6825      	ldr	r5, [r4, #0]
 800388a:	6808      	ldr	r0, [r1, #0]
 800388c:	062e      	lsls	r6, r5, #24
 800388e:	f100 0304 	add.w	r3, r0, #4
 8003892:	d50a      	bpl.n	80038aa <_printf_i+0xce>
 8003894:	6805      	ldr	r5, [r0, #0]
 8003896:	600b      	str	r3, [r1, #0]
 8003898:	2d00      	cmp	r5, #0
 800389a:	da03      	bge.n	80038a4 <_printf_i+0xc8>
 800389c:	232d      	movs	r3, #45	; 0x2d
 800389e:	426d      	negs	r5, r5
 80038a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038a4:	485e      	ldr	r0, [pc, #376]	; (8003a20 <_printf_i+0x244>)
 80038a6:	230a      	movs	r3, #10
 80038a8:	e019      	b.n	80038de <_printf_i+0x102>
 80038aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80038ae:	6805      	ldr	r5, [r0, #0]
 80038b0:	600b      	str	r3, [r1, #0]
 80038b2:	bf18      	it	ne
 80038b4:	b22d      	sxthne	r5, r5
 80038b6:	e7ef      	b.n	8003898 <_printf_i+0xbc>
 80038b8:	680b      	ldr	r3, [r1, #0]
 80038ba:	6825      	ldr	r5, [r4, #0]
 80038bc:	1d18      	adds	r0, r3, #4
 80038be:	6008      	str	r0, [r1, #0]
 80038c0:	0628      	lsls	r0, r5, #24
 80038c2:	d501      	bpl.n	80038c8 <_printf_i+0xec>
 80038c4:	681d      	ldr	r5, [r3, #0]
 80038c6:	e002      	b.n	80038ce <_printf_i+0xf2>
 80038c8:	0669      	lsls	r1, r5, #25
 80038ca:	d5fb      	bpl.n	80038c4 <_printf_i+0xe8>
 80038cc:	881d      	ldrh	r5, [r3, #0]
 80038ce:	4854      	ldr	r0, [pc, #336]	; (8003a20 <_printf_i+0x244>)
 80038d0:	2f6f      	cmp	r7, #111	; 0x6f
 80038d2:	bf0c      	ite	eq
 80038d4:	2308      	moveq	r3, #8
 80038d6:	230a      	movne	r3, #10
 80038d8:	2100      	movs	r1, #0
 80038da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038de:	6866      	ldr	r6, [r4, #4]
 80038e0:	60a6      	str	r6, [r4, #8]
 80038e2:	2e00      	cmp	r6, #0
 80038e4:	bfa2      	ittt	ge
 80038e6:	6821      	ldrge	r1, [r4, #0]
 80038e8:	f021 0104 	bicge.w	r1, r1, #4
 80038ec:	6021      	strge	r1, [r4, #0]
 80038ee:	b90d      	cbnz	r5, 80038f4 <_printf_i+0x118>
 80038f0:	2e00      	cmp	r6, #0
 80038f2:	d04d      	beq.n	8003990 <_printf_i+0x1b4>
 80038f4:	4616      	mov	r6, r2
 80038f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80038fa:	fb03 5711 	mls	r7, r3, r1, r5
 80038fe:	5dc7      	ldrb	r7, [r0, r7]
 8003900:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003904:	462f      	mov	r7, r5
 8003906:	42bb      	cmp	r3, r7
 8003908:	460d      	mov	r5, r1
 800390a:	d9f4      	bls.n	80038f6 <_printf_i+0x11a>
 800390c:	2b08      	cmp	r3, #8
 800390e:	d10b      	bne.n	8003928 <_printf_i+0x14c>
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	07df      	lsls	r7, r3, #31
 8003914:	d508      	bpl.n	8003928 <_printf_i+0x14c>
 8003916:	6923      	ldr	r3, [r4, #16]
 8003918:	6861      	ldr	r1, [r4, #4]
 800391a:	4299      	cmp	r1, r3
 800391c:	bfde      	ittt	le
 800391e:	2330      	movle	r3, #48	; 0x30
 8003920:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003924:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003928:	1b92      	subs	r2, r2, r6
 800392a:	6122      	str	r2, [r4, #16]
 800392c:	f8cd a000 	str.w	sl, [sp]
 8003930:	464b      	mov	r3, r9
 8003932:	aa03      	add	r2, sp, #12
 8003934:	4621      	mov	r1, r4
 8003936:	4640      	mov	r0, r8
 8003938:	f7ff fee2 	bl	8003700 <_printf_common>
 800393c:	3001      	adds	r0, #1
 800393e:	d14c      	bne.n	80039da <_printf_i+0x1fe>
 8003940:	f04f 30ff 	mov.w	r0, #4294967295
 8003944:	b004      	add	sp, #16
 8003946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800394a:	4835      	ldr	r0, [pc, #212]	; (8003a20 <_printf_i+0x244>)
 800394c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	680e      	ldr	r6, [r1, #0]
 8003954:	061f      	lsls	r7, r3, #24
 8003956:	f856 5b04 	ldr.w	r5, [r6], #4
 800395a:	600e      	str	r6, [r1, #0]
 800395c:	d514      	bpl.n	8003988 <_printf_i+0x1ac>
 800395e:	07d9      	lsls	r1, r3, #31
 8003960:	bf44      	itt	mi
 8003962:	f043 0320 	orrmi.w	r3, r3, #32
 8003966:	6023      	strmi	r3, [r4, #0]
 8003968:	b91d      	cbnz	r5, 8003972 <_printf_i+0x196>
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	f023 0320 	bic.w	r3, r3, #32
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	2310      	movs	r3, #16
 8003974:	e7b0      	b.n	80038d8 <_printf_i+0xfc>
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	f043 0320 	orr.w	r3, r3, #32
 800397c:	6023      	str	r3, [r4, #0]
 800397e:	2378      	movs	r3, #120	; 0x78
 8003980:	4828      	ldr	r0, [pc, #160]	; (8003a24 <_printf_i+0x248>)
 8003982:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003986:	e7e3      	b.n	8003950 <_printf_i+0x174>
 8003988:	065e      	lsls	r6, r3, #25
 800398a:	bf48      	it	mi
 800398c:	b2ad      	uxthmi	r5, r5
 800398e:	e7e6      	b.n	800395e <_printf_i+0x182>
 8003990:	4616      	mov	r6, r2
 8003992:	e7bb      	b.n	800390c <_printf_i+0x130>
 8003994:	680b      	ldr	r3, [r1, #0]
 8003996:	6826      	ldr	r6, [r4, #0]
 8003998:	6960      	ldr	r0, [r4, #20]
 800399a:	1d1d      	adds	r5, r3, #4
 800399c:	600d      	str	r5, [r1, #0]
 800399e:	0635      	lsls	r5, r6, #24
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	d501      	bpl.n	80039a8 <_printf_i+0x1cc>
 80039a4:	6018      	str	r0, [r3, #0]
 80039a6:	e002      	b.n	80039ae <_printf_i+0x1d2>
 80039a8:	0671      	lsls	r1, r6, #25
 80039aa:	d5fb      	bpl.n	80039a4 <_printf_i+0x1c8>
 80039ac:	8018      	strh	r0, [r3, #0]
 80039ae:	2300      	movs	r3, #0
 80039b0:	6123      	str	r3, [r4, #16]
 80039b2:	4616      	mov	r6, r2
 80039b4:	e7ba      	b.n	800392c <_printf_i+0x150>
 80039b6:	680b      	ldr	r3, [r1, #0]
 80039b8:	1d1a      	adds	r2, r3, #4
 80039ba:	600a      	str	r2, [r1, #0]
 80039bc:	681e      	ldr	r6, [r3, #0]
 80039be:	6862      	ldr	r2, [r4, #4]
 80039c0:	2100      	movs	r1, #0
 80039c2:	4630      	mov	r0, r6
 80039c4:	f7fc fc2c 	bl	8000220 <memchr>
 80039c8:	b108      	cbz	r0, 80039ce <_printf_i+0x1f2>
 80039ca:	1b80      	subs	r0, r0, r6
 80039cc:	6060      	str	r0, [r4, #4]
 80039ce:	6863      	ldr	r3, [r4, #4]
 80039d0:	6123      	str	r3, [r4, #16]
 80039d2:	2300      	movs	r3, #0
 80039d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d8:	e7a8      	b.n	800392c <_printf_i+0x150>
 80039da:	6923      	ldr	r3, [r4, #16]
 80039dc:	4632      	mov	r2, r6
 80039de:	4649      	mov	r1, r9
 80039e0:	4640      	mov	r0, r8
 80039e2:	47d0      	blx	sl
 80039e4:	3001      	adds	r0, #1
 80039e6:	d0ab      	beq.n	8003940 <_printf_i+0x164>
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	079b      	lsls	r3, r3, #30
 80039ec:	d413      	bmi.n	8003a16 <_printf_i+0x23a>
 80039ee:	68e0      	ldr	r0, [r4, #12]
 80039f0:	9b03      	ldr	r3, [sp, #12]
 80039f2:	4298      	cmp	r0, r3
 80039f4:	bfb8      	it	lt
 80039f6:	4618      	movlt	r0, r3
 80039f8:	e7a4      	b.n	8003944 <_printf_i+0x168>
 80039fa:	2301      	movs	r3, #1
 80039fc:	4632      	mov	r2, r6
 80039fe:	4649      	mov	r1, r9
 8003a00:	4640      	mov	r0, r8
 8003a02:	47d0      	blx	sl
 8003a04:	3001      	adds	r0, #1
 8003a06:	d09b      	beq.n	8003940 <_printf_i+0x164>
 8003a08:	3501      	adds	r5, #1
 8003a0a:	68e3      	ldr	r3, [r4, #12]
 8003a0c:	9903      	ldr	r1, [sp, #12]
 8003a0e:	1a5b      	subs	r3, r3, r1
 8003a10:	42ab      	cmp	r3, r5
 8003a12:	dcf2      	bgt.n	80039fa <_printf_i+0x21e>
 8003a14:	e7eb      	b.n	80039ee <_printf_i+0x212>
 8003a16:	2500      	movs	r5, #0
 8003a18:	f104 0619 	add.w	r6, r4, #25
 8003a1c:	e7f5      	b.n	8003a0a <_printf_i+0x22e>
 8003a1e:	bf00      	nop
 8003a20:	0800433d 	.word	0x0800433d
 8003a24:	0800434e 	.word	0x0800434e

08003a28 <_scanf_chars>:
 8003a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a2c:	4615      	mov	r5, r2
 8003a2e:	688a      	ldr	r2, [r1, #8]
 8003a30:	4680      	mov	r8, r0
 8003a32:	460c      	mov	r4, r1
 8003a34:	b932      	cbnz	r2, 8003a44 <_scanf_chars+0x1c>
 8003a36:	698a      	ldr	r2, [r1, #24]
 8003a38:	2a00      	cmp	r2, #0
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2201      	moveq	r2, #1
 8003a3e:	f04f 32ff 	movne.w	r2, #4294967295
 8003a42:	608a      	str	r2, [r1, #8]
 8003a44:	6822      	ldr	r2, [r4, #0]
 8003a46:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8003ad4 <_scanf_chars+0xac>
 8003a4a:	06d1      	lsls	r1, r2, #27
 8003a4c:	bf5f      	itttt	pl
 8003a4e:	681a      	ldrpl	r2, [r3, #0]
 8003a50:	1d11      	addpl	r1, r2, #4
 8003a52:	6019      	strpl	r1, [r3, #0]
 8003a54:	6816      	ldrpl	r6, [r2, #0]
 8003a56:	2700      	movs	r7, #0
 8003a58:	69a0      	ldr	r0, [r4, #24]
 8003a5a:	b188      	cbz	r0, 8003a80 <_scanf_chars+0x58>
 8003a5c:	2801      	cmp	r0, #1
 8003a5e:	d107      	bne.n	8003a70 <_scanf_chars+0x48>
 8003a60:	682b      	ldr	r3, [r5, #0]
 8003a62:	781a      	ldrb	r2, [r3, #0]
 8003a64:	6963      	ldr	r3, [r4, #20]
 8003a66:	5c9b      	ldrb	r3, [r3, r2]
 8003a68:	b953      	cbnz	r3, 8003a80 <_scanf_chars+0x58>
 8003a6a:	bb27      	cbnz	r7, 8003ab6 <_scanf_chars+0x8e>
 8003a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a70:	2802      	cmp	r0, #2
 8003a72:	d120      	bne.n	8003ab6 <_scanf_chars+0x8e>
 8003a74:	682b      	ldr	r3, [r5, #0]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003a7c:	071b      	lsls	r3, r3, #28
 8003a7e:	d41a      	bmi.n	8003ab6 <_scanf_chars+0x8e>
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	06da      	lsls	r2, r3, #27
 8003a84:	bf5e      	ittt	pl
 8003a86:	682b      	ldrpl	r3, [r5, #0]
 8003a88:	781b      	ldrbpl	r3, [r3, #0]
 8003a8a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003a8e:	682a      	ldr	r2, [r5, #0]
 8003a90:	686b      	ldr	r3, [r5, #4]
 8003a92:	3201      	adds	r2, #1
 8003a94:	602a      	str	r2, [r5, #0]
 8003a96:	68a2      	ldr	r2, [r4, #8]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	3a01      	subs	r2, #1
 8003a9c:	606b      	str	r3, [r5, #4]
 8003a9e:	3701      	adds	r7, #1
 8003aa0:	60a2      	str	r2, [r4, #8]
 8003aa2:	b142      	cbz	r2, 8003ab6 <_scanf_chars+0x8e>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	dcd7      	bgt.n	8003a58 <_scanf_chars+0x30>
 8003aa8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003aac:	4629      	mov	r1, r5
 8003aae:	4640      	mov	r0, r8
 8003ab0:	4798      	blx	r3
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	d0d0      	beq.n	8003a58 <_scanf_chars+0x30>
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	f013 0310 	ands.w	r3, r3, #16
 8003abc:	d105      	bne.n	8003aca <_scanf_chars+0xa2>
 8003abe:	68e2      	ldr	r2, [r4, #12]
 8003ac0:	3201      	adds	r2, #1
 8003ac2:	60e2      	str	r2, [r4, #12]
 8003ac4:	69a2      	ldr	r2, [r4, #24]
 8003ac6:	b102      	cbz	r2, 8003aca <_scanf_chars+0xa2>
 8003ac8:	7033      	strb	r3, [r6, #0]
 8003aca:	6923      	ldr	r3, [r4, #16]
 8003acc:	441f      	add	r7, r3
 8003ace:	6127      	str	r7, [r4, #16]
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	e7cb      	b.n	8003a6c <_scanf_chars+0x44>
 8003ad4:	0800437b 	.word	0x0800437b

08003ad8 <_scanf_i>:
 8003ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003adc:	4698      	mov	r8, r3
 8003ade:	4b74      	ldr	r3, [pc, #464]	; (8003cb0 <_scanf_i+0x1d8>)
 8003ae0:	460c      	mov	r4, r1
 8003ae2:	4682      	mov	sl, r0
 8003ae4:	4616      	mov	r6, r2
 8003ae6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003aea:	b087      	sub	sp, #28
 8003aec:	ab03      	add	r3, sp, #12
 8003aee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003af2:	4b70      	ldr	r3, [pc, #448]	; (8003cb4 <_scanf_i+0x1dc>)
 8003af4:	69a1      	ldr	r1, [r4, #24]
 8003af6:	4a70      	ldr	r2, [pc, #448]	; (8003cb8 <_scanf_i+0x1e0>)
 8003af8:	2903      	cmp	r1, #3
 8003afa:	bf18      	it	ne
 8003afc:	461a      	movne	r2, r3
 8003afe:	68a3      	ldr	r3, [r4, #8]
 8003b00:	9201      	str	r2, [sp, #4]
 8003b02:	1e5a      	subs	r2, r3, #1
 8003b04:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003b08:	bf88      	it	hi
 8003b0a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003b0e:	4627      	mov	r7, r4
 8003b10:	bf82      	ittt	hi
 8003b12:	eb03 0905 	addhi.w	r9, r3, r5
 8003b16:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003b1a:	60a3      	strhi	r3, [r4, #8]
 8003b1c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003b20:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003b24:	bf98      	it	ls
 8003b26:	f04f 0900 	movls.w	r9, #0
 8003b2a:	6023      	str	r3, [r4, #0]
 8003b2c:	463d      	mov	r5, r7
 8003b2e:	f04f 0b00 	mov.w	fp, #0
 8003b32:	6831      	ldr	r1, [r6, #0]
 8003b34:	ab03      	add	r3, sp, #12
 8003b36:	7809      	ldrb	r1, [r1, #0]
 8003b38:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	f7fc fb6f 	bl	8000220 <memchr>
 8003b42:	b328      	cbz	r0, 8003b90 <_scanf_i+0xb8>
 8003b44:	f1bb 0f01 	cmp.w	fp, #1
 8003b48:	d159      	bne.n	8003bfe <_scanf_i+0x126>
 8003b4a:	6862      	ldr	r2, [r4, #4]
 8003b4c:	b92a      	cbnz	r2, 8003b5a <_scanf_i+0x82>
 8003b4e:	6822      	ldr	r2, [r4, #0]
 8003b50:	2308      	movs	r3, #8
 8003b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b56:	6063      	str	r3, [r4, #4]
 8003b58:	6022      	str	r2, [r4, #0]
 8003b5a:	6822      	ldr	r2, [r4, #0]
 8003b5c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003b60:	6022      	str	r2, [r4, #0]
 8003b62:	68a2      	ldr	r2, [r4, #8]
 8003b64:	1e51      	subs	r1, r2, #1
 8003b66:	60a1      	str	r1, [r4, #8]
 8003b68:	b192      	cbz	r2, 8003b90 <_scanf_i+0xb8>
 8003b6a:	6832      	ldr	r2, [r6, #0]
 8003b6c:	1c51      	adds	r1, r2, #1
 8003b6e:	6031      	str	r1, [r6, #0]
 8003b70:	7812      	ldrb	r2, [r2, #0]
 8003b72:	f805 2b01 	strb.w	r2, [r5], #1
 8003b76:	6872      	ldr	r2, [r6, #4]
 8003b78:	3a01      	subs	r2, #1
 8003b7a:	2a00      	cmp	r2, #0
 8003b7c:	6072      	str	r2, [r6, #4]
 8003b7e:	dc07      	bgt.n	8003b90 <_scanf_i+0xb8>
 8003b80:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003b84:	4631      	mov	r1, r6
 8003b86:	4650      	mov	r0, sl
 8003b88:	4790      	blx	r2
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	f040 8085 	bne.w	8003c9a <_scanf_i+0x1c2>
 8003b90:	f10b 0b01 	add.w	fp, fp, #1
 8003b94:	f1bb 0f03 	cmp.w	fp, #3
 8003b98:	d1cb      	bne.n	8003b32 <_scanf_i+0x5a>
 8003b9a:	6863      	ldr	r3, [r4, #4]
 8003b9c:	b90b      	cbnz	r3, 8003ba2 <_scanf_i+0xca>
 8003b9e:	230a      	movs	r3, #10
 8003ba0:	6063      	str	r3, [r4, #4]
 8003ba2:	6863      	ldr	r3, [r4, #4]
 8003ba4:	4945      	ldr	r1, [pc, #276]	; (8003cbc <_scanf_i+0x1e4>)
 8003ba6:	6960      	ldr	r0, [r4, #20]
 8003ba8:	1ac9      	subs	r1, r1, r3
 8003baa:	f000 f889 	bl	8003cc0 <__sccl>
 8003bae:	f04f 0b00 	mov.w	fp, #0
 8003bb2:	68a3      	ldr	r3, [r4, #8]
 8003bb4:	6822      	ldr	r2, [r4, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d03d      	beq.n	8003c36 <_scanf_i+0x15e>
 8003bba:	6831      	ldr	r1, [r6, #0]
 8003bbc:	6960      	ldr	r0, [r4, #20]
 8003bbe:	f891 c000 	ldrb.w	ip, [r1]
 8003bc2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	d035      	beq.n	8003c36 <_scanf_i+0x15e>
 8003bca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003bce:	d124      	bne.n	8003c1a <_scanf_i+0x142>
 8003bd0:	0510      	lsls	r0, r2, #20
 8003bd2:	d522      	bpl.n	8003c1a <_scanf_i+0x142>
 8003bd4:	f10b 0b01 	add.w	fp, fp, #1
 8003bd8:	f1b9 0f00 	cmp.w	r9, #0
 8003bdc:	d003      	beq.n	8003be6 <_scanf_i+0x10e>
 8003bde:	3301      	adds	r3, #1
 8003be0:	f109 39ff 	add.w	r9, r9, #4294967295
 8003be4:	60a3      	str	r3, [r4, #8]
 8003be6:	6873      	ldr	r3, [r6, #4]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	6073      	str	r3, [r6, #4]
 8003bee:	dd1b      	ble.n	8003c28 <_scanf_i+0x150>
 8003bf0:	6833      	ldr	r3, [r6, #0]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	6033      	str	r3, [r6, #0]
 8003bf6:	68a3      	ldr	r3, [r4, #8]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	60a3      	str	r3, [r4, #8]
 8003bfc:	e7d9      	b.n	8003bb2 <_scanf_i+0xda>
 8003bfe:	f1bb 0f02 	cmp.w	fp, #2
 8003c02:	d1ae      	bne.n	8003b62 <_scanf_i+0x8a>
 8003c04:	6822      	ldr	r2, [r4, #0]
 8003c06:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003c0a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003c0e:	d1bf      	bne.n	8003b90 <_scanf_i+0xb8>
 8003c10:	2310      	movs	r3, #16
 8003c12:	6063      	str	r3, [r4, #4]
 8003c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c18:	e7a2      	b.n	8003b60 <_scanf_i+0x88>
 8003c1a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003c1e:	6022      	str	r2, [r4, #0]
 8003c20:	780b      	ldrb	r3, [r1, #0]
 8003c22:	f805 3b01 	strb.w	r3, [r5], #1
 8003c26:	e7de      	b.n	8003be6 <_scanf_i+0x10e>
 8003c28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003c2c:	4631      	mov	r1, r6
 8003c2e:	4650      	mov	r0, sl
 8003c30:	4798      	blx	r3
 8003c32:	2800      	cmp	r0, #0
 8003c34:	d0df      	beq.n	8003bf6 <_scanf_i+0x11e>
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	05d9      	lsls	r1, r3, #23
 8003c3a:	d50d      	bpl.n	8003c58 <_scanf_i+0x180>
 8003c3c:	42bd      	cmp	r5, r7
 8003c3e:	d909      	bls.n	8003c54 <_scanf_i+0x17c>
 8003c40:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003c44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c48:	4632      	mov	r2, r6
 8003c4a:	4650      	mov	r0, sl
 8003c4c:	4798      	blx	r3
 8003c4e:	f105 39ff 	add.w	r9, r5, #4294967295
 8003c52:	464d      	mov	r5, r9
 8003c54:	42bd      	cmp	r5, r7
 8003c56:	d028      	beq.n	8003caa <_scanf_i+0x1d2>
 8003c58:	6822      	ldr	r2, [r4, #0]
 8003c5a:	f012 0210 	ands.w	r2, r2, #16
 8003c5e:	d113      	bne.n	8003c88 <_scanf_i+0x1b0>
 8003c60:	702a      	strb	r2, [r5, #0]
 8003c62:	6863      	ldr	r3, [r4, #4]
 8003c64:	9e01      	ldr	r6, [sp, #4]
 8003c66:	4639      	mov	r1, r7
 8003c68:	4650      	mov	r0, sl
 8003c6a:	47b0      	blx	r6
 8003c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8003c70:	6821      	ldr	r1, [r4, #0]
 8003c72:	1d1a      	adds	r2, r3, #4
 8003c74:	f8c8 2000 	str.w	r2, [r8]
 8003c78:	f011 0f20 	tst.w	r1, #32
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	d00f      	beq.n	8003ca0 <_scanf_i+0x1c8>
 8003c80:	6018      	str	r0, [r3, #0]
 8003c82:	68e3      	ldr	r3, [r4, #12]
 8003c84:	3301      	adds	r3, #1
 8003c86:	60e3      	str	r3, [r4, #12]
 8003c88:	1bed      	subs	r5, r5, r7
 8003c8a:	44ab      	add	fp, r5
 8003c8c:	6925      	ldr	r5, [r4, #16]
 8003c8e:	445d      	add	r5, fp
 8003c90:	6125      	str	r5, [r4, #16]
 8003c92:	2000      	movs	r0, #0
 8003c94:	b007      	add	sp, #28
 8003c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c9a:	f04f 0b00 	mov.w	fp, #0
 8003c9e:	e7ca      	b.n	8003c36 <_scanf_i+0x15e>
 8003ca0:	07ca      	lsls	r2, r1, #31
 8003ca2:	bf4c      	ite	mi
 8003ca4:	8018      	strhmi	r0, [r3, #0]
 8003ca6:	6018      	strpl	r0, [r3, #0]
 8003ca8:	e7eb      	b.n	8003c82 <_scanf_i+0x1aa>
 8003caa:	2001      	movs	r0, #1
 8003cac:	e7f2      	b.n	8003c94 <_scanf_i+0x1bc>
 8003cae:	bf00      	nop
 8003cb0:	08004308 	.word	0x08004308
 8003cb4:	08003f39 	.word	0x08003f39
 8003cb8:	08003e3d 	.word	0x08003e3d
 8003cbc:	08004378 	.word	0x08004378

08003cc0 <__sccl>:
 8003cc0:	b570      	push	{r4, r5, r6, lr}
 8003cc2:	780b      	ldrb	r3, [r1, #0]
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	2b5e      	cmp	r3, #94	; 0x5e
 8003cc8:	bf0b      	itete	eq
 8003cca:	784b      	ldrbeq	r3, [r1, #1]
 8003ccc:	1c48      	addne	r0, r1, #1
 8003cce:	1c88      	addeq	r0, r1, #2
 8003cd0:	2200      	movne	r2, #0
 8003cd2:	bf08      	it	eq
 8003cd4:	2201      	moveq	r2, #1
 8003cd6:	1e61      	subs	r1, r4, #1
 8003cd8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003cdc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8003ce0:	42a9      	cmp	r1, r5
 8003ce2:	d1fb      	bne.n	8003cdc <__sccl+0x1c>
 8003ce4:	b90b      	cbnz	r3, 8003cea <__sccl+0x2a>
 8003ce6:	3801      	subs	r0, #1
 8003ce8:	bd70      	pop	{r4, r5, r6, pc}
 8003cea:	f082 0101 	eor.w	r1, r2, #1
 8003cee:	54e1      	strb	r1, [r4, r3]
 8003cf0:	1c42      	adds	r2, r0, #1
 8003cf2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8003cf6:	2d2d      	cmp	r5, #45	; 0x2d
 8003cf8:	f102 36ff 	add.w	r6, r2, #4294967295
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	d006      	beq.n	8003d0e <__sccl+0x4e>
 8003d00:	2d5d      	cmp	r5, #93	; 0x5d
 8003d02:	d0f1      	beq.n	8003ce8 <__sccl+0x28>
 8003d04:	b90d      	cbnz	r5, 8003d0a <__sccl+0x4a>
 8003d06:	4630      	mov	r0, r6
 8003d08:	e7ee      	b.n	8003ce8 <__sccl+0x28>
 8003d0a:	462b      	mov	r3, r5
 8003d0c:	e7ef      	b.n	8003cee <__sccl+0x2e>
 8003d0e:	7816      	ldrb	r6, [r2, #0]
 8003d10:	2e5d      	cmp	r6, #93	; 0x5d
 8003d12:	d0fa      	beq.n	8003d0a <__sccl+0x4a>
 8003d14:	42b3      	cmp	r3, r6
 8003d16:	dcf8      	bgt.n	8003d0a <__sccl+0x4a>
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3001      	adds	r0, #1
 8003d1c:	4286      	cmp	r6, r0
 8003d1e:	5421      	strb	r1, [r4, r0]
 8003d20:	dcfb      	bgt.n	8003d1a <__sccl+0x5a>
 8003d22:	43d8      	mvns	r0, r3
 8003d24:	4430      	add	r0, r6
 8003d26:	1c5d      	adds	r5, r3, #1
 8003d28:	42b3      	cmp	r3, r6
 8003d2a:	bfa8      	it	ge
 8003d2c:	2000      	movge	r0, #0
 8003d2e:	182b      	adds	r3, r5, r0
 8003d30:	3202      	adds	r2, #2
 8003d32:	e7de      	b.n	8003cf2 <__sccl+0x32>

08003d34 <_strtol_l.isra.0>:
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d3a:	d001      	beq.n	8003d40 <_strtol_l.isra.0+0xc>
 8003d3c:	2b24      	cmp	r3, #36	; 0x24
 8003d3e:	d906      	bls.n	8003d4e <_strtol_l.isra.0+0x1a>
 8003d40:	f7ff f930 	bl	8002fa4 <__errno>
 8003d44:	2316      	movs	r3, #22
 8003d46:	6003      	str	r3, [r0, #0]
 8003d48:	2000      	movs	r0, #0
 8003d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d4e:	4f3a      	ldr	r7, [pc, #232]	; (8003e38 <_strtol_l.isra.0+0x104>)
 8003d50:	468e      	mov	lr, r1
 8003d52:	4676      	mov	r6, lr
 8003d54:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003d58:	5de5      	ldrb	r5, [r4, r7]
 8003d5a:	f015 0508 	ands.w	r5, r5, #8
 8003d5e:	d1f8      	bne.n	8003d52 <_strtol_l.isra.0+0x1e>
 8003d60:	2c2d      	cmp	r4, #45	; 0x2d
 8003d62:	d134      	bne.n	8003dce <_strtol_l.isra.0+0x9a>
 8003d64:	f89e 4000 	ldrb.w	r4, [lr]
 8003d68:	f04f 0801 	mov.w	r8, #1
 8003d6c:	f106 0e02 	add.w	lr, r6, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d05c      	beq.n	8003e2e <_strtol_l.isra.0+0xfa>
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	d10c      	bne.n	8003d92 <_strtol_l.isra.0+0x5e>
 8003d78:	2c30      	cmp	r4, #48	; 0x30
 8003d7a:	d10a      	bne.n	8003d92 <_strtol_l.isra.0+0x5e>
 8003d7c:	f89e 4000 	ldrb.w	r4, [lr]
 8003d80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003d84:	2c58      	cmp	r4, #88	; 0x58
 8003d86:	d14d      	bne.n	8003e24 <_strtol_l.isra.0+0xf0>
 8003d88:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8003d8c:	2310      	movs	r3, #16
 8003d8e:	f10e 0e02 	add.w	lr, lr, #2
 8003d92:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8003d96:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003d9a:	2600      	movs	r6, #0
 8003d9c:	fbbc f9f3 	udiv	r9, ip, r3
 8003da0:	4635      	mov	r5, r6
 8003da2:	fb03 ca19 	mls	sl, r3, r9, ip
 8003da6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003daa:	2f09      	cmp	r7, #9
 8003dac:	d818      	bhi.n	8003de0 <_strtol_l.isra.0+0xac>
 8003dae:	463c      	mov	r4, r7
 8003db0:	42a3      	cmp	r3, r4
 8003db2:	dd24      	ble.n	8003dfe <_strtol_l.isra.0+0xca>
 8003db4:	2e00      	cmp	r6, #0
 8003db6:	db1f      	blt.n	8003df8 <_strtol_l.isra.0+0xc4>
 8003db8:	45a9      	cmp	r9, r5
 8003dba:	d31d      	bcc.n	8003df8 <_strtol_l.isra.0+0xc4>
 8003dbc:	d101      	bne.n	8003dc2 <_strtol_l.isra.0+0x8e>
 8003dbe:	45a2      	cmp	sl, r4
 8003dc0:	db1a      	blt.n	8003df8 <_strtol_l.isra.0+0xc4>
 8003dc2:	fb05 4503 	mla	r5, r5, r3, r4
 8003dc6:	2601      	movs	r6, #1
 8003dc8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003dcc:	e7eb      	b.n	8003da6 <_strtol_l.isra.0+0x72>
 8003dce:	2c2b      	cmp	r4, #43	; 0x2b
 8003dd0:	bf08      	it	eq
 8003dd2:	f89e 4000 	ldrbeq.w	r4, [lr]
 8003dd6:	46a8      	mov	r8, r5
 8003dd8:	bf08      	it	eq
 8003dda:	f106 0e02 	addeq.w	lr, r6, #2
 8003dde:	e7c7      	b.n	8003d70 <_strtol_l.isra.0+0x3c>
 8003de0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003de4:	2f19      	cmp	r7, #25
 8003de6:	d801      	bhi.n	8003dec <_strtol_l.isra.0+0xb8>
 8003de8:	3c37      	subs	r4, #55	; 0x37
 8003dea:	e7e1      	b.n	8003db0 <_strtol_l.isra.0+0x7c>
 8003dec:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003df0:	2f19      	cmp	r7, #25
 8003df2:	d804      	bhi.n	8003dfe <_strtol_l.isra.0+0xca>
 8003df4:	3c57      	subs	r4, #87	; 0x57
 8003df6:	e7db      	b.n	8003db0 <_strtol_l.isra.0+0x7c>
 8003df8:	f04f 36ff 	mov.w	r6, #4294967295
 8003dfc:	e7e4      	b.n	8003dc8 <_strtol_l.isra.0+0x94>
 8003dfe:	2e00      	cmp	r6, #0
 8003e00:	da05      	bge.n	8003e0e <_strtol_l.isra.0+0xda>
 8003e02:	2322      	movs	r3, #34	; 0x22
 8003e04:	6003      	str	r3, [r0, #0]
 8003e06:	4665      	mov	r5, ip
 8003e08:	b942      	cbnz	r2, 8003e1c <_strtol_l.isra.0+0xe8>
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	e79d      	b.n	8003d4a <_strtol_l.isra.0+0x16>
 8003e0e:	f1b8 0f00 	cmp.w	r8, #0
 8003e12:	d000      	beq.n	8003e16 <_strtol_l.isra.0+0xe2>
 8003e14:	426d      	negs	r5, r5
 8003e16:	2a00      	cmp	r2, #0
 8003e18:	d0f7      	beq.n	8003e0a <_strtol_l.isra.0+0xd6>
 8003e1a:	b10e      	cbz	r6, 8003e20 <_strtol_l.isra.0+0xec>
 8003e1c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8003e20:	6011      	str	r1, [r2, #0]
 8003e22:	e7f2      	b.n	8003e0a <_strtol_l.isra.0+0xd6>
 8003e24:	2430      	movs	r4, #48	; 0x30
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1b3      	bne.n	8003d92 <_strtol_l.isra.0+0x5e>
 8003e2a:	2308      	movs	r3, #8
 8003e2c:	e7b1      	b.n	8003d92 <_strtol_l.isra.0+0x5e>
 8003e2e:	2c30      	cmp	r4, #48	; 0x30
 8003e30:	d0a4      	beq.n	8003d7c <_strtol_l.isra.0+0x48>
 8003e32:	230a      	movs	r3, #10
 8003e34:	e7ad      	b.n	8003d92 <_strtol_l.isra.0+0x5e>
 8003e36:	bf00      	nop
 8003e38:	0800437b 	.word	0x0800437b

08003e3c <_strtol_r>:
 8003e3c:	f7ff bf7a 	b.w	8003d34 <_strtol_l.isra.0>

08003e40 <_strtoul_l.isra.0>:
 8003e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e44:	4e3b      	ldr	r6, [pc, #236]	; (8003f34 <_strtoul_l.isra.0+0xf4>)
 8003e46:	4686      	mov	lr, r0
 8003e48:	468c      	mov	ip, r1
 8003e4a:	4660      	mov	r0, ip
 8003e4c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003e50:	5da5      	ldrb	r5, [r4, r6]
 8003e52:	f015 0508 	ands.w	r5, r5, #8
 8003e56:	d1f8      	bne.n	8003e4a <_strtoul_l.isra.0+0xa>
 8003e58:	2c2d      	cmp	r4, #45	; 0x2d
 8003e5a:	d134      	bne.n	8003ec6 <_strtoul_l.isra.0+0x86>
 8003e5c:	f89c 4000 	ldrb.w	r4, [ip]
 8003e60:	f04f 0801 	mov.w	r8, #1
 8003e64:	f100 0c02 	add.w	ip, r0, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d05e      	beq.n	8003f2a <_strtoul_l.isra.0+0xea>
 8003e6c:	2b10      	cmp	r3, #16
 8003e6e:	d10c      	bne.n	8003e8a <_strtoul_l.isra.0+0x4a>
 8003e70:	2c30      	cmp	r4, #48	; 0x30
 8003e72:	d10a      	bne.n	8003e8a <_strtoul_l.isra.0+0x4a>
 8003e74:	f89c 0000 	ldrb.w	r0, [ip]
 8003e78:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003e7c:	2858      	cmp	r0, #88	; 0x58
 8003e7e:	d14f      	bne.n	8003f20 <_strtoul_l.isra.0+0xe0>
 8003e80:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8003e84:	2310      	movs	r3, #16
 8003e86:	f10c 0c02 	add.w	ip, ip, #2
 8003e8a:	f04f 37ff 	mov.w	r7, #4294967295
 8003e8e:	2500      	movs	r5, #0
 8003e90:	fbb7 f7f3 	udiv	r7, r7, r3
 8003e94:	fb03 f907 	mul.w	r9, r3, r7
 8003e98:	ea6f 0909 	mvn.w	r9, r9
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8003ea2:	2e09      	cmp	r6, #9
 8003ea4:	d818      	bhi.n	8003ed8 <_strtoul_l.isra.0+0x98>
 8003ea6:	4634      	mov	r4, r6
 8003ea8:	42a3      	cmp	r3, r4
 8003eaa:	dd24      	ble.n	8003ef6 <_strtoul_l.isra.0+0xb6>
 8003eac:	2d00      	cmp	r5, #0
 8003eae:	db1f      	blt.n	8003ef0 <_strtoul_l.isra.0+0xb0>
 8003eb0:	4287      	cmp	r7, r0
 8003eb2:	d31d      	bcc.n	8003ef0 <_strtoul_l.isra.0+0xb0>
 8003eb4:	d101      	bne.n	8003eba <_strtoul_l.isra.0+0x7a>
 8003eb6:	45a1      	cmp	r9, r4
 8003eb8:	db1a      	blt.n	8003ef0 <_strtoul_l.isra.0+0xb0>
 8003eba:	fb00 4003 	mla	r0, r0, r3, r4
 8003ebe:	2501      	movs	r5, #1
 8003ec0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003ec4:	e7eb      	b.n	8003e9e <_strtoul_l.isra.0+0x5e>
 8003ec6:	2c2b      	cmp	r4, #43	; 0x2b
 8003ec8:	bf08      	it	eq
 8003eca:	f89c 4000 	ldrbeq.w	r4, [ip]
 8003ece:	46a8      	mov	r8, r5
 8003ed0:	bf08      	it	eq
 8003ed2:	f100 0c02 	addeq.w	ip, r0, #2
 8003ed6:	e7c7      	b.n	8003e68 <_strtoul_l.isra.0+0x28>
 8003ed8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8003edc:	2e19      	cmp	r6, #25
 8003ede:	d801      	bhi.n	8003ee4 <_strtoul_l.isra.0+0xa4>
 8003ee0:	3c37      	subs	r4, #55	; 0x37
 8003ee2:	e7e1      	b.n	8003ea8 <_strtoul_l.isra.0+0x68>
 8003ee4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8003ee8:	2e19      	cmp	r6, #25
 8003eea:	d804      	bhi.n	8003ef6 <_strtoul_l.isra.0+0xb6>
 8003eec:	3c57      	subs	r4, #87	; 0x57
 8003eee:	e7db      	b.n	8003ea8 <_strtoul_l.isra.0+0x68>
 8003ef0:	f04f 35ff 	mov.w	r5, #4294967295
 8003ef4:	e7e4      	b.n	8003ec0 <_strtoul_l.isra.0+0x80>
 8003ef6:	2d00      	cmp	r5, #0
 8003ef8:	da07      	bge.n	8003f0a <_strtoul_l.isra.0+0xca>
 8003efa:	2322      	movs	r3, #34	; 0x22
 8003efc:	f8ce 3000 	str.w	r3, [lr]
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295
 8003f04:	b942      	cbnz	r2, 8003f18 <_strtoul_l.isra.0+0xd8>
 8003f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f0a:	f1b8 0f00 	cmp.w	r8, #0
 8003f0e:	d000      	beq.n	8003f12 <_strtoul_l.isra.0+0xd2>
 8003f10:	4240      	negs	r0, r0
 8003f12:	2a00      	cmp	r2, #0
 8003f14:	d0f7      	beq.n	8003f06 <_strtoul_l.isra.0+0xc6>
 8003f16:	b10d      	cbz	r5, 8003f1c <_strtoul_l.isra.0+0xdc>
 8003f18:	f10c 31ff 	add.w	r1, ip, #4294967295
 8003f1c:	6011      	str	r1, [r2, #0]
 8003f1e:	e7f2      	b.n	8003f06 <_strtoul_l.isra.0+0xc6>
 8003f20:	2430      	movs	r4, #48	; 0x30
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1b1      	bne.n	8003e8a <_strtoul_l.isra.0+0x4a>
 8003f26:	2308      	movs	r3, #8
 8003f28:	e7af      	b.n	8003e8a <_strtoul_l.isra.0+0x4a>
 8003f2a:	2c30      	cmp	r4, #48	; 0x30
 8003f2c:	d0a2      	beq.n	8003e74 <_strtoul_l.isra.0+0x34>
 8003f2e:	230a      	movs	r3, #10
 8003f30:	e7ab      	b.n	8003e8a <_strtoul_l.isra.0+0x4a>
 8003f32:	bf00      	nop
 8003f34:	0800437b 	.word	0x0800437b

08003f38 <_strtoul_r>:
 8003f38:	f7ff bf82 	b.w	8003e40 <_strtoul_l.isra.0>

08003f3c <__submore>:
 8003f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f40:	460c      	mov	r4, r1
 8003f42:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003f44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f48:	4299      	cmp	r1, r3
 8003f4a:	d11d      	bne.n	8003f88 <__submore+0x4c>
 8003f4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f50:	f000 f8a8 	bl	80040a4 <_malloc_r>
 8003f54:	b918      	cbnz	r0, 8003f5e <__submore+0x22>
 8003f56:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f62:	63a3      	str	r3, [r4, #56]	; 0x38
 8003f64:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003f68:	6360      	str	r0, [r4, #52]	; 0x34
 8003f6a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003f6e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003f72:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8003f76:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003f7a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8003f7e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003f82:	6020      	str	r0, [r4, #0]
 8003f84:	2000      	movs	r0, #0
 8003f86:	e7e8      	b.n	8003f5a <__submore+0x1e>
 8003f88:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003f8a:	0077      	lsls	r7, r6, #1
 8003f8c:	463a      	mov	r2, r7
 8003f8e:	f000 f8e3 	bl	8004158 <_realloc_r>
 8003f92:	4605      	mov	r5, r0
 8003f94:	2800      	cmp	r0, #0
 8003f96:	d0de      	beq.n	8003f56 <__submore+0x1a>
 8003f98:	eb00 0806 	add.w	r8, r0, r6
 8003f9c:	4601      	mov	r1, r0
 8003f9e:	4632      	mov	r2, r6
 8003fa0:	4640      	mov	r0, r8
 8003fa2:	f000 f807 	bl	8003fb4 <memcpy>
 8003fa6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003faa:	f8c4 8000 	str.w	r8, [r4]
 8003fae:	e7e9      	b.n	8003f84 <__submore+0x48>

08003fb0 <__retarget_lock_acquire_recursive>:
 8003fb0:	4770      	bx	lr

08003fb2 <__retarget_lock_release_recursive>:
 8003fb2:	4770      	bx	lr

08003fb4 <memcpy>:
 8003fb4:	440a      	add	r2, r1
 8003fb6:	4291      	cmp	r1, r2
 8003fb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fbc:	d100      	bne.n	8003fc0 <memcpy+0xc>
 8003fbe:	4770      	bx	lr
 8003fc0:	b510      	push	{r4, lr}
 8003fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fca:	4291      	cmp	r1, r2
 8003fcc:	d1f9      	bne.n	8003fc2 <memcpy+0xe>
 8003fce:	bd10      	pop	{r4, pc}

08003fd0 <memmove>:
 8003fd0:	4288      	cmp	r0, r1
 8003fd2:	b510      	push	{r4, lr}
 8003fd4:	eb01 0402 	add.w	r4, r1, r2
 8003fd8:	d902      	bls.n	8003fe0 <memmove+0x10>
 8003fda:	4284      	cmp	r4, r0
 8003fdc:	4623      	mov	r3, r4
 8003fde:	d807      	bhi.n	8003ff0 <memmove+0x20>
 8003fe0:	1e43      	subs	r3, r0, #1
 8003fe2:	42a1      	cmp	r1, r4
 8003fe4:	d008      	beq.n	8003ff8 <memmove+0x28>
 8003fe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fee:	e7f8      	b.n	8003fe2 <memmove+0x12>
 8003ff0:	4402      	add	r2, r0
 8003ff2:	4601      	mov	r1, r0
 8003ff4:	428a      	cmp	r2, r1
 8003ff6:	d100      	bne.n	8003ffa <memmove+0x2a>
 8003ff8:	bd10      	pop	{r4, pc}
 8003ffa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ffe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004002:	e7f7      	b.n	8003ff4 <memmove+0x24>

08004004 <_free_r>:
 8004004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004006:	2900      	cmp	r1, #0
 8004008:	d048      	beq.n	800409c <_free_r+0x98>
 800400a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800400e:	9001      	str	r0, [sp, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	f1a1 0404 	sub.w	r4, r1, #4
 8004016:	bfb8      	it	lt
 8004018:	18e4      	addlt	r4, r4, r3
 800401a:	f000 f8d3 	bl	80041c4 <__malloc_lock>
 800401e:	4a20      	ldr	r2, [pc, #128]	; (80040a0 <_free_r+0x9c>)
 8004020:	9801      	ldr	r0, [sp, #4]
 8004022:	6813      	ldr	r3, [r2, #0]
 8004024:	4615      	mov	r5, r2
 8004026:	b933      	cbnz	r3, 8004036 <_free_r+0x32>
 8004028:	6063      	str	r3, [r4, #4]
 800402a:	6014      	str	r4, [r2, #0]
 800402c:	b003      	add	sp, #12
 800402e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004032:	f000 b8cd 	b.w	80041d0 <__malloc_unlock>
 8004036:	42a3      	cmp	r3, r4
 8004038:	d90b      	bls.n	8004052 <_free_r+0x4e>
 800403a:	6821      	ldr	r1, [r4, #0]
 800403c:	1862      	adds	r2, r4, r1
 800403e:	4293      	cmp	r3, r2
 8004040:	bf04      	itt	eq
 8004042:	681a      	ldreq	r2, [r3, #0]
 8004044:	685b      	ldreq	r3, [r3, #4]
 8004046:	6063      	str	r3, [r4, #4]
 8004048:	bf04      	itt	eq
 800404a:	1852      	addeq	r2, r2, r1
 800404c:	6022      	streq	r2, [r4, #0]
 800404e:	602c      	str	r4, [r5, #0]
 8004050:	e7ec      	b.n	800402c <_free_r+0x28>
 8004052:	461a      	mov	r2, r3
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	b10b      	cbz	r3, 800405c <_free_r+0x58>
 8004058:	42a3      	cmp	r3, r4
 800405a:	d9fa      	bls.n	8004052 <_free_r+0x4e>
 800405c:	6811      	ldr	r1, [r2, #0]
 800405e:	1855      	adds	r5, r2, r1
 8004060:	42a5      	cmp	r5, r4
 8004062:	d10b      	bne.n	800407c <_free_r+0x78>
 8004064:	6824      	ldr	r4, [r4, #0]
 8004066:	4421      	add	r1, r4
 8004068:	1854      	adds	r4, r2, r1
 800406a:	42a3      	cmp	r3, r4
 800406c:	6011      	str	r1, [r2, #0]
 800406e:	d1dd      	bne.n	800402c <_free_r+0x28>
 8004070:	681c      	ldr	r4, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	6053      	str	r3, [r2, #4]
 8004076:	4421      	add	r1, r4
 8004078:	6011      	str	r1, [r2, #0]
 800407a:	e7d7      	b.n	800402c <_free_r+0x28>
 800407c:	d902      	bls.n	8004084 <_free_r+0x80>
 800407e:	230c      	movs	r3, #12
 8004080:	6003      	str	r3, [r0, #0]
 8004082:	e7d3      	b.n	800402c <_free_r+0x28>
 8004084:	6825      	ldr	r5, [r4, #0]
 8004086:	1961      	adds	r1, r4, r5
 8004088:	428b      	cmp	r3, r1
 800408a:	bf04      	itt	eq
 800408c:	6819      	ldreq	r1, [r3, #0]
 800408e:	685b      	ldreq	r3, [r3, #4]
 8004090:	6063      	str	r3, [r4, #4]
 8004092:	bf04      	itt	eq
 8004094:	1949      	addeq	r1, r1, r5
 8004096:	6021      	streq	r1, [r4, #0]
 8004098:	6054      	str	r4, [r2, #4]
 800409a:	e7c7      	b.n	800402c <_free_r+0x28>
 800409c:	b003      	add	sp, #12
 800409e:	bd30      	pop	{r4, r5, pc}
 80040a0:	20000094 	.word	0x20000094

080040a4 <_malloc_r>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	1ccd      	adds	r5, r1, #3
 80040a8:	f025 0503 	bic.w	r5, r5, #3
 80040ac:	3508      	adds	r5, #8
 80040ae:	2d0c      	cmp	r5, #12
 80040b0:	bf38      	it	cc
 80040b2:	250c      	movcc	r5, #12
 80040b4:	2d00      	cmp	r5, #0
 80040b6:	4606      	mov	r6, r0
 80040b8:	db01      	blt.n	80040be <_malloc_r+0x1a>
 80040ba:	42a9      	cmp	r1, r5
 80040bc:	d903      	bls.n	80040c6 <_malloc_r+0x22>
 80040be:	230c      	movs	r3, #12
 80040c0:	6033      	str	r3, [r6, #0]
 80040c2:	2000      	movs	r0, #0
 80040c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040c6:	f000 f87d 	bl	80041c4 <__malloc_lock>
 80040ca:	4921      	ldr	r1, [pc, #132]	; (8004150 <_malloc_r+0xac>)
 80040cc:	680a      	ldr	r2, [r1, #0]
 80040ce:	4614      	mov	r4, r2
 80040d0:	b99c      	cbnz	r4, 80040fa <_malloc_r+0x56>
 80040d2:	4f20      	ldr	r7, [pc, #128]	; (8004154 <_malloc_r+0xb0>)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	b923      	cbnz	r3, 80040e2 <_malloc_r+0x3e>
 80040d8:	4621      	mov	r1, r4
 80040da:	4630      	mov	r0, r6
 80040dc:	f000 f862 	bl	80041a4 <_sbrk_r>
 80040e0:	6038      	str	r0, [r7, #0]
 80040e2:	4629      	mov	r1, r5
 80040e4:	4630      	mov	r0, r6
 80040e6:	f000 f85d 	bl	80041a4 <_sbrk_r>
 80040ea:	1c43      	adds	r3, r0, #1
 80040ec:	d123      	bne.n	8004136 <_malloc_r+0x92>
 80040ee:	230c      	movs	r3, #12
 80040f0:	6033      	str	r3, [r6, #0]
 80040f2:	4630      	mov	r0, r6
 80040f4:	f000 f86c 	bl	80041d0 <__malloc_unlock>
 80040f8:	e7e3      	b.n	80040c2 <_malloc_r+0x1e>
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	1b5b      	subs	r3, r3, r5
 80040fe:	d417      	bmi.n	8004130 <_malloc_r+0x8c>
 8004100:	2b0b      	cmp	r3, #11
 8004102:	d903      	bls.n	800410c <_malloc_r+0x68>
 8004104:	6023      	str	r3, [r4, #0]
 8004106:	441c      	add	r4, r3
 8004108:	6025      	str	r5, [r4, #0]
 800410a:	e004      	b.n	8004116 <_malloc_r+0x72>
 800410c:	6863      	ldr	r3, [r4, #4]
 800410e:	42a2      	cmp	r2, r4
 8004110:	bf0c      	ite	eq
 8004112:	600b      	streq	r3, [r1, #0]
 8004114:	6053      	strne	r3, [r2, #4]
 8004116:	4630      	mov	r0, r6
 8004118:	f000 f85a 	bl	80041d0 <__malloc_unlock>
 800411c:	f104 000b 	add.w	r0, r4, #11
 8004120:	1d23      	adds	r3, r4, #4
 8004122:	f020 0007 	bic.w	r0, r0, #7
 8004126:	1ac2      	subs	r2, r0, r3
 8004128:	d0cc      	beq.n	80040c4 <_malloc_r+0x20>
 800412a:	1a1b      	subs	r3, r3, r0
 800412c:	50a3      	str	r3, [r4, r2]
 800412e:	e7c9      	b.n	80040c4 <_malloc_r+0x20>
 8004130:	4622      	mov	r2, r4
 8004132:	6864      	ldr	r4, [r4, #4]
 8004134:	e7cc      	b.n	80040d0 <_malloc_r+0x2c>
 8004136:	1cc4      	adds	r4, r0, #3
 8004138:	f024 0403 	bic.w	r4, r4, #3
 800413c:	42a0      	cmp	r0, r4
 800413e:	d0e3      	beq.n	8004108 <_malloc_r+0x64>
 8004140:	1a21      	subs	r1, r4, r0
 8004142:	4630      	mov	r0, r6
 8004144:	f000 f82e 	bl	80041a4 <_sbrk_r>
 8004148:	3001      	adds	r0, #1
 800414a:	d1dd      	bne.n	8004108 <_malloc_r+0x64>
 800414c:	e7cf      	b.n	80040ee <_malloc_r+0x4a>
 800414e:	bf00      	nop
 8004150:	20000094 	.word	0x20000094
 8004154:	20000098 	.word	0x20000098

08004158 <_realloc_r>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	4607      	mov	r7, r0
 800415c:	4614      	mov	r4, r2
 800415e:	460e      	mov	r6, r1
 8004160:	b921      	cbnz	r1, 800416c <_realloc_r+0x14>
 8004162:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004166:	4611      	mov	r1, r2
 8004168:	f7ff bf9c 	b.w	80040a4 <_malloc_r>
 800416c:	b922      	cbnz	r2, 8004178 <_realloc_r+0x20>
 800416e:	f7ff ff49 	bl	8004004 <_free_r>
 8004172:	4625      	mov	r5, r4
 8004174:	4628      	mov	r0, r5
 8004176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004178:	f000 f830 	bl	80041dc <_malloc_usable_size_r>
 800417c:	42a0      	cmp	r0, r4
 800417e:	d20f      	bcs.n	80041a0 <_realloc_r+0x48>
 8004180:	4621      	mov	r1, r4
 8004182:	4638      	mov	r0, r7
 8004184:	f7ff ff8e 	bl	80040a4 <_malloc_r>
 8004188:	4605      	mov	r5, r0
 800418a:	2800      	cmp	r0, #0
 800418c:	d0f2      	beq.n	8004174 <_realloc_r+0x1c>
 800418e:	4631      	mov	r1, r6
 8004190:	4622      	mov	r2, r4
 8004192:	f7ff ff0f 	bl	8003fb4 <memcpy>
 8004196:	4631      	mov	r1, r6
 8004198:	4638      	mov	r0, r7
 800419a:	f7ff ff33 	bl	8004004 <_free_r>
 800419e:	e7e9      	b.n	8004174 <_realloc_r+0x1c>
 80041a0:	4635      	mov	r5, r6
 80041a2:	e7e7      	b.n	8004174 <_realloc_r+0x1c>

080041a4 <_sbrk_r>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	4d06      	ldr	r5, [pc, #24]	; (80041c0 <_sbrk_r+0x1c>)
 80041a8:	2300      	movs	r3, #0
 80041aa:	4604      	mov	r4, r0
 80041ac:	4608      	mov	r0, r1
 80041ae:	602b      	str	r3, [r5, #0]
 80041b0:	f7fc fcec 	bl	8000b8c <_sbrk>
 80041b4:	1c43      	adds	r3, r0, #1
 80041b6:	d102      	bne.n	80041be <_sbrk_r+0x1a>
 80041b8:	682b      	ldr	r3, [r5, #0]
 80041ba:	b103      	cbz	r3, 80041be <_sbrk_r+0x1a>
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	bd38      	pop	{r3, r4, r5, pc}
 80041c0:	20000104 	.word	0x20000104

080041c4 <__malloc_lock>:
 80041c4:	4801      	ldr	r0, [pc, #4]	; (80041cc <__malloc_lock+0x8>)
 80041c6:	f7ff bef3 	b.w	8003fb0 <__retarget_lock_acquire_recursive>
 80041ca:	bf00      	nop
 80041cc:	2000010c 	.word	0x2000010c

080041d0 <__malloc_unlock>:
 80041d0:	4801      	ldr	r0, [pc, #4]	; (80041d8 <__malloc_unlock+0x8>)
 80041d2:	f7ff beee 	b.w	8003fb2 <__retarget_lock_release_recursive>
 80041d6:	bf00      	nop
 80041d8:	2000010c 	.word	0x2000010c

080041dc <_malloc_usable_size_r>:
 80041dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041e0:	1f18      	subs	r0, r3, #4
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	bfbc      	itt	lt
 80041e6:	580b      	ldrlt	r3, [r1, r0]
 80041e8:	18c0      	addlt	r0, r0, r3
 80041ea:	4770      	bx	lr

080041ec <_init>:
 80041ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ee:	bf00      	nop
 80041f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041f2:	bc08      	pop	{r3}
 80041f4:	469e      	mov	lr, r3
 80041f6:	4770      	bx	lr

080041f8 <_fini>:
 80041f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fa:	bf00      	nop
 80041fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041fe:	bc08      	pop	{r3}
 8004200:	469e      	mov	lr, r3
 8004202:	4770      	bx	lr
