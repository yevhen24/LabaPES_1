
LabaPES_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08004f94  08004f94  00014f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800526c  0800526c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800526c  0800526c  0001526c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005274  08005274  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005274  08005274  00015274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005278  08005278  00015278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800527c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000070  080052ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  080052ec  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010870  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000242b  00000000  00000000  00030910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00032d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00033a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022783  00000000  00000000  000346c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111c8  00000000  00000000  00056e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d121b  00000000  00000000  00068013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013922e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ef0  00000000  00000000  00139284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004f7c 	.word	0x08004f7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004f7c 	.word	0x08004f7c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <MX_GPIO_Init+0x4c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <MX_GPIO_Init+0x4c>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <MX_GPIO_Init+0x4c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_GPIO_Init+0x4c>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a08      	ldr	r2, [pc, #32]	; (8000604 <MX_GPIO_Init+0x4c>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_GPIO_Init+0x4c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]

}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b0ca      	sub	sp, #296	; 0x128
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t tstring[255];
	uint8_t rstring[BUFF_SIZE + 1];
	char string[10] = {0,0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	3304      	adds	r3, #4
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	809a      	strh	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f000 fcdc 	bl	8000fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f90c 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f7ff ffc8 	bl	80005b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000628:	f000 fc32 	bl	8000e90 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800062c:	f000 fb38 	bl	8000ca0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  RING_Init(&ring, buff, sizeof(buff) / sizeof(buff[0])); // Initialize UART receiver ring buffer.
 8000630:	2210      	movs	r2, #16
 8000632:	4975      	ldr	r1, [pc, #468]	; (8000808 <main+0x200>)
 8000634:	4875      	ldr	r0, [pc, #468]	; (800080c <main+0x204>)
 8000636:	f000 f9bc 	bl	80009b2 <RING_Init>
  sprintf((char*)tstring,"\r\nEnter command:\n\r"
 800063a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800063e:	4974      	ldr	r1, [pc, #464]	; (8000810 <main+0x208>)
 8000640:	4618      	mov	r0, r3
 8000642:	f003 fba9 	bl	8003d98 <siprintf>
  		  "L=xx -- brightness for LEDs, where xx - value of brightness\n\r"
  		  "OR\n\r"
  		  "l=xx -- brightness for LEDs, where xx - value of brightness.\n\r\n\r");
  HAL_UART_Transmit(&huart2,tstring,strlen((char*)tstring), HAL_MAX_DELAY);
 8000646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff fde0 	bl	8000210 <strlen>
 8000650:	4603      	mov	r3, r0
 8000652:	b29a      	uxth	r2, r3
 8000654:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000658:	f04f 33ff 	mov.w	r3, #4294967295
 800065c:	486d      	ldr	r0, [pc, #436]	; (8000814 <main+0x20c>)
 800065e:	f002 fbaa 	bl	8002db6 <HAL_UART_Transmit>
  // Start UART receiver in the non blocking mode
  HAL_UART_Receive_IT(&huart2,ring.buffer,1);
 8000662:	4b6a      	ldr	r3, [pc, #424]	; (800080c <main+0x204>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2201      	movs	r2, #1
 8000668:	4619      	mov	r1, r3
 800066a:	486a      	ldr	r0, [pc, #424]	; (8000814 <main+0x20c>)
 800066c:	f002 fc7a 	bl	8002f64 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000670:	2100      	movs	r1, #0
 8000672:	4869      	ldr	r0, [pc, #420]	; (8000818 <main+0x210>)
 8000674:	f001 fe14 	bl	80022a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000678:	2104      	movs	r1, #4
 800067a:	4867      	ldr	r0, [pc, #412]	; (8000818 <main+0x210>)
 800067c:	f001 fe10 	bl	80022a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000680:	2108      	movs	r1, #8
 8000682:	4865      	ldr	r0, [pc, #404]	; (8000818 <main+0x210>)
 8000684:	f001 fe0c 	bl	80022a0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (Ring_GetMessage(&ring, rstring))
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	4619      	mov	r1, r3
 800068e:	485f      	ldr	r0, [pc, #380]	; (800080c <main+0x204>)
 8000690:	f000 fa03 	bl	8000a9a <Ring_GetMessage>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0f6      	beq.n	8000688 <main+0x80>
	  {
		  sscanf((char*)rstring,"%s", string);
 800069a:	1d3a      	adds	r2, r7, #4
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	495e      	ldr	r1, [pc, #376]	; (800081c <main+0x214>)
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 fb98 	bl	8003dd8 <siscanf>
		  for (int i = 0; i < 3; i++)
 80006a8:	2300      	movs	r3, #0
 80006aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80006ae:	e00f      	b.n	80006d0 <main+0xc8>
		  {
			  str[i] = string[i+2];
 80006b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80006b4:	3302      	adds	r3, #2
 80006b6:	1d3a      	adds	r2, r7, #4
 80006b8:	5cd1      	ldrb	r1, [r2, r3]
 80006ba:	4a59      	ldr	r2, [pc, #356]	; (8000820 <main+0x218>)
 80006bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80006c0:	4413      	add	r3, r2
 80006c2:	460a      	mov	r2, r1
 80006c4:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++)
 80006c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80006ca:	3301      	adds	r3, #1
 80006cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80006d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	ddeb      	ble.n	80006b0 <main+0xa8>
		  }
		  if (str[1] == '\r' || str[1] == '\n' || str[1] == '\0')
 80006d8:	4b51      	ldr	r3, [pc, #324]	; (8000820 <main+0x218>)
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	2b0d      	cmp	r3, #13
 80006de:	d007      	beq.n	80006f0 <main+0xe8>
 80006e0:	4b4f      	ldr	r3, [pc, #316]	; (8000820 <main+0x218>)
 80006e2:	785b      	ldrb	r3, [r3, #1]
 80006e4:	2b0a      	cmp	r3, #10
 80006e6:	d003      	beq.n	80006f0 <main+0xe8>
 80006e8:	4b4d      	ldr	r3, [pc, #308]	; (8000820 <main+0x218>)
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d109      	bne.n	8000704 <main+0xfc>
		  {
			  brightness = ((int) str[0]) - 48;
 80006f0:	4b4b      	ldr	r3, [pc, #300]	; (8000820 <main+0x218>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	3b30      	subs	r3, #48	; 0x30
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b4a      	ldr	r3, [pc, #296]	; (8000824 <main+0x21c>)
 80006fa:	701a      	strb	r2, [r3, #0]
			  flag_err = 1;
 80006fc:	4b4a      	ldr	r3, [pc, #296]	; (8000828 <main+0x220>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
 8000702:	e023      	b.n	800074c <main+0x144>
		  }
		  else if (str[2] == '\r' || str[2] == '\n' || str[2] == '\0')
 8000704:	4b46      	ldr	r3, [pc, #280]	; (8000820 <main+0x218>)
 8000706:	789b      	ldrb	r3, [r3, #2]
 8000708:	2b0d      	cmp	r3, #13
 800070a:	d007      	beq.n	800071c <main+0x114>
 800070c:	4b44      	ldr	r3, [pc, #272]	; (8000820 <main+0x218>)
 800070e:	789b      	ldrb	r3, [r3, #2]
 8000710:	2b0a      	cmp	r3, #10
 8000712:	d003      	beq.n	800071c <main+0x114>
 8000714:	4b42      	ldr	r3, [pc, #264]	; (8000820 <main+0x218>)
 8000716:	789b      	ldrb	r3, [r3, #2]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d114      	bne.n	8000746 <main+0x13e>
		  {
			  brightness = ((((int) str[0]) - 48) * 10) + (((int) str[1]) - 48);
 800071c:	4b40      	ldr	r3, [pc, #256]	; (8000820 <main+0x218>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	3b30      	subs	r3, #48	; 0x30
 8000722:	b2db      	uxtb	r3, r3
 8000724:	461a      	mov	r2, r3
 8000726:	0092      	lsls	r2, r2, #2
 8000728:	4413      	add	r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4b3c      	ldr	r3, [pc, #240]	; (8000820 <main+0x218>)
 8000730:	785b      	ldrb	r3, [r3, #1]
 8000732:	4413      	add	r3, r2
 8000734:	b2db      	uxtb	r3, r3
 8000736:	3b30      	subs	r3, #48	; 0x30
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b3a      	ldr	r3, [pc, #232]	; (8000824 <main+0x21c>)
 800073c:	701a      	strb	r2, [r3, #0]
			  flag_err = 1;
 800073e:	4b3a      	ldr	r3, [pc, #232]	; (8000828 <main+0x220>)
 8000740:	2201      	movs	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
 8000744:	e002      	b.n	800074c <main+0x144>
		  }
		  else
		  {
			  flag_err = 2;
 8000746:	4b38      	ldr	r3, [pc, #224]	; (8000828 <main+0x220>)
 8000748:	2202      	movs	r2, #2
 800074a:	701a      	strb	r2, [r3, #0]
		  }
		  RING_Clear(&ring);
 800074c:	482f      	ldr	r0, [pc, #188]	; (800080c <main+0x204>)
 800074e:	f000 f94b 	bl	80009e8 <RING_Clear>
		  if ((string[0] == 'L' || string[0] == 'l') && (string[1] == '=') && (flag_err == 1))
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b4c      	cmp	r3, #76	; 0x4c
 8000758:	d003      	beq.n	8000762 <main+0x15a>
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b6c      	cmp	r3, #108	; 0x6c
 8000760:	d10f      	bne.n	8000782 <main+0x17a>
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	785b      	ldrb	r3, [r3, #1]
 8000766:	2b3d      	cmp	r3, #61	; 0x3d
 8000768:	d10b      	bne.n	8000782 <main+0x17a>
 800076a:	4b2f      	ldr	r3, [pc, #188]	; (8000828 <main+0x220>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d107      	bne.n	8000782 <main+0x17a>
		  {
			  sprintf((char*)tstring,"\n\rEcho: %s\n\r"
 8000772:	1d3a      	adds	r2, r7, #4
 8000774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000778:	492c      	ldr	r1, [pc, #176]	; (800082c <main+0x224>)
 800077a:	4618      	mov	r0, r3
 800077c:	f003 fb0c 	bl	8003d98 <siprintf>
 8000780:	e005      	b.n	800078e <main+0x186>
			  				  "Enter command 'L=xx' or 'l=xx'\r\n",string);
		  }
		  else
		  {
			  sprintf((char*)tstring,"\n\rEcho: Wrong command!!!\r\n"
 8000782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000786:	492a      	ldr	r1, [pc, #168]	; (8000830 <main+0x228>)
 8000788:	4618      	mov	r0, r3
 800078a:	f003 fb05 	bl	8003d98 <siprintf>
					  	  	  "Enter command 'L=xx' or 'l=xx'\r\n");
		  }
		  HAL_UART_Transmit_IT(&huart2,tstring,strlen((char*)tstring));
 800078e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fd3c 	bl	8000210 <strlen>
 8000798:	4603      	mov	r3, r0
 800079a:	b29a      	uxth	r2, r3
 800079c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a0:	4619      	mov	r1, r3
 80007a2:	481c      	ldr	r0, [pc, #112]	; (8000814 <main+0x20c>)
 80007a4:	f002 fb99 	bl	8002eda <HAL_UART_Transmit_IT>
		  flag_err = 0;
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <main+0x220>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
		  if (flag_tim == 1)
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <main+0x22c>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	f47f af68 	bne.w	8000688 <main+0x80>
		  {
			  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80007b8:	2100      	movs	r1, #0
 80007ba:	4817      	ldr	r0, [pc, #92]	; (8000818 <main+0x210>)
 80007bc:	f001 fe38 	bl	8002430 <HAL_TIM_PWM_Stop>
			  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80007c0:	2104      	movs	r1, #4
 80007c2:	4815      	ldr	r0, [pc, #84]	; (8000818 <main+0x210>)
 80007c4:	f001 fe34 	bl	8002430 <HAL_TIM_PWM_Stop>
			  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80007c8:	2108      	movs	r1, #8
 80007ca:	4813      	ldr	r0, [pc, #76]	; (8000818 <main+0x210>)
 80007cc:	f001 fe30 	bl	8002430 <HAL_TIM_PWM_Stop>
			  TIM1->CCR1 = brightness;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <main+0x21c>)
 80007d2:	781a      	ldrb	r2, [r3, #0]
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <main+0x230>)
 80007d6:	635a      	str	r2, [r3, #52]	; 0x34
		  	  TIM1->CCR2 = brightness;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <main+0x21c>)
 80007da:	781a      	ldrb	r2, [r3, #0]
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <main+0x230>)
 80007de:	639a      	str	r2, [r3, #56]	; 0x38
		  	  TIM1->CCR3 = brightness;
 80007e0:	4b10      	ldr	r3, [pc, #64]	; (8000824 <main+0x21c>)
 80007e2:	781a      	ldrb	r2, [r3, #0]
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <main+0x230>)
 80007e6:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007e8:	2100      	movs	r1, #0
 80007ea:	480b      	ldr	r0, [pc, #44]	; (8000818 <main+0x210>)
 80007ec:	f001 fd58 	bl	80022a0 <HAL_TIM_PWM_Start>
		  	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007f0:	2104      	movs	r1, #4
 80007f2:	4809      	ldr	r0, [pc, #36]	; (8000818 <main+0x210>)
 80007f4:	f001 fd54 	bl	80022a0 <HAL_TIM_PWM_Start>
		  	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80007f8:	2108      	movs	r1, #8
 80007fa:	4807      	ldr	r0, [pc, #28]	; (8000818 <main+0x210>)
 80007fc:	f001 fd50 	bl	80022a0 <HAL_TIM_PWM_Start>
		  	  flag_tim = 0;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <main+0x22c>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
	  if (Ring_GetMessage(&ring, rstring))
 8000806:	e73f      	b.n	8000688 <main+0x80>
 8000808:	200000a0 	.word	0x200000a0
 800080c:	200000b0 	.word	0x200000b0
 8000810:	08004f94 	.word	0x08004f94
 8000814:	20000108 	.word	0x20000108
 8000818:	200000c0 	.word	0x200000c0
 800081c:	08005028 	.word	0x08005028
 8000820:	20000090 	.word	0x20000090
 8000824:	20000093 	.word	0x20000093
 8000828:	2000008c 	.word	0x2000008c
 800082c:	0800502c 	.word	0x0800502c
 8000830:	0800505c 	.word	0x0800505c
 8000834:	2000008d 	.word	0x2000008d
 8000838:	40010000 	.word	0x40010000

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b094      	sub	sp, #80	; 0x50
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	2234      	movs	r2, #52	; 0x34
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f003 fa9c 	bl	8003d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b29      	ldr	r3, [pc, #164]	; (800090c <SystemClock_Config+0xd0>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	4a28      	ldr	r2, [pc, #160]	; (800090c <SystemClock_Config+0xd0>)
 800086a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086e:	6413      	str	r3, [r2, #64]	; 0x40
 8000870:	4b26      	ldr	r3, [pc, #152]	; (800090c <SystemClock_Config+0xd0>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800087c:	2300      	movs	r3, #0
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <SystemClock_Config+0xd4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000888:	4a21      	ldr	r2, [pc, #132]	; (8000910 <SystemClock_Config+0xd4>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <SystemClock_Config+0xd4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800089c:	2301      	movs	r3, #1
 800089e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a6:	2302      	movs	r3, #2
 80008a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b0:	2304      	movs	r3, #4
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008b4:	2348      	movs	r3, #72	; 0x48
 80008b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008bc:	2302      	movs	r3, #2
 80008be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 f9fb 	bl	8001cc4 <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008d4:	f000 f868 	bl	80009a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d8:	230f      	movs	r3, #15
 80008da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008dc:	2302      	movs	r3, #2
 80008de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	2102      	movs	r1, #2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 ff19 	bl	800172c <HAL_RCC_ClockConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000900:	f000 f852 	bl	80009a8 <Error_Handler>
  }
}
 8000904:	bf00      	nop
 8000906:	3750      	adds	r7, #80	; 0x50
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	// Check that interrupt caused by UART2
	if (huart == &huart2)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a1f      	ldr	r2, [pc, #124]	; (800099c <HAL_UART_RxCpltCallback+0x88>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d136      	bne.n	8000992 <HAL_UART_RxCpltCallback+0x7e>
	{
		flag_tim = 1;
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <HAL_UART_RxCpltCallback+0x8c>)
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
		// Put new character from the UART receiver data register (DR) to the ring buffer
		RING_Put(huart->Instance->DR, &ring);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	491c      	ldr	r1, [pc, #112]	; (80009a4 <HAL_UART_RxCpltCallback+0x90>)
 8000934:	4618      	mov	r0, r3
 8000936:	f000 f871 	bl	8000a1c <RING_Put>
		// Set the overrun flag if the message is longer than ring buffer can hold
		if (ring.idxOut == ring.idxIn) ring.flag.BufferOverrun = 1;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <HAL_UART_RxCpltCallback+0x90>)
 800093c:	88da      	ldrh	r2, [r3, #6]
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <HAL_UART_RxCpltCallback+0x90>)
 8000940:	889b      	ldrh	r3, [r3, #4]
 8000942:	429a      	cmp	r2, r3
 8000944:	d104      	bne.n	8000950 <HAL_UART_RxCpltCallback+0x3c>
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_UART_RxCpltCallback+0x90>)
 8000948:	7b13      	ldrb	r3, [r2, #12]
 800094a:	f043 0302 	orr.w	r3, r3, #2
 800094e:	7313      	strb	r3, [r2, #12]
		// Set the message ready flag if the end of line character has been received
		if ((ring.buffer[ring.idxIn -1] == '\r') ||
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <HAL_UART_RxCpltCallback+0x90>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <HAL_UART_RxCpltCallback+0x90>)
 8000956:	889b      	ldrh	r3, [r3, #4]
 8000958:	3b01      	subs	r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b0d      	cmp	r3, #13
 8000960:	d008      	beq.n	8000974 <HAL_UART_RxCpltCallback+0x60>
				(ring.buffer[ring.idxOut -1] == '\n'))
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_UART_RxCpltCallback+0x90>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_UART_RxCpltCallback+0x90>)
 8000968:	88db      	ldrh	r3, [r3, #6]
 800096a:	3b01      	subs	r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	781b      	ldrb	r3, [r3, #0]
		if ((ring.buffer[ring.idxIn -1] == '\r') ||
 8000970:	2b0a      	cmp	r3, #10
 8000972:	d104      	bne.n	800097e <HAL_UART_RxCpltCallback+0x6a>
			ring.flag.MessageReady = 1;
 8000974:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <HAL_UART_RxCpltCallback+0x90>)
 8000976:	7b13      	ldrb	r3, [r2, #12]
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	7313      	strb	r3, [r2, #12]
		// Receive the next character from UART in non blocking mode
		HAL_UART_Receive_IT(&huart2,&ring.buffer[ring.idxOut],1);
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_UART_RxCpltCallback+0x90>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_UART_RxCpltCallback+0x90>)
 8000984:	88d2      	ldrh	r2, [r2, #6]
 8000986:	4413      	add	r3, r2
 8000988:	2201      	movs	r2, #1
 800098a:	4619      	mov	r1, r3
 800098c:	4803      	ldr	r0, [pc, #12]	; (800099c <HAL_UART_RxCpltCallback+0x88>)
 800098e:	f002 fae9 	bl	8002f64 <HAL_UART_Receive_IT>
	}
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000108 	.word	0x20000108
 80009a0:	2000008d 	.word	0x2000008d
 80009a4:	200000b0 	.word	0x200000b0

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>

080009b2 <RING_Init>:
@param uint8_t *buf − Указатель на буфер хранения.
@param uint16_t size − Сколько элементов в буфере.
@return RING_ErrorStatus_t Результат инициализации @ref RING_ErrorStatus_t
 */
RING_ErrorStatus_t RING_Init(RING_buffer_t *ring, uint8_t *buf, uint16_t size)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b084      	sub	sp, #16
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	4613      	mov	r3, r2
 80009be:	80fb      	strh	r3, [r7, #6]
    ring->size = size;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	88fa      	ldrh	r2, [r7, #6]
 80009c4:	811a      	strh	r2, [r3, #8]
    ring->buffer = buf;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	68ba      	ldr	r2, [r7, #8]
 80009ca:	601a      	str	r2, [r3, #0]
    RING_Clear( ring );
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f000 f80b 	bl	80009e8 <RING_Clear>

    return ( ring->buffer ? RING_SUCCESS : RING_ERROR ) ;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	bf14      	ite	ne
 80009da:	2301      	movne	r3, #1
 80009dc:	2300      	moveq	r3, #0
 80009de:	b2db      	uxtb	r3, r3
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <RING_Clear>:
/**
@function RING_Clear − Очищает буфер.
@param RING_buffer_t *buf − Указатель на кольцевой буфер.
 */
void RING_Clear(RING_buffer_t* buf)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
    buf->idxIn = 0;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	809a      	strh	r2, [r3, #4]
    buf->idxOut = 0;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2200      	movs	r2, #0
 80009fa:	80da      	strh	r2, [r3, #6]
	buf->flag.BufferOverrun = 0;
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	7b13      	ldrb	r3, [r2, #12]
 8000a00:	f36f 0341 	bfc	r3, #1, #1
 8000a04:	7313      	strb	r3, [r2, #12]
	buf->flag.MessageReady = 0;
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	7b13      	ldrb	r3, [r2, #12]
 8000a0a:	f36f 0300 	bfc	r3, #0, #1
 8000a0e:	7313      	strb	r3, [r2, #12]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <RING_Put>:
@function RING_Put − Загружает элемент в буфер.
@param uint8_t symbol − Элемент для загрузки в буфер.
@param RING_buffer_t *buf − Указатель на кольцевой буфер.
 */
void RING_Put(uint8_t symbol, RING_buffer_t* buf)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	71fb      	strb	r3, [r7, #7]
    buf->buffer[buf->idxOut++] = symbol;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	88db      	ldrh	r3, [r3, #6]
 8000a30:	1c59      	adds	r1, r3, #1
 8000a32:	b288      	uxth	r0, r1
 8000a34:	6839      	ldr	r1, [r7, #0]
 8000a36:	80c8      	strh	r0, [r1, #6]
 8000a38:	4413      	add	r3, r2
 8000a3a:	79fa      	ldrb	r2, [r7, #7]
 8000a3c:	701a      	strb	r2, [r3, #0]
    if (buf->idxOut >= buf->size) buf->idxOut = 0;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	88da      	ldrh	r2, [r3, #6]
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	891b      	ldrh	r3, [r3, #8]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d302      	bcc.n	8000a50 <RING_Put+0x34>
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	80da      	strh	r2, [r3, #6]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <RING_Pop>:
@function RING_Pop − Получает из буфера байт.
@param RING_buffer_t *buf − Указатель на кольцевой буфер.
@return uint8_t Значение полученого элемента.
 */
uint8_t RING_Pop(RING_buffer_t *buf)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
    uint8_t retval = buf->buffer[buf->idxIn++];
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	889b      	ldrh	r3, [r3, #4]
 8000a6c:	1c59      	adds	r1, r3, #1
 8000a6e:	b288      	uxth	r0, r1
 8000a70:	6879      	ldr	r1, [r7, #4]
 8000a72:	8088      	strh	r0, [r1, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	73fb      	strb	r3, [r7, #15]
    if (buf->idxIn >= buf->size) buf->idxIn = 0;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	889a      	ldrh	r2, [r3, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	891b      	ldrh	r3, [r3, #8]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d302      	bcc.n	8000a8c <RING_Pop+0x30>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	809a      	strh	r2, [r3, #4]
    return retval;
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <Ring_GetMessage>:
@function Ring_GetMessage − Reads full message from the ring buffer and clears appropriate flags.
@param RING_buffer_t *ringbuf − Указатель на кольцевой буфер.
@param uint8_t *string − Указатель на строчку.
 */
uint8_t Ring_GetMessage(RING_buffer_t *ringbuf, uint8_t * string)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b084      	sub	sp, #16
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	6039      	str	r1, [r7, #0]
	uint16_t char_count = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	81fb      	strh	r3, [r7, #14]
	// Check if the message has been received
	if (ringbuf->flag.MessageReady)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	7b1b      	ldrb	r3, [r3, #12]
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d049      	beq.n	8000b4a <Ring_GetMessage+0xb0>
		{
			if (ringbuf->flag.BufferOverrun)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	7b1b      	ldrb	r3, [r3, #12]
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d016      	beq.n	8000af2 <Ring_GetMessage+0x58>
				{
				ringbuf->idxIn = ringbuf->idxOut;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	88da      	ldrh	r2, [r3, #6]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	809a      	strh	r2, [r3, #4]
				ringbuf->flag.BufferOverrun = 0;
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	7b13      	ldrb	r3, [r2, #12]
 8000ad0:	f36f 0341 	bfc	r3, #1, #1
 8000ad4:	7313      	strb	r3, [r2, #12]
				}
			while ((ringbuf->buffer[ringbuf->idxIn] != '\r') &&
 8000ad6:	e00c      	b.n	8000af2 <Ring_GetMessage+0x58>
						 (ringbuf->buffer[ringbuf->idxIn] != '\n') &&
						 (ringbuf->size != char_count - 1))
				{
					*string =  RING_Pop(ringbuf);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ffbf 	bl	8000a5c <RING_Pop>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	701a      	strb	r2, [r3, #0]
					string++;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	603b      	str	r3, [r7, #0]
					char_count++;
 8000aec:	89fb      	ldrh	r3, [r7, #14]
 8000aee:	3301      	adds	r3, #1
 8000af0:	81fb      	strh	r3, [r7, #14]
			while ((ringbuf->buffer[ringbuf->idxIn] != '\r') &&
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	8892      	ldrh	r2, [r2, #4]
 8000afa:	4413      	add	r3, r2
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b0d      	cmp	r3, #13
 8000b00:	d00e      	beq.n	8000b20 <Ring_GetMessage+0x86>
						 (ringbuf->buffer[ringbuf->idxIn] != '\n') &&
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	8892      	ldrh	r2, [r2, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	781b      	ldrb	r3, [r3, #0]
			while ((ringbuf->buffer[ringbuf->idxIn] != '\r') &&
 8000b0e:	2b0a      	cmp	r3, #10
 8000b10:	d006      	beq.n	8000b20 <Ring_GetMessage+0x86>
						 (ringbuf->size != char_count - 1))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	891b      	ldrh	r3, [r3, #8]
 8000b16:	461a      	mov	r2, r3
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	3b01      	subs	r3, #1
						 (ringbuf->buffer[ringbuf->idxIn] != '\n') &&
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d1db      	bne.n	8000ad8 <Ring_GetMessage+0x3e>
				}
			*string =  RING_Pop(ringbuf);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff ff9b 	bl	8000a5c <RING_Pop>
 8000b26:	4603      	mov	r3, r0
 8000b28:	461a      	mov	r2, r3
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	701a      	strb	r2, [r3, #0]
			string++;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	603b      	str	r3, [r7, #0]
			char_count++;
 8000b34:	89fb      	ldrh	r3, [r7, #14]
 8000b36:	3301      	adds	r3, #1
 8000b38:	81fb      	strh	r3, [r7, #14]
			*string = '\0';
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
			ringbuf->flag.MessageReady = 0;
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	7b13      	ldrb	r3, [r2, #12]
 8000b44:	f36f 0300 	bfc	r3, #0, #1
 8000b48:	7313      	strb	r3, [r2, #12]
		}
	return char_count;
 8000b4a:	89fb      	ldrh	r3, [r7, #14]
 8000b4c:	b2db      	uxtb	r3, r3
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b96:	2007      	movs	r0, #7
 8000b98:	f000 fb60 	bl	800125c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 fa42 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <USART2_IRQHandler+0x10>)
 8000c02:	f002 f9df 	bl	8002fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000108 	.word	0x20000108

08000c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c18:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <_sbrk+0x5c>)
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <_sbrk+0x60>)
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <_sbrk+0x64>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <_sbrk+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d207      	bcs.n	8000c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c40:	f003 f878 	bl	8003d34 <__errno>
 8000c44:	4603      	mov	r3, r0
 8000c46:	220c      	movs	r2, #12
 8000c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	e009      	b.n	8000c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <_sbrk+0x64>)
 8000c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20020000 	.word	0x20020000
 8000c70:	00000400 	.word	0x00000400
 8000c74:	20000094 	.word	0x20000094
 8000c78:	20000160 	.word	0x20000160

08000c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <SystemInit+0x20>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <SystemInit+0x20>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b092      	sub	sp, #72	; 0x48
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
 8000cc0:	615a      	str	r2, [r3, #20]
 8000cc2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f003 f85c 	bl	8003d88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cd0:	4b3f      	ldr	r3, [pc, #252]	; (8000dd0 <MX_TIM1_Init+0x130>)
 8000cd2:	4a40      	ldr	r2, [pc, #256]	; (8000dd4 <MX_TIM1_Init+0x134>)
 8000cd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000cd6:	4b3e      	ldr	r3, [pc, #248]	; (8000dd0 <MX_TIM1_Init+0x130>)
 8000cd8:	2247      	movs	r2, #71	; 0x47
 8000cda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cdc:	4b3c      	ldr	r3, [pc, #240]	; (8000dd0 <MX_TIM1_Init+0x130>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000ce2:	4b3b      	ldr	r3, [pc, #236]	; (8000dd0 <MX_TIM1_Init+0x130>)
 8000ce4:	2263      	movs	r2, #99	; 0x63
 8000ce6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce8:	4b39      	ldr	r3, [pc, #228]	; (8000dd0 <MX_TIM1_Init+0x130>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cee:	4b38      	ldr	r3, [pc, #224]	; (8000dd0 <MX_TIM1_Init+0x130>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf4:	4b36      	ldr	r3, [pc, #216]	; (8000dd0 <MX_TIM1_Init+0x130>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cfa:	4835      	ldr	r0, [pc, #212]	; (8000dd0 <MX_TIM1_Init+0x130>)
 8000cfc:	f001 fa80 	bl	8002200 <HAL_TIM_PWM_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000d06:	f7ff fe4f 	bl	80009a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d16:	4619      	mov	r1, r3
 8000d18:	482d      	ldr	r0, [pc, #180]	; (8000dd0 <MX_TIM1_Init+0x130>)
 8000d1a:	f001 ff31 	bl	8002b80 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000d24:	f7ff fe40 	bl	80009a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d28:	2360      	movs	r3, #96	; 0x60
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d34:	2300      	movs	r3, #0
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d40:	2300      	movs	r3, #0
 8000d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4820      	ldr	r0, [pc, #128]	; (8000dd0 <MX_TIM1_Init+0x130>)
 8000d4e:	f001 fbdf 	bl	8002510 <HAL_TIM_PWM_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000d58:	f7ff fe26 	bl	80009a8 <Error_Handler>
  }
  sConfigOC.Pulse = 40;
 8000d5c:	2328      	movs	r3, #40	; 0x28
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	2204      	movs	r2, #4
 8000d66:	4619      	mov	r1, r3
 8000d68:	4819      	ldr	r0, [pc, #100]	; (8000dd0 <MX_TIM1_Init+0x130>)
 8000d6a:	f001 fbd1 	bl	8002510 <HAL_TIM_PWM_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000d74:	f7ff fe18 	bl	80009a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	2208      	movs	r2, #8
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <MX_TIM1_Init+0x130>)
 8000d82:	f001 fbc5 	bl	8002510 <HAL_TIM_PWM_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000d8c:	f7ff fe0c 	bl	80009a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	4619      	mov	r1, r3
 8000db2:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <MX_TIM1_Init+0x130>)
 8000db4:	f001 ff60 	bl	8002c78 <HAL_TIMEx_ConfigBreakDeadTime>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8000dbe:	f7ff fdf3 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dc2:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <MX_TIM1_Init+0x130>)
 8000dc4:	f000 f82a 	bl	8000e1c <HAL_TIM_MspPostInit>

}
 8000dc8:	bf00      	nop
 8000dca:	3748      	adds	r7, #72	; 0x48
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200000c0 	.word	0x200000c0
 8000dd4:	40010000 	.word	0x40010000

08000dd8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <HAL_TIM_PWM_MspInit+0x3c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d10d      	bne.n	8000e06 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_TIM_PWM_MspInit+0x40>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <HAL_TIM_PWM_MspInit+0x40>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfa:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <HAL_TIM_PWM_MspInit+0x40>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e06:	bf00      	nop
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40010000 	.word	0x40010000
 8000e18:	40023800 	.word	0x40023800

08000e1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <HAL_TIM_MspPostInit+0x68>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d11e      	bne.n	8000e7c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_TIM_MspPostInit+0x6c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <HAL_TIM_MspPostInit+0x6c>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_TIM_MspPostInit+0x6c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000e5a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000e5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	4619      	mov	r1, r3
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <HAL_TIM_MspPostInit+0x70>)
 8000e78:	f000 fac4 	bl	8001404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40010000 	.word	0x40010000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000

08000e90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <MX_USART2_UART_Init+0x50>)
 8000e98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000ec2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ec6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ec8:	4804      	ldr	r0, [pc, #16]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000eca:	f001 ff27 	bl	8002d1c <HAL_UART_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000ed4:	f7ff fd68 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000108 	.word	0x20000108
 8000ee0:	40004400 	.word	0x40004400

08000ee4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <HAL_UART_MspInit+0x94>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d133      	bne.n	8000f6e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <HAL_UART_MspInit+0x98>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a1b      	ldr	r2, [pc, #108]	; (8000f7c <HAL_UART_MspInit+0x98>)
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_UART_MspInit+0x98>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_UART_MspInit+0x98>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <HAL_UART_MspInit+0x98>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_UART_MspInit+0x98>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f3e:	230c      	movs	r3, #12
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4809      	ldr	r0, [pc, #36]	; (8000f80 <HAL_UART_MspInit+0x9c>)
 8000f5a:	f000 fa53 	bl	8001404 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	2026      	movs	r0, #38	; 0x26
 8000f64:	f000 f985 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f68:	2026      	movs	r0, #38	; 0x26
 8000f6a:	f000 f99e 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40004400 	.word	0x40004400
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020000 	.word	0x40020000

08000f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f8a:	490e      	ldr	r1, [pc, #56]	; (8000fc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fa0:	4c0b      	ldr	r4, [pc, #44]	; (8000fd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fae:	f7ff fe65 	bl	8000c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fb2:	f002 fec5 	bl	8003d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb6:	f7ff fb27 	bl	8000608 <main>
  bx  lr    
 8000fba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fc8:	0800527c 	.word	0x0800527c
  ldr r2, =_sbss
 8000fcc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fd0:	20000160 	.word	0x20000160

08000fd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC_IRQHandler>
	...

08000fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <HAL_Init+0x40>)
 8000fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_Init+0x40>)
 8000fee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_Init+0x40>)
 8000ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001000:	2003      	movs	r0, #3
 8001002:	f000 f92b 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 f808 	bl	800101c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100c:	f7ff fda4 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023c00 	.word	0x40023c00

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x54>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x58>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	fbb3 f3f1 	udiv	r3, r3, r1
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f943 	bl	80012c6 <HAL_SYSTICK_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e00e      	b.n	8001068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d80a      	bhi.n	8001066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f000 f90b 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <HAL_InitTick+0x5c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000000 	.word	0x20000000
 8001074:	20000008 	.word	0x20000008
 8001078:	20000004 	.word	0x20000004

0800107c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x20>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <HAL_IncTick+0x24>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008
 80010a0:	2000014c 	.word	0x2000014c

080010a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_GetTick+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	2000014c 	.word	0x2000014c

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db0b      	blt.n	800114a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 021f 	and.w	r2, r3, #31
 8001138:	4907      	ldr	r1, [pc, #28]	; (8001158 <__NVIC_EnableIRQ+0x38>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2001      	movs	r0, #1
 8001142:	fa00 f202 	lsl.w	r2, r0, r2
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f7ff ff8e 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff29 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff3e 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff8e 	bl	80011b0 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5d 	bl	800115c <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff31 	bl	8001120 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa2 	bl	8001218 <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012ec:	f7ff feda 	bl	80010a4 <HAL_GetTick>
 80012f0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d008      	beq.n	8001310 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e052      	b.n	80013b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0216 	bic.w	r2, r2, #22
 800131e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	695a      	ldr	r2, [r3, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800132e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	2b00      	cmp	r3, #0
 8001336:	d103      	bne.n	8001340 <HAL_DMA_Abort+0x62>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800133c:	2b00      	cmp	r3, #0
 800133e:	d007      	beq.n	8001350 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0208 	bic.w	r2, r2, #8
 800134e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001360:	e013      	b.n	800138a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001362:	f7ff fe9f 	bl	80010a4 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b05      	cmp	r3, #5
 800136e:	d90c      	bls.n	800138a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2220      	movs	r2, #32
 8001374:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2203      	movs	r2, #3
 800137a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e015      	b.n	80013b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1e4      	bne.n	8001362 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139c:	223f      	movs	r2, #63	; 0x3f
 800139e:	409a      	lsls	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d004      	beq.n	80013dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2280      	movs	r2, #128	; 0x80
 80013d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e00c      	b.n	80013f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2205      	movs	r2, #5
 80013e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0201 	bic.w	r2, r2, #1
 80013f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	e165      	b.n	80016ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	429a      	cmp	r2, r3
 800143a:	f040 8154 	bne.w	80016e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b01      	cmp	r3, #1
 8001448:	d005      	beq.n	8001456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	2b02      	cmp	r3, #2
 8001454:	d130      	bne.n	80014b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800148c:	2201      	movs	r2, #1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	091b      	lsrs	r3, r3, #4
 80014a2:	f003 0201 	and.w	r2, r3, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d017      	beq.n	80014f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d123      	bne.n	8001548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	08da      	lsrs	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3208      	adds	r2, #8
 8001508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	220f      	movs	r2, #15
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	08da      	lsrs	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3208      	adds	r2, #8
 8001542:	69b9      	ldr	r1, [r7, #24]
 8001544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0203 	and.w	r2, r3, #3
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80ae 	beq.w	80016e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b5d      	ldr	r3, [pc, #372]	; (8001704 <HAL_GPIO_Init+0x300>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a5c      	ldr	r2, [pc, #368]	; (8001704 <HAL_GPIO_Init+0x300>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <HAL_GPIO_Init+0x300>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015a6:	4a58      	ldr	r2, [pc, #352]	; (8001708 <HAL_GPIO_Init+0x304>)
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	3302      	adds	r3, #2
 80015ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	220f      	movs	r2, #15
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4f      	ldr	r2, [pc, #316]	; (800170c <HAL_GPIO_Init+0x308>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d025      	beq.n	800161e <HAL_GPIO_Init+0x21a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4e      	ldr	r2, [pc, #312]	; (8001710 <HAL_GPIO_Init+0x30c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d01f      	beq.n	800161a <HAL_GPIO_Init+0x216>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4d      	ldr	r2, [pc, #308]	; (8001714 <HAL_GPIO_Init+0x310>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d019      	beq.n	8001616 <HAL_GPIO_Init+0x212>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4c      	ldr	r2, [pc, #304]	; (8001718 <HAL_GPIO_Init+0x314>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d013      	beq.n	8001612 <HAL_GPIO_Init+0x20e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4b      	ldr	r2, [pc, #300]	; (800171c <HAL_GPIO_Init+0x318>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d00d      	beq.n	800160e <HAL_GPIO_Init+0x20a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4a      	ldr	r2, [pc, #296]	; (8001720 <HAL_GPIO_Init+0x31c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d007      	beq.n	800160a <HAL_GPIO_Init+0x206>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a49      	ldr	r2, [pc, #292]	; (8001724 <HAL_GPIO_Init+0x320>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d101      	bne.n	8001606 <HAL_GPIO_Init+0x202>
 8001602:	2306      	movs	r3, #6
 8001604:	e00c      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 8001606:	2307      	movs	r3, #7
 8001608:	e00a      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 800160a:	2305      	movs	r3, #5
 800160c:	e008      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 800160e:	2304      	movs	r3, #4
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 8001612:	2303      	movs	r3, #3
 8001614:	e004      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 8001616:	2302      	movs	r3, #2
 8001618:	e002      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 800161e:	2300      	movs	r3, #0
 8001620:	69fa      	ldr	r2, [r7, #28]
 8001622:	f002 0203 	and.w	r2, r2, #3
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	4093      	lsls	r3, r2
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001630:	4935      	ldr	r1, [pc, #212]	; (8001708 <HAL_GPIO_Init+0x304>)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800163e:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <HAL_GPIO_Init+0x324>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001662:	4a31      	ldr	r2, [pc, #196]	; (8001728 <HAL_GPIO_Init+0x324>)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001668:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <HAL_GPIO_Init+0x324>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800168c:	4a26      	ldr	r2, [pc, #152]	; (8001728 <HAL_GPIO_Init+0x324>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <HAL_GPIO_Init+0x324>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b6:	4a1c      	ldr	r2, [pc, #112]	; (8001728 <HAL_GPIO_Init+0x324>)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <HAL_GPIO_Init+0x324>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e0:	4a11      	ldr	r2, [pc, #68]	; (8001728 <HAL_GPIO_Init+0x324>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3301      	adds	r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b0f      	cmp	r3, #15
 80016f0:	f67f ae96 	bls.w	8001420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3724      	adds	r7, #36	; 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800
 8001708:	40013800 	.word	0x40013800
 800170c:	40020000 	.word	0x40020000
 8001710:	40020400 	.word	0x40020400
 8001714:	40020800 	.word	0x40020800
 8001718:	40020c00 	.word	0x40020c00
 800171c:	40021000 	.word	0x40021000
 8001720:	40021400 	.word	0x40021400
 8001724:	40021800 	.word	0x40021800
 8001728:	40013c00 	.word	0x40013c00

0800172c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0cc      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001740:	4b68      	ldr	r3, [pc, #416]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d90c      	bls.n	8001768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b63      	ldr	r3, [pc, #396]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0b8      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d020      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001780:	4b59      	ldr	r3, [pc, #356]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a58      	ldr	r2, [pc, #352]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800178a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001798:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a52      	ldr	r2, [pc, #328]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a4:	4b50      	ldr	r3, [pc, #320]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	494d      	ldr	r1, [pc, #308]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d044      	beq.n	800184c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d119      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e07f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d003      	beq.n	80017ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e067      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180a:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f023 0203 	bic.w	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4934      	ldr	r1, [pc, #208]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	4313      	orrs	r3, r2
 800181a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800181c:	f7ff fc42 	bl	80010a4 <HAL_GetTick>
 8001820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	e00a      	b.n	800183a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f7ff fc3e 	bl	80010a4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e04f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 020c 	and.w	r2, r3, #12
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d1eb      	bne.n	8001824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d20c      	bcs.n	8001874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d001      	beq.n	8001874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e032      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4916      	ldr	r1, [pc, #88]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d009      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	490e      	ldr	r1, [pc, #56]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b2:	f000 f855 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 80018b6:	4602      	mov	r2, r0
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	490a      	ldr	r1, [pc, #40]	; (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	5ccb      	ldrb	r3, [r1, r3]
 80018c6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fba2 	bl	800101c <HAL_InitTick>

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00
 80018e8:	40023800 	.word	0x40023800
 80018ec:	080050a4 	.word	0x080050a4
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <HAL_RCC_GetHCLKFreq+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000000 	.word	0x20000000

08001910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001914:	f7ff fff0 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001918:	4602      	mov	r2, r0
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	0a9b      	lsrs	r3, r3, #10
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4903      	ldr	r1, [pc, #12]	; (8001934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001926:	5ccb      	ldrb	r3, [r1, r3]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	080050b4 	.word	0x080050b4

08001938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800193c:	f7ff ffdc 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001940:	4602      	mov	r2, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	0b5b      	lsrs	r3, r3, #13
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4903      	ldr	r1, [pc, #12]	; (800195c <HAL_RCC_GetPCLK2Freq+0x24>)
 800194e:	5ccb      	ldrb	r3, [r1, r3]
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	080050b4 	.word	0x080050b4

08001960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001964:	b088      	sub	sp, #32
 8001966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800197c:	4bce      	ldr	r3, [pc, #824]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x358>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b0c      	cmp	r3, #12
 8001986:	f200 818d 	bhi.w	8001ca4 <HAL_RCC_GetSysClockFreq+0x344>
 800198a:	a201      	add	r2, pc, #4	; (adr r2, 8001990 <HAL_RCC_GetSysClockFreq+0x30>)
 800198c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001990:	080019c5 	.word	0x080019c5
 8001994:	08001ca5 	.word	0x08001ca5
 8001998:	08001ca5 	.word	0x08001ca5
 800199c:	08001ca5 	.word	0x08001ca5
 80019a0:	080019cb 	.word	0x080019cb
 80019a4:	08001ca5 	.word	0x08001ca5
 80019a8:	08001ca5 	.word	0x08001ca5
 80019ac:	08001ca5 	.word	0x08001ca5
 80019b0:	080019d1 	.word	0x080019d1
 80019b4:	08001ca5 	.word	0x08001ca5
 80019b8:	08001ca5 	.word	0x08001ca5
 80019bc:	08001ca5 	.word	0x08001ca5
 80019c0:	08001b45 	.word	0x08001b45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c4:	4bbd      	ldr	r3, [pc, #756]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x35c>)
 80019c6:	61bb      	str	r3, [r7, #24]
       break;
 80019c8:	e16f      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ca:	4bbd      	ldr	r3, [pc, #756]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x360>)
 80019cc:	61bb      	str	r3, [r7, #24]
      break;
 80019ce:	e16c      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d0:	4bb9      	ldr	r3, [pc, #740]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x358>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019d8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019da:	4bb7      	ldr	r3, [pc, #732]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x358>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d053      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e6:	4bb4      	ldr	r3, [pc, #720]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x358>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	099b      	lsrs	r3, r3, #6
 80019ec:	461a      	mov	r2, r3
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019f6:	f04f 0100 	mov.w	r1, #0
 80019fa:	ea02 0400 	and.w	r4, r2, r0
 80019fe:	603c      	str	r4, [r7, #0]
 8001a00:	400b      	ands	r3, r1
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a08:	4620      	mov	r0, r4
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	014b      	lsls	r3, r1, #5
 8001a16:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a1a:	0142      	lsls	r2, r0, #5
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4623      	mov	r3, r4
 8001a22:	1ac0      	subs	r0, r0, r3
 8001a24:	462b      	mov	r3, r5
 8001a26:	eb61 0103 	sbc.w	r1, r1, r3
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	018b      	lsls	r3, r1, #6
 8001a34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a38:	0182      	lsls	r2, r0, #6
 8001a3a:	1a12      	subs	r2, r2, r0
 8001a3c:	eb63 0301 	sbc.w	r3, r3, r1
 8001a40:	f04f 0000 	mov.w	r0, #0
 8001a44:	f04f 0100 	mov.w	r1, #0
 8001a48:	00d9      	lsls	r1, r3, #3
 8001a4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a4e:	00d0      	lsls	r0, r2, #3
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4621      	mov	r1, r4
 8001a56:	1852      	adds	r2, r2, r1
 8001a58:	4629      	mov	r1, r5
 8001a5a:	eb43 0101 	adc.w	r1, r3, r1
 8001a5e:	460b      	mov	r3, r1
 8001a60:	f04f 0000 	mov.w	r0, #0
 8001a64:	f04f 0100 	mov.w	r1, #0
 8001a68:	0259      	lsls	r1, r3, #9
 8001a6a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a6e:	0250      	lsls	r0, r2, #9
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	f7fe fc1e 	bl	80002c0 <__aeabi_uldivmod>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4613      	mov	r3, r2
 8001a8a:	61fb      	str	r3, [r7, #28]
 8001a8c:	e04c      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a8e:	4b8a      	ldr	r3, [pc, #552]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	099b      	lsrs	r3, r3, #6
 8001a94:	461a      	mov	r2, r3
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a9e:	f04f 0100 	mov.w	r1, #0
 8001aa2:	ea02 0a00 	and.w	sl, r2, r0
 8001aa6:	ea03 0b01 	and.w	fp, r3, r1
 8001aaa:	4650      	mov	r0, sl
 8001aac:	4659      	mov	r1, fp
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	014b      	lsls	r3, r1, #5
 8001ab8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001abc:	0142      	lsls	r2, r0, #5
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	ebb0 000a 	subs.w	r0, r0, sl
 8001ac6:	eb61 010b 	sbc.w	r1, r1, fp
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	018b      	lsls	r3, r1, #6
 8001ad4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ad8:	0182      	lsls	r2, r0, #6
 8001ada:	1a12      	subs	r2, r2, r0
 8001adc:	eb63 0301 	sbc.w	r3, r3, r1
 8001ae0:	f04f 0000 	mov.w	r0, #0
 8001ae4:	f04f 0100 	mov.w	r1, #0
 8001ae8:	00d9      	lsls	r1, r3, #3
 8001aea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aee:	00d0      	lsls	r0, r2, #3
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	eb12 020a 	adds.w	r2, r2, sl
 8001af8:	eb43 030b 	adc.w	r3, r3, fp
 8001afc:	f04f 0000 	mov.w	r0, #0
 8001b00:	f04f 0100 	mov.w	r1, #0
 8001b04:	0299      	lsls	r1, r3, #10
 8001b06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b0a:	0290      	lsls	r0, r2, #10
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	461a      	mov	r2, r3
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	f7fe fbd0 	bl	80002c0 <__aeabi_uldivmod>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4613      	mov	r3, r2
 8001b26:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b28:	4b63      	ldr	r3, [pc, #396]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	0c1b      	lsrs	r3, r3, #16
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	3301      	adds	r3, #1
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b40:	61bb      	str	r3, [r7, #24]
      break;
 8001b42:	e0b2      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b44:	4b5c      	ldr	r3, [pc, #368]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b4c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b4e:	4b5a      	ldr	r3, [pc, #360]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d04d      	beq.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5a:	4b57      	ldr	r3, [pc, #348]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	099b      	lsrs	r3, r3, #6
 8001b60:	461a      	mov	r2, r3
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b6a:	f04f 0100 	mov.w	r1, #0
 8001b6e:	ea02 0800 	and.w	r8, r2, r0
 8001b72:	ea03 0901 	and.w	r9, r3, r1
 8001b76:	4640      	mov	r0, r8
 8001b78:	4649      	mov	r1, r9
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	014b      	lsls	r3, r1, #5
 8001b84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b88:	0142      	lsls	r2, r0, #5
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	ebb0 0008 	subs.w	r0, r0, r8
 8001b92:	eb61 0109 	sbc.w	r1, r1, r9
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	018b      	lsls	r3, r1, #6
 8001ba0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ba4:	0182      	lsls	r2, r0, #6
 8001ba6:	1a12      	subs	r2, r2, r0
 8001ba8:	eb63 0301 	sbc.w	r3, r3, r1
 8001bac:	f04f 0000 	mov.w	r0, #0
 8001bb0:	f04f 0100 	mov.w	r1, #0
 8001bb4:	00d9      	lsls	r1, r3, #3
 8001bb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bba:	00d0      	lsls	r0, r2, #3
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	eb12 0208 	adds.w	r2, r2, r8
 8001bc4:	eb43 0309 	adc.w	r3, r3, r9
 8001bc8:	f04f 0000 	mov.w	r0, #0
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	0259      	lsls	r1, r3, #9
 8001bd2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001bd6:	0250      	lsls	r0, r2, #9
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	461a      	mov	r2, r3
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	f7fe fb6a 	bl	80002c0 <__aeabi_uldivmod>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	61fb      	str	r3, [r7, #28]
 8001bf4:	e04a      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf6:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	099b      	lsrs	r3, r3, #6
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c06:	f04f 0100 	mov.w	r1, #0
 8001c0a:	ea02 0400 	and.w	r4, r2, r0
 8001c0e:	ea03 0501 	and.w	r5, r3, r1
 8001c12:	4620      	mov	r0, r4
 8001c14:	4629      	mov	r1, r5
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	014b      	lsls	r3, r1, #5
 8001c20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c24:	0142      	lsls	r2, r0, #5
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	1b00      	subs	r0, r0, r4
 8001c2c:	eb61 0105 	sbc.w	r1, r1, r5
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	018b      	lsls	r3, r1, #6
 8001c3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c3e:	0182      	lsls	r2, r0, #6
 8001c40:	1a12      	subs	r2, r2, r0
 8001c42:	eb63 0301 	sbc.w	r3, r3, r1
 8001c46:	f04f 0000 	mov.w	r0, #0
 8001c4a:	f04f 0100 	mov.w	r1, #0
 8001c4e:	00d9      	lsls	r1, r3, #3
 8001c50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c54:	00d0      	lsls	r0, r2, #3
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	1912      	adds	r2, r2, r4
 8001c5c:	eb45 0303 	adc.w	r3, r5, r3
 8001c60:	f04f 0000 	mov.w	r0, #0
 8001c64:	f04f 0100 	mov.w	r1, #0
 8001c68:	0299      	lsls	r1, r3, #10
 8001c6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c6e:	0290      	lsls	r0, r2, #10
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	f7fe fb1e 	bl	80002c0 <__aeabi_uldivmod>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4613      	mov	r3, r2
 8001c8a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	0f1b      	lsrs	r3, r3, #28
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca0:	61bb      	str	r3, [r7, #24]
      break;
 8001ca2:	e002      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x35c>)
 8001ca6:	61bb      	str	r3, [r7, #24]
      break;
 8001ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001caa:	69bb      	ldr	r3, [r7, #24]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3720      	adds	r7, #32
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	00f42400 	.word	0x00f42400
 8001cc0:	007a1200 	.word	0x007a1200

08001cc4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e28d      	b.n	80021f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 8083 	beq.w	8001dea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ce4:	4b94      	ldr	r3, [pc, #592]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 030c 	and.w	r3, r3, #12
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d019      	beq.n	8001d24 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001cf0:	4b91      	ldr	r3, [pc, #580]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001cfc:	4b8e      	ldr	r3, [pc, #568]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d08:	d00c      	beq.n	8001d24 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d0a:	4b8b      	ldr	r3, [pc, #556]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d112      	bne.n	8001d3c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d16:	4b88      	ldr	r3, [pc, #544]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d22:	d10b      	bne.n	8001d3c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	4b84      	ldr	r3, [pc, #528]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d05b      	beq.n	8001de8 <HAL_RCC_OscConfig+0x124>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d157      	bne.n	8001de8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e25a      	b.n	80021f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d44:	d106      	bne.n	8001d54 <HAL_RCC_OscConfig+0x90>
 8001d46:	4b7c      	ldr	r3, [pc, #496]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a7b      	ldr	r2, [pc, #492]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e01d      	b.n	8001d90 <HAL_RCC_OscConfig+0xcc>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0xb4>
 8001d5e:	4b76      	ldr	r3, [pc, #472]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a75      	ldr	r2, [pc, #468]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b73      	ldr	r3, [pc, #460]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a72      	ldr	r2, [pc, #456]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e00b      	b.n	8001d90 <HAL_RCC_OscConfig+0xcc>
 8001d78:	4b6f      	ldr	r3, [pc, #444]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a6e      	ldr	r2, [pc, #440]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4b6c      	ldr	r3, [pc, #432]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a6b      	ldr	r2, [pc, #428]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d013      	beq.n	8001dc0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff f984 	bl	80010a4 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff f980 	bl	80010a4 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e21f      	b.n	80021f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	4b61      	ldr	r3, [pc, #388]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0xdc>
 8001dbe:	e014      	b.n	8001dea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f970 	bl	80010a4 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff f96c 	bl	80010a4 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e20b      	b.n	80021f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dda:	4b57      	ldr	r3, [pc, #348]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x104>
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d06f      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001df6:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d017      	beq.n	8001e32 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e02:	4b4d      	ldr	r3, [pc, #308]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d105      	bne.n	8001e1a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e0e:	4b4a      	ldr	r3, [pc, #296]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1a:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e22:	2b0c      	cmp	r3, #12
 8001e24:	d11c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e26:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d116      	bne.n	8001e60 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e32:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <HAL_RCC_OscConfig+0x186>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e1d3      	b.n	80021f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4a:	4b3b      	ldr	r3, [pc, #236]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4937      	ldr	r1, [pc, #220]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5e:	e03a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d020      	beq.n	8001eaa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e68:	4b34      	ldr	r3, [pc, #208]	; (8001f3c <HAL_RCC_OscConfig+0x278>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7ff f919 	bl	80010a4 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e76:	f7ff f915 	bl	80010a4 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e1b4      	b.n	80021f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e88:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4925      	ldr	r1, [pc, #148]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]
 8001ea8:	e015      	b.n	8001ed6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_RCC_OscConfig+0x278>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f8f8 	bl	80010a4 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb8:	f7ff f8f4 	bl	80010a4 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e193      	b.n	80021f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d036      	beq.n	8001f50 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d016      	beq.n	8001f18 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef0:	f7ff f8d8 	bl	80010a4 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef8:	f7ff f8d4 	bl	80010a4 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e173      	b.n	80021f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x234>
 8001f16:	e01b      	b.n	8001f50 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1e:	f7ff f8c1 	bl	80010a4 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f24:	e00e      	b.n	8001f44 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f26:	f7ff f8bd 	bl	80010a4 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d907      	bls.n	8001f44 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e15c      	b.n	80021f2 <HAL_RCC_OscConfig+0x52e>
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	42470000 	.word	0x42470000
 8001f40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f44:	4b8a      	ldr	r3, [pc, #552]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8001f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1ea      	bne.n	8001f26 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8097 	beq.w	800208c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f62:	4b83      	ldr	r3, [pc, #524]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10f      	bne.n	8001f8e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	4b7f      	ldr	r3, [pc, #508]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	4a7e      	ldr	r2, [pc, #504]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7e:	4b7c      	ldr	r3, [pc, #496]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8e:	4b79      	ldr	r3, [pc, #484]	; (8002174 <HAL_RCC_OscConfig+0x4b0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f9a:	4b76      	ldr	r3, [pc, #472]	; (8002174 <HAL_RCC_OscConfig+0x4b0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a75      	ldr	r2, [pc, #468]	; (8002174 <HAL_RCC_OscConfig+0x4b0>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f87d 	bl	80010a4 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7ff f879 	bl	80010a4 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e118      	b.n	80021f2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc0:	4b6c      	ldr	r3, [pc, #432]	; (8002174 <HAL_RCC_OscConfig+0x4b0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x31e>
 8001fd4:	4b66      	ldr	r3, [pc, #408]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd8:	4a65      	ldr	r2, [pc, #404]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe0:	e01c      	b.n	800201c <HAL_RCC_OscConfig+0x358>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b05      	cmp	r3, #5
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0x340>
 8001fea:	4b61      	ldr	r3, [pc, #388]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	4a60      	ldr	r2, [pc, #384]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff6:	4b5e      	ldr	r3, [pc, #376]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	4a5d      	ldr	r2, [pc, #372]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6713      	str	r3, [r2, #112]	; 0x70
 8002002:	e00b      	b.n	800201c <HAL_RCC_OscConfig+0x358>
 8002004:	4b5a      	ldr	r3, [pc, #360]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002008:	4a59      	ldr	r2, [pc, #356]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 800200a:	f023 0301 	bic.w	r3, r3, #1
 800200e:	6713      	str	r3, [r2, #112]	; 0x70
 8002010:	4b57      	ldr	r3, [pc, #348]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8002012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002014:	4a56      	ldr	r2, [pc, #344]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8002016:	f023 0304 	bic.w	r3, r3, #4
 800201a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d015      	beq.n	8002050 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7ff f83e 	bl	80010a4 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202a:	e00a      	b.n	8002042 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202c:	f7ff f83a 	bl	80010a4 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e0d7      	b.n	80021f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002042:	4b4b      	ldr	r3, [pc, #300]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0ee      	beq.n	800202c <HAL_RCC_OscConfig+0x368>
 800204e:	e014      	b.n	800207a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002050:	f7ff f828 	bl	80010a4 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002056:	e00a      	b.n	800206e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002058:	f7ff f824 	bl	80010a4 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	; 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e0c1      	b.n	80021f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206e:	4b40      	ldr	r3, [pc, #256]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1ee      	bne.n	8002058 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800207a:	7dfb      	ldrb	r3, [r7, #23]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d105      	bne.n	800208c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002080:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	4a3a      	ldr	r2, [pc, #232]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8002086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80ad 	beq.w	80021f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002096:	4b36      	ldr	r3, [pc, #216]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d060      	beq.n	8002164 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d145      	bne.n	8002136 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020aa:	4b33      	ldr	r3, [pc, #204]	; (8002178 <HAL_RCC_OscConfig+0x4b4>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe fff8 	bl	80010a4 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b8:	f7fe fff4 	bl	80010a4 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e093      	b.n	80021f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ca:	4b29      	ldr	r3, [pc, #164]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69da      	ldr	r2, [r3, #28]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	019b      	lsls	r3, r3, #6
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	085b      	lsrs	r3, r3, #1
 80020ee:	3b01      	subs	r3, #1
 80020f0:	041b      	lsls	r3, r3, #16
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f8:	061b      	lsls	r3, r3, #24
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	071b      	lsls	r3, r3, #28
 8002102:	491b      	ldr	r1, [pc, #108]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002108:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <HAL_RCC_OscConfig+0x4b4>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210e:	f7fe ffc9 	bl	80010a4 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002116:	f7fe ffc5 	bl	80010a4 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e064      	b.n	80021f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x452>
 8002134:	e05c      	b.n	80021f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_RCC_OscConfig+0x4b4>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7fe ffb2 	bl	80010a4 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002144:	f7fe ffae 	bl	80010a4 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e04d      	b.n	80021f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_RCC_OscConfig+0x4ac>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x480>
 8002162:	e045      	b.n	80021f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d107      	bne.n	800217c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e040      	b.n	80021f2 <HAL_RCC_OscConfig+0x52e>
 8002170:	40023800 	.word	0x40023800
 8002174:	40007000 	.word	0x40007000
 8002178:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800217c:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <HAL_RCC_OscConfig+0x538>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d030      	beq.n	80021ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002194:	429a      	cmp	r2, r3
 8002196:	d129      	bne.n	80021ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d122      	bne.n	80021ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021ac:	4013      	ands	r3, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d119      	bne.n	80021ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	085b      	lsrs	r3, r3, #1
 80021c4:	3b01      	subs	r3, #1
 80021c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d10f      	bne.n	80021ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d107      	bne.n	80021ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800

08002200 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e041      	b.n	8002296 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fdd6 	bl	8000dd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3304      	adds	r3, #4
 800223c:	4619      	mov	r1, r3
 800223e:	4610      	mov	r0, r2
 8002240:	f000 fa28 	bl	8002694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <HAL_TIM_PWM_Start+0x24>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	bf14      	ite	ne
 80022bc:	2301      	movne	r3, #1
 80022be:	2300      	moveq	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e022      	b.n	800230a <HAL_TIM_PWM_Start+0x6a>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d109      	bne.n	80022de <HAL_TIM_PWM_Start+0x3e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	bf14      	ite	ne
 80022d6:	2301      	movne	r3, #1
 80022d8:	2300      	moveq	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	e015      	b.n	800230a <HAL_TIM_PWM_Start+0x6a>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d109      	bne.n	80022f8 <HAL_TIM_PWM_Start+0x58>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	bf14      	ite	ne
 80022f0:	2301      	movne	r3, #1
 80022f2:	2300      	moveq	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	e008      	b.n	800230a <HAL_TIM_PWM_Start+0x6a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b01      	cmp	r3, #1
 8002302:	bf14      	ite	ne
 8002304:	2301      	movne	r3, #1
 8002306:	2300      	moveq	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e07c      	b.n	800240c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d104      	bne.n	8002322 <HAL_TIM_PWM_Start+0x82>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002320:	e013      	b.n	800234a <HAL_TIM_PWM_Start+0xaa>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b04      	cmp	r3, #4
 8002326:	d104      	bne.n	8002332 <HAL_TIM_PWM_Start+0x92>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002330:	e00b      	b.n	800234a <HAL_TIM_PWM_Start+0xaa>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b08      	cmp	r3, #8
 8002336:	d104      	bne.n	8002342 <HAL_TIM_PWM_Start+0xa2>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002340:	e003      	b.n	800234a <HAL_TIM_PWM_Start+0xaa>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2202      	movs	r2, #2
 8002346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2201      	movs	r2, #1
 8002350:	6839      	ldr	r1, [r7, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fbee 	bl	8002b34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a2d      	ldr	r2, [pc, #180]	; (8002414 <HAL_TIM_PWM_Start+0x174>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d004      	beq.n	800236c <HAL_TIM_PWM_Start+0xcc>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a2c      	ldr	r2, [pc, #176]	; (8002418 <HAL_TIM_PWM_Start+0x178>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d101      	bne.n	8002370 <HAL_TIM_PWM_Start+0xd0>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_TIM_PWM_Start+0xd2>
 8002370:	2300      	movs	r3, #0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d007      	beq.n	8002386 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002384:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a22      	ldr	r2, [pc, #136]	; (8002414 <HAL_TIM_PWM_Start+0x174>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d022      	beq.n	80023d6 <HAL_TIM_PWM_Start+0x136>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002398:	d01d      	beq.n	80023d6 <HAL_TIM_PWM_Start+0x136>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a1f      	ldr	r2, [pc, #124]	; (800241c <HAL_TIM_PWM_Start+0x17c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d018      	beq.n	80023d6 <HAL_TIM_PWM_Start+0x136>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1d      	ldr	r2, [pc, #116]	; (8002420 <HAL_TIM_PWM_Start+0x180>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d013      	beq.n	80023d6 <HAL_TIM_PWM_Start+0x136>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a1c      	ldr	r2, [pc, #112]	; (8002424 <HAL_TIM_PWM_Start+0x184>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d00e      	beq.n	80023d6 <HAL_TIM_PWM_Start+0x136>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a16      	ldr	r2, [pc, #88]	; (8002418 <HAL_TIM_PWM_Start+0x178>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d009      	beq.n	80023d6 <HAL_TIM_PWM_Start+0x136>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a18      	ldr	r2, [pc, #96]	; (8002428 <HAL_TIM_PWM_Start+0x188>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d004      	beq.n	80023d6 <HAL_TIM_PWM_Start+0x136>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a16      	ldr	r2, [pc, #88]	; (800242c <HAL_TIM_PWM_Start+0x18c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d111      	bne.n	80023fa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b06      	cmp	r3, #6
 80023e6:	d010      	beq.n	800240a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f8:	e007      	b.n	800240a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40010000 	.word	0x40010000
 8002418:	40010400 	.word	0x40010400
 800241c:	40000400 	.word	0x40000400
 8002420:	40000800 	.word	0x40000800
 8002424:	40000c00 	.word	0x40000c00
 8002428:	40014000 	.word	0x40014000
 800242c:	40001800 	.word	0x40001800

08002430 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2200      	movs	r2, #0
 8002440:	6839      	ldr	r1, [r7, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fb76 	bl	8002b34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a2e      	ldr	r2, [pc, #184]	; (8002508 <HAL_TIM_PWM_Stop+0xd8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d004      	beq.n	800245c <HAL_TIM_PWM_Stop+0x2c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a2d      	ldr	r2, [pc, #180]	; (800250c <HAL_TIM_PWM_Stop+0xdc>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d101      	bne.n	8002460 <HAL_TIM_PWM_Stop+0x30>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <HAL_TIM_PWM_Stop+0x32>
 8002460:	2300      	movs	r3, #0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d017      	beq.n	8002496 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a1a      	ldr	r2, [r3, #32]
 800246c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10f      	bne.n	8002496 <HAL_TIM_PWM_Stop+0x66>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6a1a      	ldr	r2, [r3, #32]
 800247c:	f240 4344 	movw	r3, #1092	; 0x444
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d107      	bne.n	8002496 <HAL_TIM_PWM_Stop+0x66>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002494:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6a1a      	ldr	r2, [r3, #32]
 800249c:	f241 1311 	movw	r3, #4369	; 0x1111
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10f      	bne.n	80024c6 <HAL_TIM_PWM_Stop+0x96>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6a1a      	ldr	r2, [r3, #32]
 80024ac:	f240 4344 	movw	r3, #1092	; 0x444
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d107      	bne.n	80024c6 <HAL_TIM_PWM_Stop+0x96>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0201 	bic.w	r2, r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d104      	bne.n	80024d6 <HAL_TIM_PWM_Stop+0xa6>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024d4:	e013      	b.n	80024fe <HAL_TIM_PWM_Stop+0xce>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d104      	bne.n	80024e6 <HAL_TIM_PWM_Stop+0xb6>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024e4:	e00b      	b.n	80024fe <HAL_TIM_PWM_Stop+0xce>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d104      	bne.n	80024f6 <HAL_TIM_PWM_Stop+0xc6>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024f4:	e003      	b.n	80024fe <HAL_TIM_PWM_Stop+0xce>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40010000 	.word	0x40010000
 800250c:	40010400 	.word	0x40010400

08002510 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800252a:	2302      	movs	r3, #2
 800252c:	e0ae      	b.n	800268c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b0c      	cmp	r3, #12
 800253a:	f200 809f 	bhi.w	800267c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800253e:	a201      	add	r2, pc, #4	; (adr r2, 8002544 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002544:	08002579 	.word	0x08002579
 8002548:	0800267d 	.word	0x0800267d
 800254c:	0800267d 	.word	0x0800267d
 8002550:	0800267d 	.word	0x0800267d
 8002554:	080025b9 	.word	0x080025b9
 8002558:	0800267d 	.word	0x0800267d
 800255c:	0800267d 	.word	0x0800267d
 8002560:	0800267d 	.word	0x0800267d
 8002564:	080025fb 	.word	0x080025fb
 8002568:	0800267d 	.word	0x0800267d
 800256c:	0800267d 	.word	0x0800267d
 8002570:	0800267d 	.word	0x0800267d
 8002574:	0800263b 	.word	0x0800263b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	4618      	mov	r0, r3
 8002580:	f000 f928 	bl	80027d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0208 	orr.w	r2, r2, #8
 8002592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0204 	bic.w	r2, r2, #4
 80025a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6999      	ldr	r1, [r3, #24]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	619a      	str	r2, [r3, #24]
      break;
 80025b6:	e064      	b.n	8002682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f978 	bl	80028b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699a      	ldr	r2, [r3, #24]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6999      	ldr	r1, [r3, #24]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	021a      	lsls	r2, r3, #8
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	619a      	str	r2, [r3, #24]
      break;
 80025f8:	e043      	b.n	8002682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	4618      	mov	r0, r3
 8002602:	f000 f9cd 	bl	80029a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69da      	ldr	r2, [r3, #28]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0208 	orr.w	r2, r2, #8
 8002614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69da      	ldr	r2, [r3, #28]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0204 	bic.w	r2, r2, #4
 8002624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69d9      	ldr	r1, [r3, #28]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	61da      	str	r2, [r3, #28]
      break;
 8002638:	e023      	b.n	8002682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fa21 	bl	8002a88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	69da      	ldr	r2, [r3, #28]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69d9      	ldr	r1, [r3, #28]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	021a      	lsls	r2, r3, #8
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	61da      	str	r2, [r3, #28]
      break;
 800267a:	e002      	b.n	8002682 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	75fb      	strb	r3, [r7, #23]
      break;
 8002680:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800268a:	7dfb      	ldrb	r3, [r7, #23]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a40      	ldr	r2, [pc, #256]	; (80027a8 <TIM_Base_SetConfig+0x114>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d013      	beq.n	80026d4 <TIM_Base_SetConfig+0x40>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b2:	d00f      	beq.n	80026d4 <TIM_Base_SetConfig+0x40>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a3d      	ldr	r2, [pc, #244]	; (80027ac <TIM_Base_SetConfig+0x118>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d00b      	beq.n	80026d4 <TIM_Base_SetConfig+0x40>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a3c      	ldr	r2, [pc, #240]	; (80027b0 <TIM_Base_SetConfig+0x11c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d007      	beq.n	80026d4 <TIM_Base_SetConfig+0x40>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a3b      	ldr	r2, [pc, #236]	; (80027b4 <TIM_Base_SetConfig+0x120>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d003      	beq.n	80026d4 <TIM_Base_SetConfig+0x40>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a3a      	ldr	r2, [pc, #232]	; (80027b8 <TIM_Base_SetConfig+0x124>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d108      	bne.n	80026e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a2f      	ldr	r2, [pc, #188]	; (80027a8 <TIM_Base_SetConfig+0x114>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d02b      	beq.n	8002746 <TIM_Base_SetConfig+0xb2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f4:	d027      	beq.n	8002746 <TIM_Base_SetConfig+0xb2>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a2c      	ldr	r2, [pc, #176]	; (80027ac <TIM_Base_SetConfig+0x118>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d023      	beq.n	8002746 <TIM_Base_SetConfig+0xb2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a2b      	ldr	r2, [pc, #172]	; (80027b0 <TIM_Base_SetConfig+0x11c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d01f      	beq.n	8002746 <TIM_Base_SetConfig+0xb2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a2a      	ldr	r2, [pc, #168]	; (80027b4 <TIM_Base_SetConfig+0x120>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d01b      	beq.n	8002746 <TIM_Base_SetConfig+0xb2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a29      	ldr	r2, [pc, #164]	; (80027b8 <TIM_Base_SetConfig+0x124>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d017      	beq.n	8002746 <TIM_Base_SetConfig+0xb2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a28      	ldr	r2, [pc, #160]	; (80027bc <TIM_Base_SetConfig+0x128>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d013      	beq.n	8002746 <TIM_Base_SetConfig+0xb2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a27      	ldr	r2, [pc, #156]	; (80027c0 <TIM_Base_SetConfig+0x12c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00f      	beq.n	8002746 <TIM_Base_SetConfig+0xb2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a26      	ldr	r2, [pc, #152]	; (80027c4 <TIM_Base_SetConfig+0x130>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00b      	beq.n	8002746 <TIM_Base_SetConfig+0xb2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a25      	ldr	r2, [pc, #148]	; (80027c8 <TIM_Base_SetConfig+0x134>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d007      	beq.n	8002746 <TIM_Base_SetConfig+0xb2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a24      	ldr	r2, [pc, #144]	; (80027cc <TIM_Base_SetConfig+0x138>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d003      	beq.n	8002746 <TIM_Base_SetConfig+0xb2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a23      	ldr	r2, [pc, #140]	; (80027d0 <TIM_Base_SetConfig+0x13c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d108      	bne.n	8002758 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800274c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4313      	orrs	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <TIM_Base_SetConfig+0x114>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d003      	beq.n	800278c <TIM_Base_SetConfig+0xf8>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a0c      	ldr	r2, [pc, #48]	; (80027b8 <TIM_Base_SetConfig+0x124>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d103      	bne.n	8002794 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	615a      	str	r2, [r3, #20]
}
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40010000 	.word	0x40010000
 80027ac:	40000400 	.word	0x40000400
 80027b0:	40000800 	.word	0x40000800
 80027b4:	40000c00 	.word	0x40000c00
 80027b8:	40010400 	.word	0x40010400
 80027bc:	40014000 	.word	0x40014000
 80027c0:	40014400 	.word	0x40014400
 80027c4:	40014800 	.word	0x40014800
 80027c8:	40001800 	.word	0x40001800
 80027cc:	40001c00 	.word	0x40001c00
 80027d0:	40002000 	.word	0x40002000

080027d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	f023 0201 	bic.w	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 0303 	bic.w	r3, r3, #3
 800280a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f023 0302 	bic.w	r3, r3, #2
 800281c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a20      	ldr	r2, [pc, #128]	; (80028ac <TIM_OC1_SetConfig+0xd8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d003      	beq.n	8002838 <TIM_OC1_SetConfig+0x64>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a1f      	ldr	r2, [pc, #124]	; (80028b0 <TIM_OC1_SetConfig+0xdc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d10c      	bne.n	8002852 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f023 0308 	bic.w	r3, r3, #8
 800283e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	4313      	orrs	r3, r2
 8002848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f023 0304 	bic.w	r3, r3, #4
 8002850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a15      	ldr	r2, [pc, #84]	; (80028ac <TIM_OC1_SetConfig+0xd8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d003      	beq.n	8002862 <TIM_OC1_SetConfig+0x8e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <TIM_OC1_SetConfig+0xdc>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d111      	bne.n	8002886 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	621a      	str	r2, [r3, #32]
}
 80028a0:	bf00      	nop
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40010000 	.word	0x40010000
 80028b0:	40010400 	.word	0x40010400

080028b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	f023 0210 	bic.w	r2, r3, #16
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f023 0320 	bic.w	r3, r3, #32
 80028fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a22      	ldr	r2, [pc, #136]	; (8002998 <TIM_OC2_SetConfig+0xe4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d003      	beq.n	800291c <TIM_OC2_SetConfig+0x68>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a21      	ldr	r2, [pc, #132]	; (800299c <TIM_OC2_SetConfig+0xe8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d10d      	bne.n	8002938 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002936:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a17      	ldr	r2, [pc, #92]	; (8002998 <TIM_OC2_SetConfig+0xe4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d003      	beq.n	8002948 <TIM_OC2_SetConfig+0x94>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a16      	ldr	r2, [pc, #88]	; (800299c <TIM_OC2_SetConfig+0xe8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d113      	bne.n	8002970 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800294e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002956:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	621a      	str	r2, [r3, #32]
}
 800298a:	bf00      	nop
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40010000 	.word	0x40010000
 800299c:	40010400 	.word	0x40010400

080029a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0303 	bic.w	r3, r3, #3
 80029d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a21      	ldr	r2, [pc, #132]	; (8002a80 <TIM_OC3_SetConfig+0xe0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d003      	beq.n	8002a06 <TIM_OC3_SetConfig+0x66>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a20      	ldr	r2, [pc, #128]	; (8002a84 <TIM_OC3_SetConfig+0xe4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d10d      	bne.n	8002a22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a16      	ldr	r2, [pc, #88]	; (8002a80 <TIM_OC3_SetConfig+0xe0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d003      	beq.n	8002a32 <TIM_OC3_SetConfig+0x92>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a15      	ldr	r2, [pc, #84]	; (8002a84 <TIM_OC3_SetConfig+0xe4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d113      	bne.n	8002a5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	621a      	str	r2, [r3, #32]
}
 8002a74:	bf00      	nop
 8002a76:	371c      	adds	r7, #28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	40010000 	.word	0x40010000
 8002a84:	40010400 	.word	0x40010400

08002a88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ad2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	031b      	lsls	r3, r3, #12
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a12      	ldr	r2, [pc, #72]	; (8002b2c <TIM_OC4_SetConfig+0xa4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d003      	beq.n	8002af0 <TIM_OC4_SetConfig+0x68>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a11      	ldr	r2, [pc, #68]	; (8002b30 <TIM_OC4_SetConfig+0xa8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d109      	bne.n	8002b04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002af6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	019b      	lsls	r3, r3, #6
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	621a      	str	r2, [r3, #32]
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40010000 	.word	0x40010000
 8002b30:	40010400 	.word	0x40010400

08002b34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	2201      	movs	r2, #1
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a1a      	ldr	r2, [r3, #32]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	401a      	ands	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a1a      	ldr	r2, [r3, #32]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	621a      	str	r2, [r3, #32]
}
 8002b72:	bf00      	nop
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e05a      	b.n	8002c4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a21      	ldr	r2, [pc, #132]	; (8002c5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d022      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be4:	d01d      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d018      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1b      	ldr	r2, [pc, #108]	; (8002c64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d013      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1a      	ldr	r2, [pc, #104]	; (8002c68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00e      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a18      	ldr	r2, [pc, #96]	; (8002c6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d009      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a17      	ldr	r2, [pc, #92]	; (8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d004      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a15      	ldr	r2, [pc, #84]	; (8002c74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10c      	bne.n	8002c3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40010000 	.word	0x40010000
 8002c60:	40000400 	.word	0x40000400
 8002c64:	40000800 	.word	0x40000800
 8002c68:	40000c00 	.word	0x40000c00
 8002c6c:	40010400 	.word	0x40010400
 8002c70:	40014000 	.word	0x40014000
 8002c74:	40001800 	.word	0x40001800

08002c78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e03d      	b.n	8002d10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e03f      	b.n	8002dae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7fe f8ce 	bl	8000ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2224      	movs	r2, #36	; 0x24
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fe1f 	bl	80039a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b08a      	sub	sp, #40	; 0x28
 8002dba:	af02      	add	r7, sp, #8
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	603b      	str	r3, [r7, #0]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	d17c      	bne.n	8002ed0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <HAL_UART_Transmit+0x2c>
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e075      	b.n	8002ed2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_UART_Transmit+0x3e>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e06e      	b.n	8002ed2 <HAL_UART_Transmit+0x11c>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2221      	movs	r2, #33	; 0x21
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e0a:	f7fe f94b 	bl	80010a4 <HAL_GetTick>
 8002e0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	88fa      	ldrh	r2, [r7, #6]
 8002e14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	88fa      	ldrh	r2, [r7, #6]
 8002e1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e24:	d108      	bne.n	8002e38 <HAL_UART_Transmit+0x82>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d104      	bne.n	8002e38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	e003      	b.n	8002e40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e48:	e02a      	b.n	8002ea0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2200      	movs	r2, #0
 8002e52:	2180      	movs	r1, #128	; 0x80
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 fb63 	bl	8003520 <UART_WaitOnFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e036      	b.n	8002ed2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10b      	bne.n	8002e82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	e007      	b.n	8002e92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	781a      	ldrb	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1cf      	bne.n	8002e4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2140      	movs	r1, #64	; 0x40
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 fb33 	bl	8003520 <UART_WaitOnFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e006      	b.n	8002ed2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e000      	b.n	8002ed2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ed0:	2302      	movs	r3, #2
  }
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3720      	adds	r7, #32
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b085      	sub	sp, #20
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d130      	bne.n	8002f56 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_UART_Transmit_IT+0x26>
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e029      	b.n	8002f58 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Transmit_IT+0x38>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e022      	b.n	8002f58 <HAL_UART_Transmit_IT+0x7e>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	88fa      	ldrh	r2, [r7, #6]
 8002f24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	88fa      	ldrh	r2, [r7, #6]
 8002f2a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2221      	movs	r2, #33	; 0x21
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f50:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e000      	b.n	8002f58 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002f56:	2302      	movs	r3, #2
  }
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d11d      	bne.n	8002fba <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_UART_Receive_IT+0x26>
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e016      	b.n	8002fbc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_UART_Receive_IT+0x38>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e00f      	b.n	8002fbc <HAL_UART_Receive_IT+0x58>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	461a      	mov	r2, r3
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 fb23 	bl	80035fc <UART_Start_Receive_IT>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	e000      	b.n	8002fbc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002fba:	2302      	movs	r3, #2
  }
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b0ba      	sub	sp, #232	; 0xe8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003002:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10f      	bne.n	800302a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800300a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <HAL_UART_IRQHandler+0x66>
 8003016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fc03 	bl	800382e <UART_Receive_IT>
      return;
 8003028:	e256      	b.n	80034d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800302a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 80de 	beq.w	80031f0 <HAL_UART_IRQHandler+0x22c>
 8003034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d106      	bne.n	800304e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003044:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80d1 	beq.w	80031f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800304e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <HAL_UART_IRQHandler+0xae>
 800305a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800305e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f043 0201 	orr.w	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00b      	beq.n	8003096 <HAL_UART_IRQHandler+0xd2>
 800307e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f043 0202 	orr.w	r2, r3, #2
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <HAL_UART_IRQHandler+0xf6>
 80030a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d005      	beq.n	80030ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f043 0204 	orr.w	r2, r3, #4
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80030ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d011      	beq.n	80030ea <HAL_UART_IRQHandler+0x126>
 80030c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d105      	bne.n	80030de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80030d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f043 0208 	orr.w	r2, r3, #8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 81ed 	beq.w	80034ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_UART_IRQHandler+0x14e>
 8003100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fb8e 	bl	800382e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d103      	bne.n	800313e <HAL_UART_IRQHandler+0x17a>
 8003136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800313a:	2b00      	cmp	r3, #0
 800313c:	d04f      	beq.n	80031de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fa96 	bl	8003670 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	2b40      	cmp	r3, #64	; 0x40
 8003150:	d141      	bne.n	80031d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3314      	adds	r3, #20
 8003158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003160:	e853 3f00 	ldrex	r3, [r3]
 8003164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003168:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800316c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3314      	adds	r3, #20
 800317a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800317e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800318a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800318e:	e841 2300 	strex	r3, r2, [r1]
 8003192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1d9      	bne.n	8003152 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d013      	beq.n	80031ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031aa:	4a7d      	ldr	r2, [pc, #500]	; (80033a0 <HAL_UART_IRQHandler+0x3dc>)
 80031ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe f903 	bl	80013be <HAL_DMA_Abort_IT>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d016      	beq.n	80031ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031c8:	4610      	mov	r0, r2
 80031ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031cc:	e00e      	b.n	80031ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f990 	bl	80034f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d4:	e00a      	b.n	80031ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f98c 	bl	80034f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031dc:	e006      	b.n	80031ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f988 	bl	80034f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80031ea:	e170      	b.n	80034ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ec:	bf00      	nop
    return;
 80031ee:	e16e      	b.n	80034ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	f040 814a 	bne.w	800348e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 8143 	beq.w	800348e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 813c 	beq.w	800348e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003216:	2300      	movs	r3, #0
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003236:	2b40      	cmp	r3, #64	; 0x40
 8003238:	f040 80b4 	bne.w	80033a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003248:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8140 	beq.w	80034d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003256:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800325a:	429a      	cmp	r2, r3
 800325c:	f080 8139 	bcs.w	80034d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003266:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003272:	f000 8088 	beq.w	8003386 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	330c      	adds	r3, #12
 800327c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003284:	e853 3f00 	ldrex	r3, [r3]
 8003288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800328c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003294:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	330c      	adds	r3, #12
 800329e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80032a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032b2:	e841 2300 	strex	r3, r2, [r1]
 80032b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1d9      	bne.n	8003276 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3314      	adds	r3, #20
 80032c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032cc:	e853 3f00 	ldrex	r3, [r3]
 80032d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3314      	adds	r3, #20
 80032e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032f2:	e841 2300 	strex	r3, r2, [r1]
 80032f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1e1      	bne.n	80032c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3314      	adds	r3, #20
 8003304:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003308:	e853 3f00 	ldrex	r3, [r3]
 800330c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800330e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003314:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3314      	adds	r3, #20
 800331e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003322:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003324:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003326:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003328:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800332a:	e841 2300 	strex	r3, r2, [r1]
 800332e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1e3      	bne.n	80032fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	330c      	adds	r3, #12
 800334a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800334e:	e853 3f00 	ldrex	r3, [r3]
 8003352:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003356:	f023 0310 	bic.w	r3, r3, #16
 800335a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	330c      	adds	r3, #12
 8003364:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003368:	65ba      	str	r2, [r7, #88]	; 0x58
 800336a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800336e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003370:	e841 2300 	strex	r3, r2, [r1]
 8003374:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1e3      	bne.n	8003344 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003380:	4618      	mov	r0, r3
 8003382:	f7fd ffac 	bl	80012de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800338e:	b29b      	uxth	r3, r3
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	b29b      	uxth	r3, r3
 8003394:	4619      	mov	r1, r3
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f8b6 	bl	8003508 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800339c:	e099      	b.n	80034d2 <HAL_UART_IRQHandler+0x50e>
 800339e:	bf00      	nop
 80033a0:	08003737 	.word	0x08003737
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 808b 	beq.w	80034d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80033c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8086 	beq.w	80034d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	330c      	adds	r3, #12
 80033d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	330c      	adds	r3, #12
 80033ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033ee:	647a      	str	r2, [r7, #68]	; 0x44
 80033f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e3      	bne.n	80033ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3314      	adds	r3, #20
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	e853 3f00 	ldrex	r3, [r3]
 8003410:	623b      	str	r3, [r7, #32]
   return(result);
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	f023 0301 	bic.w	r3, r3, #1
 8003418:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3314      	adds	r3, #20
 8003422:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003426:	633a      	str	r2, [r7, #48]	; 0x30
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800342c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e3      	bne.n	8003402 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	e853 3f00 	ldrex	r3, [r3]
 8003456:	60fb      	str	r3, [r7, #12]
   return(result);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0310 	bic.w	r3, r3, #16
 800345e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	330c      	adds	r3, #12
 8003468:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800346c:	61fa      	str	r2, [r7, #28]
 800346e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003470:	69b9      	ldr	r1, [r7, #24]
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	e841 2300 	strex	r3, r2, [r1]
 8003478:	617b      	str	r3, [r7, #20]
   return(result);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e3      	bne.n	8003448 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003484:	4619      	mov	r1, r3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f83e 	bl	8003508 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800348c:	e023      	b.n	80034d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800348e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_UART_IRQHandler+0x4ea>
 800349a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800349e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f959 	bl	800375e <UART_Transmit_IT>
    return;
 80034ac:	e014      	b.n	80034d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00e      	beq.n	80034d8 <HAL_UART_IRQHandler+0x514>
 80034ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f999 	bl	80037fe <UART_EndTransmit_IT>
    return;
 80034cc:	e004      	b.n	80034d8 <HAL_UART_IRQHandler+0x514>
    return;
 80034ce:	bf00      	nop
 80034d0:	e002      	b.n	80034d8 <HAL_UART_IRQHandler+0x514>
      return;
 80034d2:	bf00      	nop
 80034d4:	e000      	b.n	80034d8 <HAL_UART_IRQHandler+0x514>
      return;
 80034d6:	bf00      	nop
  }
}
 80034d8:	37e8      	adds	r7, #232	; 0xe8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop

080034e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b090      	sub	sp, #64	; 0x40
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003530:	e050      	b.n	80035d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d04c      	beq.n	80035d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800353a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800353c:	2b00      	cmp	r3, #0
 800353e:	d007      	beq.n	8003550 <UART_WaitOnFlagUntilTimeout+0x30>
 8003540:	f7fd fdb0 	bl	80010a4 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800354c:	429a      	cmp	r2, r3
 800354e:	d241      	bcs.n	80035d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	330c      	adds	r3, #12
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	e853 3f00 	ldrex	r3, [r3]
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003570:	637a      	str	r2, [r7, #52]	; 0x34
 8003572:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003574:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003578:	e841 2300 	strex	r3, r2, [r1]
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e5      	bne.n	8003550 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3314      	adds	r3, #20
 800358a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	e853 3f00 	ldrex	r3, [r3]
 8003592:	613b      	str	r3, [r7, #16]
   return(result);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f023 0301 	bic.w	r3, r3, #1
 800359a:	63bb      	str	r3, [r7, #56]	; 0x38
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3314      	adds	r3, #20
 80035a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035a4:	623a      	str	r2, [r7, #32]
 80035a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a8:	69f9      	ldr	r1, [r7, #28]
 80035aa:	6a3a      	ldr	r2, [r7, #32]
 80035ac:	e841 2300 	strex	r3, r2, [r1]
 80035b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e5      	bne.n	8003584 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e00f      	b.n	80035f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	4013      	ands	r3, r2
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d09f      	beq.n	8003532 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3740      	adds	r7, #64	; 0x40
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	4613      	mov	r3, r2
 8003608:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	88fa      	ldrh	r2, [r7, #6]
 8003614:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	88fa      	ldrh	r2, [r7, #6]
 800361a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2222      	movs	r2, #34	; 0x22
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003640:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695a      	ldr	r2, [r3, #20]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0220 	orr.w	r2, r2, #32
 8003660:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003670:	b480      	push	{r7}
 8003672:	b095      	sub	sp, #84	; 0x54
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	330c      	adds	r3, #12
 800367e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003682:	e853 3f00 	ldrex	r3, [r3]
 8003686:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800368e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	330c      	adds	r3, #12
 8003696:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003698:	643a      	str	r2, [r7, #64]	; 0x40
 800369a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800369e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036a0:	e841 2300 	strex	r3, r2, [r1]
 80036a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e5      	bne.n	8003678 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3314      	adds	r3, #20
 80036b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	e853 3f00 	ldrex	r3, [r3]
 80036ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f023 0301 	bic.w	r3, r3, #1
 80036c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3314      	adds	r3, #20
 80036ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036d4:	e841 2300 	strex	r3, r2, [r1]
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1e5      	bne.n	80036ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d119      	bne.n	800371c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	330c      	adds	r3, #12
 80036ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	e853 3f00 	ldrex	r3, [r3]
 80036f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f023 0310 	bic.w	r3, r3, #16
 80036fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	330c      	adds	r3, #12
 8003706:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003708:	61ba      	str	r2, [r7, #24]
 800370a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370c:	6979      	ldr	r1, [r7, #20]
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	e841 2300 	strex	r3, r2, [r1]
 8003714:	613b      	str	r3, [r7, #16]
   return(result);
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e5      	bne.n	80036e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	631a      	str	r2, [r3, #48]	; 0x30
}
 800372a:	bf00      	nop
 800372c:	3754      	adds	r7, #84	; 0x54
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f7ff fecf 	bl	80034f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003756:	bf00      	nop
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800375e:	b480      	push	{r7}
 8003760:	b085      	sub	sp, #20
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b21      	cmp	r3, #33	; 0x21
 8003770:	d13e      	bne.n	80037f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377a:	d114      	bne.n	80037a6 <UART_Transmit_IT+0x48>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d110      	bne.n	80037a6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003798:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	1c9a      	adds	r2, r3, #2
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	621a      	str	r2, [r3, #32]
 80037a4:	e008      	b.n	80037b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	1c59      	adds	r1, r3, #1
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6211      	str	r1, [r2, #32]
 80037b0:	781a      	ldrb	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	4619      	mov	r1, r3
 80037c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10f      	bne.n	80037ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	e000      	b.n	80037f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037f0:	2302      	movs	r3, #2
  }
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003814:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff fe5e 	bl	80034e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b08c      	sub	sp, #48	; 0x30
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b22      	cmp	r3, #34	; 0x22
 8003840:	f040 80ab 	bne.w	800399a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800384c:	d117      	bne.n	800387e <UART_Receive_IT+0x50>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d113      	bne.n	800387e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003856:	2300      	movs	r3, #0
 8003858:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	b29b      	uxth	r3, r3
 8003868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386c:	b29a      	uxth	r2, r3
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	1c9a      	adds	r2, r3, #2
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	629a      	str	r2, [r3, #40]	; 0x28
 800387c:	e026      	b.n	80038cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003884:	2300      	movs	r3, #0
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003890:	d007      	beq.n	80038a2 <UART_Receive_IT+0x74>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <UART_Receive_IT+0x82>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	e008      	b.n	80038c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4619      	mov	r1, r3
 80038da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d15a      	bne.n	8003996 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0220 	bic.w	r2, r2, #32
 80038ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695a      	ldr	r2, [r3, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	2b01      	cmp	r3, #1
 800391e:	d135      	bne.n	800398c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	330c      	adds	r3, #12
 800392c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	e853 3f00 	ldrex	r3, [r3]
 8003934:	613b      	str	r3, [r7, #16]
   return(result);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f023 0310 	bic.w	r3, r3, #16
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	330c      	adds	r3, #12
 8003944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003946:	623a      	str	r2, [r7, #32]
 8003948:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394a:	69f9      	ldr	r1, [r7, #28]
 800394c:	6a3a      	ldr	r2, [r7, #32]
 800394e:	e841 2300 	strex	r3, r2, [r1]
 8003952:	61bb      	str	r3, [r7, #24]
   return(result);
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e5      	bne.n	8003926 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	2b10      	cmp	r3, #16
 8003966:	d10a      	bne.n	800397e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003982:	4619      	mov	r1, r3
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff fdbf 	bl	8003508 <HAL_UARTEx_RxEventCallback>
 800398a:	e002      	b.n	8003992 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7fc ffc1 	bl	8000914 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e002      	b.n	800399c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	e000      	b.n	800399c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800399a:	2302      	movs	r3, #2
  }
}
 800399c:	4618      	mov	r0, r3
 800399e:	3730      	adds	r7, #48	; 0x30
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a8:	b09f      	sub	sp, #124	; 0x7c
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ba:	68d9      	ldr	r1, [r3, #12]
 80039bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	ea40 0301 	orr.w	r3, r0, r1
 80039c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	4313      	orrs	r3, r2
 80039dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80039de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039e8:	f021 010c 	bic.w	r1, r1, #12
 80039ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039f2:	430b      	orrs	r3, r1
 80039f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a02:	6999      	ldr	r1, [r3, #24]
 8003a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	ea40 0301 	orr.w	r3, r0, r1
 8003a0c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	4bc5      	ldr	r3, [pc, #788]	; (8003d28 <UART_SetConfig+0x384>)
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d004      	beq.n	8003a22 <UART_SetConfig+0x7e>
 8003a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4bc3      	ldr	r3, [pc, #780]	; (8003d2c <UART_SetConfig+0x388>)
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d103      	bne.n	8003a2a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a22:	f7fd ff89 	bl	8001938 <HAL_RCC_GetPCLK2Freq>
 8003a26:	6778      	str	r0, [r7, #116]	; 0x74
 8003a28:	e002      	b.n	8003a30 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a2a:	f7fd ff71 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 8003a2e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a38:	f040 80b6 	bne.w	8003ba8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a3e:	461c      	mov	r4, r3
 8003a40:	f04f 0500 	mov.w	r5, #0
 8003a44:	4622      	mov	r2, r4
 8003a46:	462b      	mov	r3, r5
 8003a48:	1891      	adds	r1, r2, r2
 8003a4a:	6439      	str	r1, [r7, #64]	; 0x40
 8003a4c:	415b      	adcs	r3, r3
 8003a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a54:	1912      	adds	r2, r2, r4
 8003a56:	eb45 0303 	adc.w	r3, r5, r3
 8003a5a:	f04f 0000 	mov.w	r0, #0
 8003a5e:	f04f 0100 	mov.w	r1, #0
 8003a62:	00d9      	lsls	r1, r3, #3
 8003a64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a68:	00d0      	lsls	r0, r2, #3
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	1911      	adds	r1, r2, r4
 8003a70:	6639      	str	r1, [r7, #96]	; 0x60
 8003a72:	416b      	adcs	r3, r5
 8003a74:	667b      	str	r3, [r7, #100]	; 0x64
 8003a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	1891      	adds	r1, r2, r2
 8003a82:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a84:	415b      	adcs	r3, r3
 8003a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a8c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a90:	f7fc fc16 	bl	80002c0 <__aeabi_uldivmod>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4ba5      	ldr	r3, [pc, #660]	; (8003d30 <UART_SetConfig+0x38c>)
 8003a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	011e      	lsls	r6, r3, #4
 8003aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aa4:	461c      	mov	r4, r3
 8003aa6:	f04f 0500 	mov.w	r5, #0
 8003aaa:	4622      	mov	r2, r4
 8003aac:	462b      	mov	r3, r5
 8003aae:	1891      	adds	r1, r2, r2
 8003ab0:	6339      	str	r1, [r7, #48]	; 0x30
 8003ab2:	415b      	adcs	r3, r3
 8003ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003aba:	1912      	adds	r2, r2, r4
 8003abc:	eb45 0303 	adc.w	r3, r5, r3
 8003ac0:	f04f 0000 	mov.w	r0, #0
 8003ac4:	f04f 0100 	mov.w	r1, #0
 8003ac8:	00d9      	lsls	r1, r3, #3
 8003aca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ace:	00d0      	lsls	r0, r2, #3
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	1911      	adds	r1, r2, r4
 8003ad6:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ad8:	416b      	adcs	r3, r5
 8003ada:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	1891      	adds	r1, r2, r2
 8003ae8:	62b9      	str	r1, [r7, #40]	; 0x28
 8003aea:	415b      	adcs	r3, r3
 8003aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003af2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003af6:	f7fc fbe3 	bl	80002c0 <__aeabi_uldivmod>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4b8c      	ldr	r3, [pc, #560]	; (8003d30 <UART_SetConfig+0x38c>)
 8003b00:	fba3 1302 	umull	r1, r3, r3, r2
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	2164      	movs	r1, #100	; 0x64
 8003b08:	fb01 f303 	mul.w	r3, r1, r3
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	3332      	adds	r3, #50	; 0x32
 8003b12:	4a87      	ldr	r2, [pc, #540]	; (8003d30 <UART_SetConfig+0x38c>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b20:	441e      	add	r6, r3
 8003b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b24:	4618      	mov	r0, r3
 8003b26:	f04f 0100 	mov.w	r1, #0
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	1894      	adds	r4, r2, r2
 8003b30:	623c      	str	r4, [r7, #32]
 8003b32:	415b      	adcs	r3, r3
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
 8003b36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b3a:	1812      	adds	r2, r2, r0
 8003b3c:	eb41 0303 	adc.w	r3, r1, r3
 8003b40:	f04f 0400 	mov.w	r4, #0
 8003b44:	f04f 0500 	mov.w	r5, #0
 8003b48:	00dd      	lsls	r5, r3, #3
 8003b4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b4e:	00d4      	lsls	r4, r2, #3
 8003b50:	4622      	mov	r2, r4
 8003b52:	462b      	mov	r3, r5
 8003b54:	1814      	adds	r4, r2, r0
 8003b56:	653c      	str	r4, [r7, #80]	; 0x50
 8003b58:	414b      	adcs	r3, r1
 8003b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8003b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	461a      	mov	r2, r3
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	1891      	adds	r1, r2, r2
 8003b68:	61b9      	str	r1, [r7, #24]
 8003b6a:	415b      	adcs	r3, r3
 8003b6c:	61fb      	str	r3, [r7, #28]
 8003b6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b76:	f7fc fba3 	bl	80002c0 <__aeabi_uldivmod>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4b6c      	ldr	r3, [pc, #432]	; (8003d30 <UART_SetConfig+0x38c>)
 8003b80:	fba3 1302 	umull	r1, r3, r3, r2
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	2164      	movs	r1, #100	; 0x64
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	3332      	adds	r3, #50	; 0x32
 8003b92:	4a67      	ldr	r2, [pc, #412]	; (8003d30 <UART_SetConfig+0x38c>)
 8003b94:	fba2 2303 	umull	r2, r3, r2, r3
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	f003 0207 	and.w	r2, r3, #7
 8003b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4432      	add	r2, r6
 8003ba4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ba6:	e0b9      	b.n	8003d1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003baa:	461c      	mov	r4, r3
 8003bac:	f04f 0500 	mov.w	r5, #0
 8003bb0:	4622      	mov	r2, r4
 8003bb2:	462b      	mov	r3, r5
 8003bb4:	1891      	adds	r1, r2, r2
 8003bb6:	6139      	str	r1, [r7, #16]
 8003bb8:	415b      	adcs	r3, r3
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003bc0:	1912      	adds	r2, r2, r4
 8003bc2:	eb45 0303 	adc.w	r3, r5, r3
 8003bc6:	f04f 0000 	mov.w	r0, #0
 8003bca:	f04f 0100 	mov.w	r1, #0
 8003bce:	00d9      	lsls	r1, r3, #3
 8003bd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bd4:	00d0      	lsls	r0, r2, #3
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	eb12 0804 	adds.w	r8, r2, r4
 8003bde:	eb43 0905 	adc.w	r9, r3, r5
 8003be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f04f 0100 	mov.w	r1, #0
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	008b      	lsls	r3, r1, #2
 8003bf6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bfa:	0082      	lsls	r2, r0, #2
 8003bfc:	4640      	mov	r0, r8
 8003bfe:	4649      	mov	r1, r9
 8003c00:	f7fc fb5e 	bl	80002c0 <__aeabi_uldivmod>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4b49      	ldr	r3, [pc, #292]	; (8003d30 <UART_SetConfig+0x38c>)
 8003c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	011e      	lsls	r6, r3, #4
 8003c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c14:	4618      	mov	r0, r3
 8003c16:	f04f 0100 	mov.w	r1, #0
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	1894      	adds	r4, r2, r2
 8003c20:	60bc      	str	r4, [r7, #8]
 8003c22:	415b      	adcs	r3, r3
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c2a:	1812      	adds	r2, r2, r0
 8003c2c:	eb41 0303 	adc.w	r3, r1, r3
 8003c30:	f04f 0400 	mov.w	r4, #0
 8003c34:	f04f 0500 	mov.w	r5, #0
 8003c38:	00dd      	lsls	r5, r3, #3
 8003c3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c3e:	00d4      	lsls	r4, r2, #3
 8003c40:	4622      	mov	r2, r4
 8003c42:	462b      	mov	r3, r5
 8003c44:	1814      	adds	r4, r2, r0
 8003c46:	64bc      	str	r4, [r7, #72]	; 0x48
 8003c48:	414b      	adcs	r3, r1
 8003c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f04f 0100 	mov.w	r1, #0
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	008b      	lsls	r3, r1, #2
 8003c60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c64:	0082      	lsls	r2, r0, #2
 8003c66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c6a:	f7fc fb29 	bl	80002c0 <__aeabi_uldivmod>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4b2f      	ldr	r3, [pc, #188]	; (8003d30 <UART_SetConfig+0x38c>)
 8003c74:	fba3 1302 	umull	r1, r3, r3, r2
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	2164      	movs	r1, #100	; 0x64
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	3332      	adds	r3, #50	; 0x32
 8003c86:	4a2a      	ldr	r2, [pc, #168]	; (8003d30 <UART_SetConfig+0x38c>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c92:	441e      	add	r6, r3
 8003c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c96:	4618      	mov	r0, r3
 8003c98:	f04f 0100 	mov.w	r1, #0
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	1894      	adds	r4, r2, r2
 8003ca2:	603c      	str	r4, [r7, #0]
 8003ca4:	415b      	adcs	r3, r3
 8003ca6:	607b      	str	r3, [r7, #4]
 8003ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cac:	1812      	adds	r2, r2, r0
 8003cae:	eb41 0303 	adc.w	r3, r1, r3
 8003cb2:	f04f 0400 	mov.w	r4, #0
 8003cb6:	f04f 0500 	mov.w	r5, #0
 8003cba:	00dd      	lsls	r5, r3, #3
 8003cbc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cc0:	00d4      	lsls	r4, r2, #3
 8003cc2:	4622      	mov	r2, r4
 8003cc4:	462b      	mov	r3, r5
 8003cc6:	eb12 0a00 	adds.w	sl, r2, r0
 8003cca:	eb43 0b01 	adc.w	fp, r3, r1
 8003cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f04f 0100 	mov.w	r1, #0
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	008b      	lsls	r3, r1, #2
 8003ce2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ce6:	0082      	lsls	r2, r0, #2
 8003ce8:	4650      	mov	r0, sl
 8003cea:	4659      	mov	r1, fp
 8003cec:	f7fc fae8 	bl	80002c0 <__aeabi_uldivmod>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <UART_SetConfig+0x38c>)
 8003cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	2164      	movs	r1, #100	; 0x64
 8003cfe:	fb01 f303 	mul.w	r3, r1, r3
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	3332      	adds	r3, #50	; 0x32
 8003d08:	4a09      	ldr	r2, [pc, #36]	; (8003d30 <UART_SetConfig+0x38c>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	f003 020f 	and.w	r2, r3, #15
 8003d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4432      	add	r2, r6
 8003d1a:	609a      	str	r2, [r3, #8]
}
 8003d1c:	bf00      	nop
 8003d1e:	377c      	adds	r7, #124	; 0x7c
 8003d20:	46bd      	mov	sp, r7
 8003d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d26:	bf00      	nop
 8003d28:	40011000 	.word	0x40011000
 8003d2c:	40011400 	.word	0x40011400
 8003d30:	51eb851f 	.word	0x51eb851f

08003d34 <__errno>:
 8003d34:	4b01      	ldr	r3, [pc, #4]	; (8003d3c <__errno+0x8>)
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	2000000c 	.word	0x2000000c

08003d40 <__libc_init_array>:
 8003d40:	b570      	push	{r4, r5, r6, lr}
 8003d42:	4d0d      	ldr	r5, [pc, #52]	; (8003d78 <__libc_init_array+0x38>)
 8003d44:	4c0d      	ldr	r4, [pc, #52]	; (8003d7c <__libc_init_array+0x3c>)
 8003d46:	1b64      	subs	r4, r4, r5
 8003d48:	10a4      	asrs	r4, r4, #2
 8003d4a:	2600      	movs	r6, #0
 8003d4c:	42a6      	cmp	r6, r4
 8003d4e:	d109      	bne.n	8003d64 <__libc_init_array+0x24>
 8003d50:	4d0b      	ldr	r5, [pc, #44]	; (8003d80 <__libc_init_array+0x40>)
 8003d52:	4c0c      	ldr	r4, [pc, #48]	; (8003d84 <__libc_init_array+0x44>)
 8003d54:	f001 f912 	bl	8004f7c <_init>
 8003d58:	1b64      	subs	r4, r4, r5
 8003d5a:	10a4      	asrs	r4, r4, #2
 8003d5c:	2600      	movs	r6, #0
 8003d5e:	42a6      	cmp	r6, r4
 8003d60:	d105      	bne.n	8003d6e <__libc_init_array+0x2e>
 8003d62:	bd70      	pop	{r4, r5, r6, pc}
 8003d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d68:	4798      	blx	r3
 8003d6a:	3601      	adds	r6, #1
 8003d6c:	e7ee      	b.n	8003d4c <__libc_init_array+0xc>
 8003d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d72:	4798      	blx	r3
 8003d74:	3601      	adds	r6, #1
 8003d76:	e7f2      	b.n	8003d5e <__libc_init_array+0x1e>
 8003d78:	08005274 	.word	0x08005274
 8003d7c:	08005274 	.word	0x08005274
 8003d80:	08005274 	.word	0x08005274
 8003d84:	08005278 	.word	0x08005278

08003d88 <memset>:
 8003d88:	4402      	add	r2, r0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d100      	bne.n	8003d92 <memset+0xa>
 8003d90:	4770      	bx	lr
 8003d92:	f803 1b01 	strb.w	r1, [r3], #1
 8003d96:	e7f9      	b.n	8003d8c <memset+0x4>

08003d98 <siprintf>:
 8003d98:	b40e      	push	{r1, r2, r3}
 8003d9a:	b500      	push	{lr}
 8003d9c:	b09c      	sub	sp, #112	; 0x70
 8003d9e:	ab1d      	add	r3, sp, #116	; 0x74
 8003da0:	9002      	str	r0, [sp, #8]
 8003da2:	9006      	str	r0, [sp, #24]
 8003da4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003da8:	4809      	ldr	r0, [pc, #36]	; (8003dd0 <siprintf+0x38>)
 8003daa:	9107      	str	r1, [sp, #28]
 8003dac:	9104      	str	r1, [sp, #16]
 8003dae:	4909      	ldr	r1, [pc, #36]	; (8003dd4 <siprintf+0x3c>)
 8003db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003db4:	9105      	str	r1, [sp, #20]
 8003db6:	6800      	ldr	r0, [r0, #0]
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	a902      	add	r1, sp, #8
 8003dbc:	f000 f896 	bl	8003eec <_svfiprintf_r>
 8003dc0:	9b02      	ldr	r3, [sp, #8]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	b01c      	add	sp, #112	; 0x70
 8003dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dcc:	b003      	add	sp, #12
 8003dce:	4770      	bx	lr
 8003dd0:	2000000c 	.word	0x2000000c
 8003dd4:	ffff0208 	.word	0xffff0208

08003dd8 <siscanf>:
 8003dd8:	b40e      	push	{r1, r2, r3}
 8003dda:	b510      	push	{r4, lr}
 8003ddc:	b09f      	sub	sp, #124	; 0x7c
 8003dde:	ac21      	add	r4, sp, #132	; 0x84
 8003de0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003de4:	f854 2b04 	ldr.w	r2, [r4], #4
 8003de8:	9201      	str	r2, [sp, #4]
 8003dea:	f8ad 101c 	strh.w	r1, [sp, #28]
 8003dee:	9004      	str	r0, [sp, #16]
 8003df0:	9008      	str	r0, [sp, #32]
 8003df2:	f7fc fa0d 	bl	8000210 <strlen>
 8003df6:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <siscanf+0x50>)
 8003df8:	9005      	str	r0, [sp, #20]
 8003dfa:	9009      	str	r0, [sp, #36]	; 0x24
 8003dfc:	930d      	str	r3, [sp, #52]	; 0x34
 8003dfe:	480b      	ldr	r0, [pc, #44]	; (8003e2c <siscanf+0x54>)
 8003e00:	9a01      	ldr	r2, [sp, #4]
 8003e02:	6800      	ldr	r0, [r0, #0]
 8003e04:	9403      	str	r4, [sp, #12]
 8003e06:	2300      	movs	r3, #0
 8003e08:	9311      	str	r3, [sp, #68]	; 0x44
 8003e0a:	9316      	str	r3, [sp, #88]	; 0x58
 8003e0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e10:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003e14:	a904      	add	r1, sp, #16
 8003e16:	4623      	mov	r3, r4
 8003e18:	f000 f9c2 	bl	80041a0 <__ssvfiscanf_r>
 8003e1c:	b01f      	add	sp, #124	; 0x7c
 8003e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e22:	b003      	add	sp, #12
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	08003e31 	.word	0x08003e31
 8003e2c:	2000000c 	.word	0x2000000c

08003e30 <__seofread>:
 8003e30:	2000      	movs	r0, #0
 8003e32:	4770      	bx	lr

08003e34 <__ssputs_r>:
 8003e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e38:	688e      	ldr	r6, [r1, #8]
 8003e3a:	429e      	cmp	r6, r3
 8003e3c:	4682      	mov	sl, r0
 8003e3e:	460c      	mov	r4, r1
 8003e40:	4690      	mov	r8, r2
 8003e42:	461f      	mov	r7, r3
 8003e44:	d838      	bhi.n	8003eb8 <__ssputs_r+0x84>
 8003e46:	898a      	ldrh	r2, [r1, #12]
 8003e48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e4c:	d032      	beq.n	8003eb4 <__ssputs_r+0x80>
 8003e4e:	6825      	ldr	r5, [r4, #0]
 8003e50:	6909      	ldr	r1, [r1, #16]
 8003e52:	eba5 0901 	sub.w	r9, r5, r1
 8003e56:	6965      	ldr	r5, [r4, #20]
 8003e58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e60:	3301      	adds	r3, #1
 8003e62:	444b      	add	r3, r9
 8003e64:	106d      	asrs	r5, r5, #1
 8003e66:	429d      	cmp	r5, r3
 8003e68:	bf38      	it	cc
 8003e6a:	461d      	movcc	r5, r3
 8003e6c:	0553      	lsls	r3, r2, #21
 8003e6e:	d531      	bpl.n	8003ed4 <__ssputs_r+0xa0>
 8003e70:	4629      	mov	r1, r5
 8003e72:	f000 ffdf 	bl	8004e34 <_malloc_r>
 8003e76:	4606      	mov	r6, r0
 8003e78:	b950      	cbnz	r0, 8003e90 <__ssputs_r+0x5c>
 8003e7a:	230c      	movs	r3, #12
 8003e7c:	f8ca 3000 	str.w	r3, [sl]
 8003e80:	89a3      	ldrh	r3, [r4, #12]
 8003e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e86:	81a3      	strh	r3, [r4, #12]
 8003e88:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e90:	6921      	ldr	r1, [r4, #16]
 8003e92:	464a      	mov	r2, r9
 8003e94:	f000 ff56 	bl	8004d44 <memcpy>
 8003e98:	89a3      	ldrh	r3, [r4, #12]
 8003e9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea2:	81a3      	strh	r3, [r4, #12]
 8003ea4:	6126      	str	r6, [r4, #16]
 8003ea6:	6165      	str	r5, [r4, #20]
 8003ea8:	444e      	add	r6, r9
 8003eaa:	eba5 0509 	sub.w	r5, r5, r9
 8003eae:	6026      	str	r6, [r4, #0]
 8003eb0:	60a5      	str	r5, [r4, #8]
 8003eb2:	463e      	mov	r6, r7
 8003eb4:	42be      	cmp	r6, r7
 8003eb6:	d900      	bls.n	8003eba <__ssputs_r+0x86>
 8003eb8:	463e      	mov	r6, r7
 8003eba:	4632      	mov	r2, r6
 8003ebc:	6820      	ldr	r0, [r4, #0]
 8003ebe:	4641      	mov	r1, r8
 8003ec0:	f000 ff4e 	bl	8004d60 <memmove>
 8003ec4:	68a3      	ldr	r3, [r4, #8]
 8003ec6:	6822      	ldr	r2, [r4, #0]
 8003ec8:	1b9b      	subs	r3, r3, r6
 8003eca:	4432      	add	r2, r6
 8003ecc:	60a3      	str	r3, [r4, #8]
 8003ece:	6022      	str	r2, [r4, #0]
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	e7db      	b.n	8003e8c <__ssputs_r+0x58>
 8003ed4:	462a      	mov	r2, r5
 8003ed6:	f001 f807 	bl	8004ee8 <_realloc_r>
 8003eda:	4606      	mov	r6, r0
 8003edc:	2800      	cmp	r0, #0
 8003ede:	d1e1      	bne.n	8003ea4 <__ssputs_r+0x70>
 8003ee0:	6921      	ldr	r1, [r4, #16]
 8003ee2:	4650      	mov	r0, sl
 8003ee4:	f000 ff56 	bl	8004d94 <_free_r>
 8003ee8:	e7c7      	b.n	8003e7a <__ssputs_r+0x46>
	...

08003eec <_svfiprintf_r>:
 8003eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef0:	4698      	mov	r8, r3
 8003ef2:	898b      	ldrh	r3, [r1, #12]
 8003ef4:	061b      	lsls	r3, r3, #24
 8003ef6:	b09d      	sub	sp, #116	; 0x74
 8003ef8:	4607      	mov	r7, r0
 8003efa:	460d      	mov	r5, r1
 8003efc:	4614      	mov	r4, r2
 8003efe:	d50e      	bpl.n	8003f1e <_svfiprintf_r+0x32>
 8003f00:	690b      	ldr	r3, [r1, #16]
 8003f02:	b963      	cbnz	r3, 8003f1e <_svfiprintf_r+0x32>
 8003f04:	2140      	movs	r1, #64	; 0x40
 8003f06:	f000 ff95 	bl	8004e34 <_malloc_r>
 8003f0a:	6028      	str	r0, [r5, #0]
 8003f0c:	6128      	str	r0, [r5, #16]
 8003f0e:	b920      	cbnz	r0, 8003f1a <_svfiprintf_r+0x2e>
 8003f10:	230c      	movs	r3, #12
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
 8003f18:	e0d1      	b.n	80040be <_svfiprintf_r+0x1d2>
 8003f1a:	2340      	movs	r3, #64	; 0x40
 8003f1c:	616b      	str	r3, [r5, #20]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	9309      	str	r3, [sp, #36]	; 0x24
 8003f22:	2320      	movs	r3, #32
 8003f24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f28:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f2c:	2330      	movs	r3, #48	; 0x30
 8003f2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80040d8 <_svfiprintf_r+0x1ec>
 8003f32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f36:	f04f 0901 	mov.w	r9, #1
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	469a      	mov	sl, r3
 8003f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f42:	b10a      	cbz	r2, 8003f48 <_svfiprintf_r+0x5c>
 8003f44:	2a25      	cmp	r2, #37	; 0x25
 8003f46:	d1f9      	bne.n	8003f3c <_svfiprintf_r+0x50>
 8003f48:	ebba 0b04 	subs.w	fp, sl, r4
 8003f4c:	d00b      	beq.n	8003f66 <_svfiprintf_r+0x7a>
 8003f4e:	465b      	mov	r3, fp
 8003f50:	4622      	mov	r2, r4
 8003f52:	4629      	mov	r1, r5
 8003f54:	4638      	mov	r0, r7
 8003f56:	f7ff ff6d 	bl	8003e34 <__ssputs_r>
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	f000 80aa 	beq.w	80040b4 <_svfiprintf_r+0x1c8>
 8003f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f62:	445a      	add	r2, fp
 8003f64:	9209      	str	r2, [sp, #36]	; 0x24
 8003f66:	f89a 3000 	ldrb.w	r3, [sl]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 80a2 	beq.w	80040b4 <_svfiprintf_r+0x1c8>
 8003f70:	2300      	movs	r3, #0
 8003f72:	f04f 32ff 	mov.w	r2, #4294967295
 8003f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f7a:	f10a 0a01 	add.w	sl, sl, #1
 8003f7e:	9304      	str	r3, [sp, #16]
 8003f80:	9307      	str	r3, [sp, #28]
 8003f82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f86:	931a      	str	r3, [sp, #104]	; 0x68
 8003f88:	4654      	mov	r4, sl
 8003f8a:	2205      	movs	r2, #5
 8003f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f90:	4851      	ldr	r0, [pc, #324]	; (80040d8 <_svfiprintf_r+0x1ec>)
 8003f92:	f7fc f945 	bl	8000220 <memchr>
 8003f96:	9a04      	ldr	r2, [sp, #16]
 8003f98:	b9d8      	cbnz	r0, 8003fd2 <_svfiprintf_r+0xe6>
 8003f9a:	06d0      	lsls	r0, r2, #27
 8003f9c:	bf44      	itt	mi
 8003f9e:	2320      	movmi	r3, #32
 8003fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fa4:	0711      	lsls	r1, r2, #28
 8003fa6:	bf44      	itt	mi
 8003fa8:	232b      	movmi	r3, #43	; 0x2b
 8003faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fae:	f89a 3000 	ldrb.w	r3, [sl]
 8003fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8003fb4:	d015      	beq.n	8003fe2 <_svfiprintf_r+0xf6>
 8003fb6:	9a07      	ldr	r2, [sp, #28]
 8003fb8:	4654      	mov	r4, sl
 8003fba:	2000      	movs	r0, #0
 8003fbc:	f04f 0c0a 	mov.w	ip, #10
 8003fc0:	4621      	mov	r1, r4
 8003fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fc6:	3b30      	subs	r3, #48	; 0x30
 8003fc8:	2b09      	cmp	r3, #9
 8003fca:	d94e      	bls.n	800406a <_svfiprintf_r+0x17e>
 8003fcc:	b1b0      	cbz	r0, 8003ffc <_svfiprintf_r+0x110>
 8003fce:	9207      	str	r2, [sp, #28]
 8003fd0:	e014      	b.n	8003ffc <_svfiprintf_r+0x110>
 8003fd2:	eba0 0308 	sub.w	r3, r0, r8
 8003fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	9304      	str	r3, [sp, #16]
 8003fde:	46a2      	mov	sl, r4
 8003fe0:	e7d2      	b.n	8003f88 <_svfiprintf_r+0x9c>
 8003fe2:	9b03      	ldr	r3, [sp, #12]
 8003fe4:	1d19      	adds	r1, r3, #4
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	9103      	str	r1, [sp, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	bfbb      	ittet	lt
 8003fee:	425b      	neglt	r3, r3
 8003ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8003ff4:	9307      	strge	r3, [sp, #28]
 8003ff6:	9307      	strlt	r3, [sp, #28]
 8003ff8:	bfb8      	it	lt
 8003ffa:	9204      	strlt	r2, [sp, #16]
 8003ffc:	7823      	ldrb	r3, [r4, #0]
 8003ffe:	2b2e      	cmp	r3, #46	; 0x2e
 8004000:	d10c      	bne.n	800401c <_svfiprintf_r+0x130>
 8004002:	7863      	ldrb	r3, [r4, #1]
 8004004:	2b2a      	cmp	r3, #42	; 0x2a
 8004006:	d135      	bne.n	8004074 <_svfiprintf_r+0x188>
 8004008:	9b03      	ldr	r3, [sp, #12]
 800400a:	1d1a      	adds	r2, r3, #4
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	9203      	str	r2, [sp, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	bfb8      	it	lt
 8004014:	f04f 33ff 	movlt.w	r3, #4294967295
 8004018:	3402      	adds	r4, #2
 800401a:	9305      	str	r3, [sp, #20]
 800401c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040e8 <_svfiprintf_r+0x1fc>
 8004020:	7821      	ldrb	r1, [r4, #0]
 8004022:	2203      	movs	r2, #3
 8004024:	4650      	mov	r0, sl
 8004026:	f7fc f8fb 	bl	8000220 <memchr>
 800402a:	b140      	cbz	r0, 800403e <_svfiprintf_r+0x152>
 800402c:	2340      	movs	r3, #64	; 0x40
 800402e:	eba0 000a 	sub.w	r0, r0, sl
 8004032:	fa03 f000 	lsl.w	r0, r3, r0
 8004036:	9b04      	ldr	r3, [sp, #16]
 8004038:	4303      	orrs	r3, r0
 800403a:	3401      	adds	r4, #1
 800403c:	9304      	str	r3, [sp, #16]
 800403e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004042:	4826      	ldr	r0, [pc, #152]	; (80040dc <_svfiprintf_r+0x1f0>)
 8004044:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004048:	2206      	movs	r2, #6
 800404a:	f7fc f8e9 	bl	8000220 <memchr>
 800404e:	2800      	cmp	r0, #0
 8004050:	d038      	beq.n	80040c4 <_svfiprintf_r+0x1d8>
 8004052:	4b23      	ldr	r3, [pc, #140]	; (80040e0 <_svfiprintf_r+0x1f4>)
 8004054:	bb1b      	cbnz	r3, 800409e <_svfiprintf_r+0x1b2>
 8004056:	9b03      	ldr	r3, [sp, #12]
 8004058:	3307      	adds	r3, #7
 800405a:	f023 0307 	bic.w	r3, r3, #7
 800405e:	3308      	adds	r3, #8
 8004060:	9303      	str	r3, [sp, #12]
 8004062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004064:	4433      	add	r3, r6
 8004066:	9309      	str	r3, [sp, #36]	; 0x24
 8004068:	e767      	b.n	8003f3a <_svfiprintf_r+0x4e>
 800406a:	fb0c 3202 	mla	r2, ip, r2, r3
 800406e:	460c      	mov	r4, r1
 8004070:	2001      	movs	r0, #1
 8004072:	e7a5      	b.n	8003fc0 <_svfiprintf_r+0xd4>
 8004074:	2300      	movs	r3, #0
 8004076:	3401      	adds	r4, #1
 8004078:	9305      	str	r3, [sp, #20]
 800407a:	4619      	mov	r1, r3
 800407c:	f04f 0c0a 	mov.w	ip, #10
 8004080:	4620      	mov	r0, r4
 8004082:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004086:	3a30      	subs	r2, #48	; 0x30
 8004088:	2a09      	cmp	r2, #9
 800408a:	d903      	bls.n	8004094 <_svfiprintf_r+0x1a8>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0c5      	beq.n	800401c <_svfiprintf_r+0x130>
 8004090:	9105      	str	r1, [sp, #20]
 8004092:	e7c3      	b.n	800401c <_svfiprintf_r+0x130>
 8004094:	fb0c 2101 	mla	r1, ip, r1, r2
 8004098:	4604      	mov	r4, r0
 800409a:	2301      	movs	r3, #1
 800409c:	e7f0      	b.n	8004080 <_svfiprintf_r+0x194>
 800409e:	ab03      	add	r3, sp, #12
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	462a      	mov	r2, r5
 80040a4:	4b0f      	ldr	r3, [pc, #60]	; (80040e4 <_svfiprintf_r+0x1f8>)
 80040a6:	a904      	add	r1, sp, #16
 80040a8:	4638      	mov	r0, r7
 80040aa:	f3af 8000 	nop.w
 80040ae:	1c42      	adds	r2, r0, #1
 80040b0:	4606      	mov	r6, r0
 80040b2:	d1d6      	bne.n	8004062 <_svfiprintf_r+0x176>
 80040b4:	89ab      	ldrh	r3, [r5, #12]
 80040b6:	065b      	lsls	r3, r3, #25
 80040b8:	f53f af2c 	bmi.w	8003f14 <_svfiprintf_r+0x28>
 80040bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040be:	b01d      	add	sp, #116	; 0x74
 80040c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c4:	ab03      	add	r3, sp, #12
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	462a      	mov	r2, r5
 80040ca:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <_svfiprintf_r+0x1f8>)
 80040cc:	a904      	add	r1, sp, #16
 80040ce:	4638      	mov	r0, r7
 80040d0:	f000 fa4c 	bl	800456c <_printf_i>
 80040d4:	e7eb      	b.n	80040ae <_svfiprintf_r+0x1c2>
 80040d6:	bf00      	nop
 80040d8:	080050bc 	.word	0x080050bc
 80040dc:	080050c6 	.word	0x080050c6
 80040e0:	00000000 	.word	0x00000000
 80040e4:	08003e35 	.word	0x08003e35
 80040e8:	080050c2 	.word	0x080050c2

080040ec <_sungetc_r>:
 80040ec:	b538      	push	{r3, r4, r5, lr}
 80040ee:	1c4b      	adds	r3, r1, #1
 80040f0:	4614      	mov	r4, r2
 80040f2:	d103      	bne.n	80040fc <_sungetc_r+0x10>
 80040f4:	f04f 35ff 	mov.w	r5, #4294967295
 80040f8:	4628      	mov	r0, r5
 80040fa:	bd38      	pop	{r3, r4, r5, pc}
 80040fc:	8993      	ldrh	r3, [r2, #12]
 80040fe:	f023 0320 	bic.w	r3, r3, #32
 8004102:	8193      	strh	r3, [r2, #12]
 8004104:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004106:	6852      	ldr	r2, [r2, #4]
 8004108:	b2cd      	uxtb	r5, r1
 800410a:	b18b      	cbz	r3, 8004130 <_sungetc_r+0x44>
 800410c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800410e:	4293      	cmp	r3, r2
 8004110:	dd08      	ble.n	8004124 <_sungetc_r+0x38>
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	1e5a      	subs	r2, r3, #1
 8004116:	6022      	str	r2, [r4, #0]
 8004118:	f803 5c01 	strb.w	r5, [r3, #-1]
 800411c:	6863      	ldr	r3, [r4, #4]
 800411e:	3301      	adds	r3, #1
 8004120:	6063      	str	r3, [r4, #4]
 8004122:	e7e9      	b.n	80040f8 <_sungetc_r+0xc>
 8004124:	4621      	mov	r1, r4
 8004126:	f000 fdd1 	bl	8004ccc <__submore>
 800412a:	2800      	cmp	r0, #0
 800412c:	d0f1      	beq.n	8004112 <_sungetc_r+0x26>
 800412e:	e7e1      	b.n	80040f4 <_sungetc_r+0x8>
 8004130:	6921      	ldr	r1, [r4, #16]
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	b151      	cbz	r1, 800414c <_sungetc_r+0x60>
 8004136:	4299      	cmp	r1, r3
 8004138:	d208      	bcs.n	800414c <_sungetc_r+0x60>
 800413a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800413e:	42a9      	cmp	r1, r5
 8004140:	d104      	bne.n	800414c <_sungetc_r+0x60>
 8004142:	3b01      	subs	r3, #1
 8004144:	3201      	adds	r2, #1
 8004146:	6023      	str	r3, [r4, #0]
 8004148:	6062      	str	r2, [r4, #4]
 800414a:	e7d5      	b.n	80040f8 <_sungetc_r+0xc>
 800414c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004150:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004154:	6363      	str	r3, [r4, #52]	; 0x34
 8004156:	2303      	movs	r3, #3
 8004158:	63a3      	str	r3, [r4, #56]	; 0x38
 800415a:	4623      	mov	r3, r4
 800415c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	2301      	movs	r3, #1
 8004164:	e7dc      	b.n	8004120 <_sungetc_r+0x34>

08004166 <__ssrefill_r>:
 8004166:	b510      	push	{r4, lr}
 8004168:	460c      	mov	r4, r1
 800416a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800416c:	b169      	cbz	r1, 800418a <__ssrefill_r+0x24>
 800416e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004172:	4299      	cmp	r1, r3
 8004174:	d001      	beq.n	800417a <__ssrefill_r+0x14>
 8004176:	f000 fe0d 	bl	8004d94 <_free_r>
 800417a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800417c:	6063      	str	r3, [r4, #4]
 800417e:	2000      	movs	r0, #0
 8004180:	6360      	str	r0, [r4, #52]	; 0x34
 8004182:	b113      	cbz	r3, 800418a <__ssrefill_r+0x24>
 8004184:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004186:	6023      	str	r3, [r4, #0]
 8004188:	bd10      	pop	{r4, pc}
 800418a:	6923      	ldr	r3, [r4, #16]
 800418c:	6023      	str	r3, [r4, #0]
 800418e:	2300      	movs	r3, #0
 8004190:	6063      	str	r3, [r4, #4]
 8004192:	89a3      	ldrh	r3, [r4, #12]
 8004194:	f043 0320 	orr.w	r3, r3, #32
 8004198:	81a3      	strh	r3, [r4, #12]
 800419a:	f04f 30ff 	mov.w	r0, #4294967295
 800419e:	e7f3      	b.n	8004188 <__ssrefill_r+0x22>

080041a0 <__ssvfiscanf_r>:
 80041a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a4:	460c      	mov	r4, r1
 80041a6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80041aa:	2100      	movs	r1, #0
 80041ac:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80041b0:	49b2      	ldr	r1, [pc, #712]	; (800447c <__ssvfiscanf_r+0x2dc>)
 80041b2:	91a0      	str	r1, [sp, #640]	; 0x280
 80041b4:	f10d 0804 	add.w	r8, sp, #4
 80041b8:	49b1      	ldr	r1, [pc, #708]	; (8004480 <__ssvfiscanf_r+0x2e0>)
 80041ba:	4fb2      	ldr	r7, [pc, #712]	; (8004484 <__ssvfiscanf_r+0x2e4>)
 80041bc:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8004488 <__ssvfiscanf_r+0x2e8>
 80041c0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80041c4:	4606      	mov	r6, r0
 80041c6:	91a1      	str	r1, [sp, #644]	; 0x284
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	f892 a000 	ldrb.w	sl, [r2]
 80041ce:	f1ba 0f00 	cmp.w	sl, #0
 80041d2:	f000 8151 	beq.w	8004478 <__ssvfiscanf_r+0x2d8>
 80041d6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80041da:	f013 0308 	ands.w	r3, r3, #8
 80041de:	f102 0501 	add.w	r5, r2, #1
 80041e2:	d019      	beq.n	8004218 <__ssvfiscanf_r+0x78>
 80041e4:	6863      	ldr	r3, [r4, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	dd0f      	ble.n	800420a <__ssvfiscanf_r+0x6a>
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	781a      	ldrb	r2, [r3, #0]
 80041ee:	5cba      	ldrb	r2, [r7, r2]
 80041f0:	0712      	lsls	r2, r2, #28
 80041f2:	d401      	bmi.n	80041f8 <__ssvfiscanf_r+0x58>
 80041f4:	462a      	mov	r2, r5
 80041f6:	e7e8      	b.n	80041ca <__ssvfiscanf_r+0x2a>
 80041f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80041fa:	3201      	adds	r2, #1
 80041fc:	9245      	str	r2, [sp, #276]	; 0x114
 80041fe:	6862      	ldr	r2, [r4, #4]
 8004200:	3301      	adds	r3, #1
 8004202:	3a01      	subs	r2, #1
 8004204:	6062      	str	r2, [r4, #4]
 8004206:	6023      	str	r3, [r4, #0]
 8004208:	e7ec      	b.n	80041e4 <__ssvfiscanf_r+0x44>
 800420a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800420c:	4621      	mov	r1, r4
 800420e:	4630      	mov	r0, r6
 8004210:	4798      	blx	r3
 8004212:	2800      	cmp	r0, #0
 8004214:	d0e9      	beq.n	80041ea <__ssvfiscanf_r+0x4a>
 8004216:	e7ed      	b.n	80041f4 <__ssvfiscanf_r+0x54>
 8004218:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800421c:	f040 8083 	bne.w	8004326 <__ssvfiscanf_r+0x186>
 8004220:	9341      	str	r3, [sp, #260]	; 0x104
 8004222:	9343      	str	r3, [sp, #268]	; 0x10c
 8004224:	7853      	ldrb	r3, [r2, #1]
 8004226:	2b2a      	cmp	r3, #42	; 0x2a
 8004228:	bf02      	ittt	eq
 800422a:	2310      	moveq	r3, #16
 800422c:	1c95      	addeq	r5, r2, #2
 800422e:	9341      	streq	r3, [sp, #260]	; 0x104
 8004230:	220a      	movs	r2, #10
 8004232:	46ab      	mov	fp, r5
 8004234:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8004238:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800423c:	2b09      	cmp	r3, #9
 800423e:	d91d      	bls.n	800427c <__ssvfiscanf_r+0xdc>
 8004240:	4891      	ldr	r0, [pc, #580]	; (8004488 <__ssvfiscanf_r+0x2e8>)
 8004242:	2203      	movs	r2, #3
 8004244:	f7fb ffec 	bl	8000220 <memchr>
 8004248:	b140      	cbz	r0, 800425c <__ssvfiscanf_r+0xbc>
 800424a:	2301      	movs	r3, #1
 800424c:	eba0 0009 	sub.w	r0, r0, r9
 8004250:	fa03 f000 	lsl.w	r0, r3, r0
 8004254:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004256:	4318      	orrs	r0, r3
 8004258:	9041      	str	r0, [sp, #260]	; 0x104
 800425a:	465d      	mov	r5, fp
 800425c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004260:	2b78      	cmp	r3, #120	; 0x78
 8004262:	d806      	bhi.n	8004272 <__ssvfiscanf_r+0xd2>
 8004264:	2b57      	cmp	r3, #87	; 0x57
 8004266:	d810      	bhi.n	800428a <__ssvfiscanf_r+0xea>
 8004268:	2b25      	cmp	r3, #37	; 0x25
 800426a:	d05c      	beq.n	8004326 <__ssvfiscanf_r+0x186>
 800426c:	d856      	bhi.n	800431c <__ssvfiscanf_r+0x17c>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d074      	beq.n	800435c <__ssvfiscanf_r+0x1bc>
 8004272:	2303      	movs	r3, #3
 8004274:	9347      	str	r3, [sp, #284]	; 0x11c
 8004276:	230a      	movs	r3, #10
 8004278:	9342      	str	r3, [sp, #264]	; 0x108
 800427a:	e081      	b.n	8004380 <__ssvfiscanf_r+0x1e0>
 800427c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800427e:	fb02 1303 	mla	r3, r2, r3, r1
 8004282:	3b30      	subs	r3, #48	; 0x30
 8004284:	9343      	str	r3, [sp, #268]	; 0x10c
 8004286:	465d      	mov	r5, fp
 8004288:	e7d3      	b.n	8004232 <__ssvfiscanf_r+0x92>
 800428a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800428e:	2a20      	cmp	r2, #32
 8004290:	d8ef      	bhi.n	8004272 <__ssvfiscanf_r+0xd2>
 8004292:	a101      	add	r1, pc, #4	; (adr r1, 8004298 <__ssvfiscanf_r+0xf8>)
 8004294:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004298:	0800436b 	.word	0x0800436b
 800429c:	08004273 	.word	0x08004273
 80042a0:	08004273 	.word	0x08004273
 80042a4:	080043c9 	.word	0x080043c9
 80042a8:	08004273 	.word	0x08004273
 80042ac:	08004273 	.word	0x08004273
 80042b0:	08004273 	.word	0x08004273
 80042b4:	08004273 	.word	0x08004273
 80042b8:	08004273 	.word	0x08004273
 80042bc:	08004273 	.word	0x08004273
 80042c0:	08004273 	.word	0x08004273
 80042c4:	080043df 	.word	0x080043df
 80042c8:	080043b5 	.word	0x080043b5
 80042cc:	08004323 	.word	0x08004323
 80042d0:	08004323 	.word	0x08004323
 80042d4:	08004323 	.word	0x08004323
 80042d8:	08004273 	.word	0x08004273
 80042dc:	080043b9 	.word	0x080043b9
 80042e0:	08004273 	.word	0x08004273
 80042e4:	08004273 	.word	0x08004273
 80042e8:	08004273 	.word	0x08004273
 80042ec:	08004273 	.word	0x08004273
 80042f0:	080043ef 	.word	0x080043ef
 80042f4:	080043c1 	.word	0x080043c1
 80042f8:	08004363 	.word	0x08004363
 80042fc:	08004273 	.word	0x08004273
 8004300:	08004273 	.word	0x08004273
 8004304:	080043eb 	.word	0x080043eb
 8004308:	08004273 	.word	0x08004273
 800430c:	080043b5 	.word	0x080043b5
 8004310:	08004273 	.word	0x08004273
 8004314:	08004273 	.word	0x08004273
 8004318:	0800436b 	.word	0x0800436b
 800431c:	3b45      	subs	r3, #69	; 0x45
 800431e:	2b02      	cmp	r3, #2
 8004320:	d8a7      	bhi.n	8004272 <__ssvfiscanf_r+0xd2>
 8004322:	2305      	movs	r3, #5
 8004324:	e02b      	b.n	800437e <__ssvfiscanf_r+0x1de>
 8004326:	6863      	ldr	r3, [r4, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	dd0d      	ble.n	8004348 <__ssvfiscanf_r+0x1a8>
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	781a      	ldrb	r2, [r3, #0]
 8004330:	4552      	cmp	r2, sl
 8004332:	f040 80a1 	bne.w	8004478 <__ssvfiscanf_r+0x2d8>
 8004336:	3301      	adds	r3, #1
 8004338:	6862      	ldr	r2, [r4, #4]
 800433a:	6023      	str	r3, [r4, #0]
 800433c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800433e:	3a01      	subs	r2, #1
 8004340:	3301      	adds	r3, #1
 8004342:	6062      	str	r2, [r4, #4]
 8004344:	9345      	str	r3, [sp, #276]	; 0x114
 8004346:	e755      	b.n	80041f4 <__ssvfiscanf_r+0x54>
 8004348:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800434a:	4621      	mov	r1, r4
 800434c:	4630      	mov	r0, r6
 800434e:	4798      	blx	r3
 8004350:	2800      	cmp	r0, #0
 8004352:	d0eb      	beq.n	800432c <__ssvfiscanf_r+0x18c>
 8004354:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004356:	2800      	cmp	r0, #0
 8004358:	f040 8084 	bne.w	8004464 <__ssvfiscanf_r+0x2c4>
 800435c:	f04f 30ff 	mov.w	r0, #4294967295
 8004360:	e086      	b.n	8004470 <__ssvfiscanf_r+0x2d0>
 8004362:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004364:	f042 0220 	orr.w	r2, r2, #32
 8004368:	9241      	str	r2, [sp, #260]	; 0x104
 800436a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800436c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004370:	9241      	str	r2, [sp, #260]	; 0x104
 8004372:	2210      	movs	r2, #16
 8004374:	2b6f      	cmp	r3, #111	; 0x6f
 8004376:	9242      	str	r2, [sp, #264]	; 0x108
 8004378:	bf34      	ite	cc
 800437a:	2303      	movcc	r3, #3
 800437c:	2304      	movcs	r3, #4
 800437e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004380:	6863      	ldr	r3, [r4, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	dd41      	ble.n	800440a <__ssvfiscanf_r+0x26a>
 8004386:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004388:	0659      	lsls	r1, r3, #25
 800438a:	d404      	bmi.n	8004396 <__ssvfiscanf_r+0x1f6>
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	781a      	ldrb	r2, [r3, #0]
 8004390:	5cba      	ldrb	r2, [r7, r2]
 8004392:	0712      	lsls	r2, r2, #28
 8004394:	d440      	bmi.n	8004418 <__ssvfiscanf_r+0x278>
 8004396:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004398:	2b02      	cmp	r3, #2
 800439a:	dc4f      	bgt.n	800443c <__ssvfiscanf_r+0x29c>
 800439c:	466b      	mov	r3, sp
 800439e:	4622      	mov	r2, r4
 80043a0:	a941      	add	r1, sp, #260	; 0x104
 80043a2:	4630      	mov	r0, r6
 80043a4:	f000 fa08 	bl	80047b8 <_scanf_chars>
 80043a8:	2801      	cmp	r0, #1
 80043aa:	d065      	beq.n	8004478 <__ssvfiscanf_r+0x2d8>
 80043ac:	2802      	cmp	r0, #2
 80043ae:	f47f af21 	bne.w	80041f4 <__ssvfiscanf_r+0x54>
 80043b2:	e7cf      	b.n	8004354 <__ssvfiscanf_r+0x1b4>
 80043b4:	220a      	movs	r2, #10
 80043b6:	e7dd      	b.n	8004374 <__ssvfiscanf_r+0x1d4>
 80043b8:	2300      	movs	r3, #0
 80043ba:	9342      	str	r3, [sp, #264]	; 0x108
 80043bc:	2303      	movs	r3, #3
 80043be:	e7de      	b.n	800437e <__ssvfiscanf_r+0x1de>
 80043c0:	2308      	movs	r3, #8
 80043c2:	9342      	str	r3, [sp, #264]	; 0x108
 80043c4:	2304      	movs	r3, #4
 80043c6:	e7da      	b.n	800437e <__ssvfiscanf_r+0x1de>
 80043c8:	4629      	mov	r1, r5
 80043ca:	4640      	mov	r0, r8
 80043cc:	f000 fb40 	bl	8004a50 <__sccl>
 80043d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80043d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d6:	9341      	str	r3, [sp, #260]	; 0x104
 80043d8:	4605      	mov	r5, r0
 80043da:	2301      	movs	r3, #1
 80043dc:	e7cf      	b.n	800437e <__ssvfiscanf_r+0x1de>
 80043de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80043e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043e4:	9341      	str	r3, [sp, #260]	; 0x104
 80043e6:	2300      	movs	r3, #0
 80043e8:	e7c9      	b.n	800437e <__ssvfiscanf_r+0x1de>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e7c7      	b.n	800437e <__ssvfiscanf_r+0x1de>
 80043ee:	9841      	ldr	r0, [sp, #260]	; 0x104
 80043f0:	06c3      	lsls	r3, r0, #27
 80043f2:	f53f aeff 	bmi.w	80041f4 <__ssvfiscanf_r+0x54>
 80043f6:	9b00      	ldr	r3, [sp, #0]
 80043f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80043fa:	1d19      	adds	r1, r3, #4
 80043fc:	9100      	str	r1, [sp, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	07c0      	lsls	r0, r0, #31
 8004402:	bf4c      	ite	mi
 8004404:	801a      	strhmi	r2, [r3, #0]
 8004406:	601a      	strpl	r2, [r3, #0]
 8004408:	e6f4      	b.n	80041f4 <__ssvfiscanf_r+0x54>
 800440a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800440c:	4621      	mov	r1, r4
 800440e:	4630      	mov	r0, r6
 8004410:	4798      	blx	r3
 8004412:	2800      	cmp	r0, #0
 8004414:	d0b7      	beq.n	8004386 <__ssvfiscanf_r+0x1e6>
 8004416:	e79d      	b.n	8004354 <__ssvfiscanf_r+0x1b4>
 8004418:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800441a:	3201      	adds	r2, #1
 800441c:	9245      	str	r2, [sp, #276]	; 0x114
 800441e:	6862      	ldr	r2, [r4, #4]
 8004420:	3a01      	subs	r2, #1
 8004422:	2a00      	cmp	r2, #0
 8004424:	6062      	str	r2, [r4, #4]
 8004426:	dd02      	ble.n	800442e <__ssvfiscanf_r+0x28e>
 8004428:	3301      	adds	r3, #1
 800442a:	6023      	str	r3, [r4, #0]
 800442c:	e7ae      	b.n	800438c <__ssvfiscanf_r+0x1ec>
 800442e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004430:	4621      	mov	r1, r4
 8004432:	4630      	mov	r0, r6
 8004434:	4798      	blx	r3
 8004436:	2800      	cmp	r0, #0
 8004438:	d0a8      	beq.n	800438c <__ssvfiscanf_r+0x1ec>
 800443a:	e78b      	b.n	8004354 <__ssvfiscanf_r+0x1b4>
 800443c:	2b04      	cmp	r3, #4
 800443e:	dc06      	bgt.n	800444e <__ssvfiscanf_r+0x2ae>
 8004440:	466b      	mov	r3, sp
 8004442:	4622      	mov	r2, r4
 8004444:	a941      	add	r1, sp, #260	; 0x104
 8004446:	4630      	mov	r0, r6
 8004448:	f000 fa0e 	bl	8004868 <_scanf_i>
 800444c:	e7ac      	b.n	80043a8 <__ssvfiscanf_r+0x208>
 800444e:	4b0f      	ldr	r3, [pc, #60]	; (800448c <__ssvfiscanf_r+0x2ec>)
 8004450:	2b00      	cmp	r3, #0
 8004452:	f43f aecf 	beq.w	80041f4 <__ssvfiscanf_r+0x54>
 8004456:	466b      	mov	r3, sp
 8004458:	4622      	mov	r2, r4
 800445a:	a941      	add	r1, sp, #260	; 0x104
 800445c:	4630      	mov	r0, r6
 800445e:	f3af 8000 	nop.w
 8004462:	e7a1      	b.n	80043a8 <__ssvfiscanf_r+0x208>
 8004464:	89a3      	ldrh	r3, [r4, #12]
 8004466:	f013 0f40 	tst.w	r3, #64	; 0x40
 800446a:	bf18      	it	ne
 800446c:	f04f 30ff 	movne.w	r0, #4294967295
 8004470:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8004474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004478:	9844      	ldr	r0, [sp, #272]	; 0x110
 800447a:	e7f9      	b.n	8004470 <__ssvfiscanf_r+0x2d0>
 800447c:	080040ed 	.word	0x080040ed
 8004480:	08004167 	.word	0x08004167
 8004484:	0800510b 	.word	0x0800510b
 8004488:	080050c2 	.word	0x080050c2
 800448c:	00000000 	.word	0x00000000

08004490 <_printf_common>:
 8004490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004494:	4616      	mov	r6, r2
 8004496:	4699      	mov	r9, r3
 8004498:	688a      	ldr	r2, [r1, #8]
 800449a:	690b      	ldr	r3, [r1, #16]
 800449c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044a0:	4293      	cmp	r3, r2
 80044a2:	bfb8      	it	lt
 80044a4:	4613      	movlt	r3, r2
 80044a6:	6033      	str	r3, [r6, #0]
 80044a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044ac:	4607      	mov	r7, r0
 80044ae:	460c      	mov	r4, r1
 80044b0:	b10a      	cbz	r2, 80044b6 <_printf_common+0x26>
 80044b2:	3301      	adds	r3, #1
 80044b4:	6033      	str	r3, [r6, #0]
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	0699      	lsls	r1, r3, #26
 80044ba:	bf42      	ittt	mi
 80044bc:	6833      	ldrmi	r3, [r6, #0]
 80044be:	3302      	addmi	r3, #2
 80044c0:	6033      	strmi	r3, [r6, #0]
 80044c2:	6825      	ldr	r5, [r4, #0]
 80044c4:	f015 0506 	ands.w	r5, r5, #6
 80044c8:	d106      	bne.n	80044d8 <_printf_common+0x48>
 80044ca:	f104 0a19 	add.w	sl, r4, #25
 80044ce:	68e3      	ldr	r3, [r4, #12]
 80044d0:	6832      	ldr	r2, [r6, #0]
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	42ab      	cmp	r3, r5
 80044d6:	dc26      	bgt.n	8004526 <_printf_common+0x96>
 80044d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044dc:	1e13      	subs	r3, r2, #0
 80044de:	6822      	ldr	r2, [r4, #0]
 80044e0:	bf18      	it	ne
 80044e2:	2301      	movne	r3, #1
 80044e4:	0692      	lsls	r2, r2, #26
 80044e6:	d42b      	bmi.n	8004540 <_printf_common+0xb0>
 80044e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044ec:	4649      	mov	r1, r9
 80044ee:	4638      	mov	r0, r7
 80044f0:	47c0      	blx	r8
 80044f2:	3001      	adds	r0, #1
 80044f4:	d01e      	beq.n	8004534 <_printf_common+0xa4>
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	68e5      	ldr	r5, [r4, #12]
 80044fa:	6832      	ldr	r2, [r6, #0]
 80044fc:	f003 0306 	and.w	r3, r3, #6
 8004500:	2b04      	cmp	r3, #4
 8004502:	bf08      	it	eq
 8004504:	1aad      	subeq	r5, r5, r2
 8004506:	68a3      	ldr	r3, [r4, #8]
 8004508:	6922      	ldr	r2, [r4, #16]
 800450a:	bf0c      	ite	eq
 800450c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004510:	2500      	movne	r5, #0
 8004512:	4293      	cmp	r3, r2
 8004514:	bfc4      	itt	gt
 8004516:	1a9b      	subgt	r3, r3, r2
 8004518:	18ed      	addgt	r5, r5, r3
 800451a:	2600      	movs	r6, #0
 800451c:	341a      	adds	r4, #26
 800451e:	42b5      	cmp	r5, r6
 8004520:	d11a      	bne.n	8004558 <_printf_common+0xc8>
 8004522:	2000      	movs	r0, #0
 8004524:	e008      	b.n	8004538 <_printf_common+0xa8>
 8004526:	2301      	movs	r3, #1
 8004528:	4652      	mov	r2, sl
 800452a:	4649      	mov	r1, r9
 800452c:	4638      	mov	r0, r7
 800452e:	47c0      	blx	r8
 8004530:	3001      	adds	r0, #1
 8004532:	d103      	bne.n	800453c <_printf_common+0xac>
 8004534:	f04f 30ff 	mov.w	r0, #4294967295
 8004538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800453c:	3501      	adds	r5, #1
 800453e:	e7c6      	b.n	80044ce <_printf_common+0x3e>
 8004540:	18e1      	adds	r1, r4, r3
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	2030      	movs	r0, #48	; 0x30
 8004546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800454a:	4422      	add	r2, r4
 800454c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004554:	3302      	adds	r3, #2
 8004556:	e7c7      	b.n	80044e8 <_printf_common+0x58>
 8004558:	2301      	movs	r3, #1
 800455a:	4622      	mov	r2, r4
 800455c:	4649      	mov	r1, r9
 800455e:	4638      	mov	r0, r7
 8004560:	47c0      	blx	r8
 8004562:	3001      	adds	r0, #1
 8004564:	d0e6      	beq.n	8004534 <_printf_common+0xa4>
 8004566:	3601      	adds	r6, #1
 8004568:	e7d9      	b.n	800451e <_printf_common+0x8e>
	...

0800456c <_printf_i>:
 800456c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004570:	460c      	mov	r4, r1
 8004572:	4691      	mov	r9, r2
 8004574:	7e27      	ldrb	r7, [r4, #24]
 8004576:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004578:	2f78      	cmp	r7, #120	; 0x78
 800457a:	4680      	mov	r8, r0
 800457c:	469a      	mov	sl, r3
 800457e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004582:	d807      	bhi.n	8004594 <_printf_i+0x28>
 8004584:	2f62      	cmp	r7, #98	; 0x62
 8004586:	d80a      	bhi.n	800459e <_printf_i+0x32>
 8004588:	2f00      	cmp	r7, #0
 800458a:	f000 80d8 	beq.w	800473e <_printf_i+0x1d2>
 800458e:	2f58      	cmp	r7, #88	; 0x58
 8004590:	f000 80a3 	beq.w	80046da <_printf_i+0x16e>
 8004594:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800459c:	e03a      	b.n	8004614 <_printf_i+0xa8>
 800459e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045a2:	2b15      	cmp	r3, #21
 80045a4:	d8f6      	bhi.n	8004594 <_printf_i+0x28>
 80045a6:	a001      	add	r0, pc, #4	; (adr r0, 80045ac <_printf_i+0x40>)
 80045a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80045ac:	08004605 	.word	0x08004605
 80045b0:	08004619 	.word	0x08004619
 80045b4:	08004595 	.word	0x08004595
 80045b8:	08004595 	.word	0x08004595
 80045bc:	08004595 	.word	0x08004595
 80045c0:	08004595 	.word	0x08004595
 80045c4:	08004619 	.word	0x08004619
 80045c8:	08004595 	.word	0x08004595
 80045cc:	08004595 	.word	0x08004595
 80045d0:	08004595 	.word	0x08004595
 80045d4:	08004595 	.word	0x08004595
 80045d8:	08004725 	.word	0x08004725
 80045dc:	08004649 	.word	0x08004649
 80045e0:	08004707 	.word	0x08004707
 80045e4:	08004595 	.word	0x08004595
 80045e8:	08004595 	.word	0x08004595
 80045ec:	08004747 	.word	0x08004747
 80045f0:	08004595 	.word	0x08004595
 80045f4:	08004649 	.word	0x08004649
 80045f8:	08004595 	.word	0x08004595
 80045fc:	08004595 	.word	0x08004595
 8004600:	0800470f 	.word	0x0800470f
 8004604:	680b      	ldr	r3, [r1, #0]
 8004606:	1d1a      	adds	r2, r3, #4
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	600a      	str	r2, [r1, #0]
 800460c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004614:	2301      	movs	r3, #1
 8004616:	e0a3      	b.n	8004760 <_printf_i+0x1f4>
 8004618:	6825      	ldr	r5, [r4, #0]
 800461a:	6808      	ldr	r0, [r1, #0]
 800461c:	062e      	lsls	r6, r5, #24
 800461e:	f100 0304 	add.w	r3, r0, #4
 8004622:	d50a      	bpl.n	800463a <_printf_i+0xce>
 8004624:	6805      	ldr	r5, [r0, #0]
 8004626:	600b      	str	r3, [r1, #0]
 8004628:	2d00      	cmp	r5, #0
 800462a:	da03      	bge.n	8004634 <_printf_i+0xc8>
 800462c:	232d      	movs	r3, #45	; 0x2d
 800462e:	426d      	negs	r5, r5
 8004630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004634:	485e      	ldr	r0, [pc, #376]	; (80047b0 <_printf_i+0x244>)
 8004636:	230a      	movs	r3, #10
 8004638:	e019      	b.n	800466e <_printf_i+0x102>
 800463a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800463e:	6805      	ldr	r5, [r0, #0]
 8004640:	600b      	str	r3, [r1, #0]
 8004642:	bf18      	it	ne
 8004644:	b22d      	sxthne	r5, r5
 8004646:	e7ef      	b.n	8004628 <_printf_i+0xbc>
 8004648:	680b      	ldr	r3, [r1, #0]
 800464a:	6825      	ldr	r5, [r4, #0]
 800464c:	1d18      	adds	r0, r3, #4
 800464e:	6008      	str	r0, [r1, #0]
 8004650:	0628      	lsls	r0, r5, #24
 8004652:	d501      	bpl.n	8004658 <_printf_i+0xec>
 8004654:	681d      	ldr	r5, [r3, #0]
 8004656:	e002      	b.n	800465e <_printf_i+0xf2>
 8004658:	0669      	lsls	r1, r5, #25
 800465a:	d5fb      	bpl.n	8004654 <_printf_i+0xe8>
 800465c:	881d      	ldrh	r5, [r3, #0]
 800465e:	4854      	ldr	r0, [pc, #336]	; (80047b0 <_printf_i+0x244>)
 8004660:	2f6f      	cmp	r7, #111	; 0x6f
 8004662:	bf0c      	ite	eq
 8004664:	2308      	moveq	r3, #8
 8004666:	230a      	movne	r3, #10
 8004668:	2100      	movs	r1, #0
 800466a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800466e:	6866      	ldr	r6, [r4, #4]
 8004670:	60a6      	str	r6, [r4, #8]
 8004672:	2e00      	cmp	r6, #0
 8004674:	bfa2      	ittt	ge
 8004676:	6821      	ldrge	r1, [r4, #0]
 8004678:	f021 0104 	bicge.w	r1, r1, #4
 800467c:	6021      	strge	r1, [r4, #0]
 800467e:	b90d      	cbnz	r5, 8004684 <_printf_i+0x118>
 8004680:	2e00      	cmp	r6, #0
 8004682:	d04d      	beq.n	8004720 <_printf_i+0x1b4>
 8004684:	4616      	mov	r6, r2
 8004686:	fbb5 f1f3 	udiv	r1, r5, r3
 800468a:	fb03 5711 	mls	r7, r3, r1, r5
 800468e:	5dc7      	ldrb	r7, [r0, r7]
 8004690:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004694:	462f      	mov	r7, r5
 8004696:	42bb      	cmp	r3, r7
 8004698:	460d      	mov	r5, r1
 800469a:	d9f4      	bls.n	8004686 <_printf_i+0x11a>
 800469c:	2b08      	cmp	r3, #8
 800469e:	d10b      	bne.n	80046b8 <_printf_i+0x14c>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	07df      	lsls	r7, r3, #31
 80046a4:	d508      	bpl.n	80046b8 <_printf_i+0x14c>
 80046a6:	6923      	ldr	r3, [r4, #16]
 80046a8:	6861      	ldr	r1, [r4, #4]
 80046aa:	4299      	cmp	r1, r3
 80046ac:	bfde      	ittt	le
 80046ae:	2330      	movle	r3, #48	; 0x30
 80046b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046b8:	1b92      	subs	r2, r2, r6
 80046ba:	6122      	str	r2, [r4, #16]
 80046bc:	f8cd a000 	str.w	sl, [sp]
 80046c0:	464b      	mov	r3, r9
 80046c2:	aa03      	add	r2, sp, #12
 80046c4:	4621      	mov	r1, r4
 80046c6:	4640      	mov	r0, r8
 80046c8:	f7ff fee2 	bl	8004490 <_printf_common>
 80046cc:	3001      	adds	r0, #1
 80046ce:	d14c      	bne.n	800476a <_printf_i+0x1fe>
 80046d0:	f04f 30ff 	mov.w	r0, #4294967295
 80046d4:	b004      	add	sp, #16
 80046d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046da:	4835      	ldr	r0, [pc, #212]	; (80047b0 <_printf_i+0x244>)
 80046dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	680e      	ldr	r6, [r1, #0]
 80046e4:	061f      	lsls	r7, r3, #24
 80046e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80046ea:	600e      	str	r6, [r1, #0]
 80046ec:	d514      	bpl.n	8004718 <_printf_i+0x1ac>
 80046ee:	07d9      	lsls	r1, r3, #31
 80046f0:	bf44      	itt	mi
 80046f2:	f043 0320 	orrmi.w	r3, r3, #32
 80046f6:	6023      	strmi	r3, [r4, #0]
 80046f8:	b91d      	cbnz	r5, 8004702 <_printf_i+0x196>
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	f023 0320 	bic.w	r3, r3, #32
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	2310      	movs	r3, #16
 8004704:	e7b0      	b.n	8004668 <_printf_i+0xfc>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	f043 0320 	orr.w	r3, r3, #32
 800470c:	6023      	str	r3, [r4, #0]
 800470e:	2378      	movs	r3, #120	; 0x78
 8004710:	4828      	ldr	r0, [pc, #160]	; (80047b4 <_printf_i+0x248>)
 8004712:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004716:	e7e3      	b.n	80046e0 <_printf_i+0x174>
 8004718:	065e      	lsls	r6, r3, #25
 800471a:	bf48      	it	mi
 800471c:	b2ad      	uxthmi	r5, r5
 800471e:	e7e6      	b.n	80046ee <_printf_i+0x182>
 8004720:	4616      	mov	r6, r2
 8004722:	e7bb      	b.n	800469c <_printf_i+0x130>
 8004724:	680b      	ldr	r3, [r1, #0]
 8004726:	6826      	ldr	r6, [r4, #0]
 8004728:	6960      	ldr	r0, [r4, #20]
 800472a:	1d1d      	adds	r5, r3, #4
 800472c:	600d      	str	r5, [r1, #0]
 800472e:	0635      	lsls	r5, r6, #24
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	d501      	bpl.n	8004738 <_printf_i+0x1cc>
 8004734:	6018      	str	r0, [r3, #0]
 8004736:	e002      	b.n	800473e <_printf_i+0x1d2>
 8004738:	0671      	lsls	r1, r6, #25
 800473a:	d5fb      	bpl.n	8004734 <_printf_i+0x1c8>
 800473c:	8018      	strh	r0, [r3, #0]
 800473e:	2300      	movs	r3, #0
 8004740:	6123      	str	r3, [r4, #16]
 8004742:	4616      	mov	r6, r2
 8004744:	e7ba      	b.n	80046bc <_printf_i+0x150>
 8004746:	680b      	ldr	r3, [r1, #0]
 8004748:	1d1a      	adds	r2, r3, #4
 800474a:	600a      	str	r2, [r1, #0]
 800474c:	681e      	ldr	r6, [r3, #0]
 800474e:	6862      	ldr	r2, [r4, #4]
 8004750:	2100      	movs	r1, #0
 8004752:	4630      	mov	r0, r6
 8004754:	f7fb fd64 	bl	8000220 <memchr>
 8004758:	b108      	cbz	r0, 800475e <_printf_i+0x1f2>
 800475a:	1b80      	subs	r0, r0, r6
 800475c:	6060      	str	r0, [r4, #4]
 800475e:	6863      	ldr	r3, [r4, #4]
 8004760:	6123      	str	r3, [r4, #16]
 8004762:	2300      	movs	r3, #0
 8004764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004768:	e7a8      	b.n	80046bc <_printf_i+0x150>
 800476a:	6923      	ldr	r3, [r4, #16]
 800476c:	4632      	mov	r2, r6
 800476e:	4649      	mov	r1, r9
 8004770:	4640      	mov	r0, r8
 8004772:	47d0      	blx	sl
 8004774:	3001      	adds	r0, #1
 8004776:	d0ab      	beq.n	80046d0 <_printf_i+0x164>
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	079b      	lsls	r3, r3, #30
 800477c:	d413      	bmi.n	80047a6 <_printf_i+0x23a>
 800477e:	68e0      	ldr	r0, [r4, #12]
 8004780:	9b03      	ldr	r3, [sp, #12]
 8004782:	4298      	cmp	r0, r3
 8004784:	bfb8      	it	lt
 8004786:	4618      	movlt	r0, r3
 8004788:	e7a4      	b.n	80046d4 <_printf_i+0x168>
 800478a:	2301      	movs	r3, #1
 800478c:	4632      	mov	r2, r6
 800478e:	4649      	mov	r1, r9
 8004790:	4640      	mov	r0, r8
 8004792:	47d0      	blx	sl
 8004794:	3001      	adds	r0, #1
 8004796:	d09b      	beq.n	80046d0 <_printf_i+0x164>
 8004798:	3501      	adds	r5, #1
 800479a:	68e3      	ldr	r3, [r4, #12]
 800479c:	9903      	ldr	r1, [sp, #12]
 800479e:	1a5b      	subs	r3, r3, r1
 80047a0:	42ab      	cmp	r3, r5
 80047a2:	dcf2      	bgt.n	800478a <_printf_i+0x21e>
 80047a4:	e7eb      	b.n	800477e <_printf_i+0x212>
 80047a6:	2500      	movs	r5, #0
 80047a8:	f104 0619 	add.w	r6, r4, #25
 80047ac:	e7f5      	b.n	800479a <_printf_i+0x22e>
 80047ae:	bf00      	nop
 80047b0:	080050cd 	.word	0x080050cd
 80047b4:	080050de 	.word	0x080050de

080047b8 <_scanf_chars>:
 80047b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047bc:	4615      	mov	r5, r2
 80047be:	688a      	ldr	r2, [r1, #8]
 80047c0:	4680      	mov	r8, r0
 80047c2:	460c      	mov	r4, r1
 80047c4:	b932      	cbnz	r2, 80047d4 <_scanf_chars+0x1c>
 80047c6:	698a      	ldr	r2, [r1, #24]
 80047c8:	2a00      	cmp	r2, #0
 80047ca:	bf0c      	ite	eq
 80047cc:	2201      	moveq	r2, #1
 80047ce:	f04f 32ff 	movne.w	r2, #4294967295
 80047d2:	608a      	str	r2, [r1, #8]
 80047d4:	6822      	ldr	r2, [r4, #0]
 80047d6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8004864 <_scanf_chars+0xac>
 80047da:	06d1      	lsls	r1, r2, #27
 80047dc:	bf5f      	itttt	pl
 80047de:	681a      	ldrpl	r2, [r3, #0]
 80047e0:	1d11      	addpl	r1, r2, #4
 80047e2:	6019      	strpl	r1, [r3, #0]
 80047e4:	6816      	ldrpl	r6, [r2, #0]
 80047e6:	2700      	movs	r7, #0
 80047e8:	69a0      	ldr	r0, [r4, #24]
 80047ea:	b188      	cbz	r0, 8004810 <_scanf_chars+0x58>
 80047ec:	2801      	cmp	r0, #1
 80047ee:	d107      	bne.n	8004800 <_scanf_chars+0x48>
 80047f0:	682b      	ldr	r3, [r5, #0]
 80047f2:	781a      	ldrb	r2, [r3, #0]
 80047f4:	6963      	ldr	r3, [r4, #20]
 80047f6:	5c9b      	ldrb	r3, [r3, r2]
 80047f8:	b953      	cbnz	r3, 8004810 <_scanf_chars+0x58>
 80047fa:	bb27      	cbnz	r7, 8004846 <_scanf_chars+0x8e>
 80047fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004800:	2802      	cmp	r0, #2
 8004802:	d120      	bne.n	8004846 <_scanf_chars+0x8e>
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	f813 3009 	ldrb.w	r3, [r3, r9]
 800480c:	071b      	lsls	r3, r3, #28
 800480e:	d41a      	bmi.n	8004846 <_scanf_chars+0x8e>
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	06da      	lsls	r2, r3, #27
 8004814:	bf5e      	ittt	pl
 8004816:	682b      	ldrpl	r3, [r5, #0]
 8004818:	781b      	ldrbpl	r3, [r3, #0]
 800481a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800481e:	682a      	ldr	r2, [r5, #0]
 8004820:	686b      	ldr	r3, [r5, #4]
 8004822:	3201      	adds	r2, #1
 8004824:	602a      	str	r2, [r5, #0]
 8004826:	68a2      	ldr	r2, [r4, #8]
 8004828:	3b01      	subs	r3, #1
 800482a:	3a01      	subs	r2, #1
 800482c:	606b      	str	r3, [r5, #4]
 800482e:	3701      	adds	r7, #1
 8004830:	60a2      	str	r2, [r4, #8]
 8004832:	b142      	cbz	r2, 8004846 <_scanf_chars+0x8e>
 8004834:	2b00      	cmp	r3, #0
 8004836:	dcd7      	bgt.n	80047e8 <_scanf_chars+0x30>
 8004838:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800483c:	4629      	mov	r1, r5
 800483e:	4640      	mov	r0, r8
 8004840:	4798      	blx	r3
 8004842:	2800      	cmp	r0, #0
 8004844:	d0d0      	beq.n	80047e8 <_scanf_chars+0x30>
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	f013 0310 	ands.w	r3, r3, #16
 800484c:	d105      	bne.n	800485a <_scanf_chars+0xa2>
 800484e:	68e2      	ldr	r2, [r4, #12]
 8004850:	3201      	adds	r2, #1
 8004852:	60e2      	str	r2, [r4, #12]
 8004854:	69a2      	ldr	r2, [r4, #24]
 8004856:	b102      	cbz	r2, 800485a <_scanf_chars+0xa2>
 8004858:	7033      	strb	r3, [r6, #0]
 800485a:	6923      	ldr	r3, [r4, #16]
 800485c:	441f      	add	r7, r3
 800485e:	6127      	str	r7, [r4, #16]
 8004860:	2000      	movs	r0, #0
 8004862:	e7cb      	b.n	80047fc <_scanf_chars+0x44>
 8004864:	0800510b 	.word	0x0800510b

08004868 <_scanf_i>:
 8004868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486c:	4698      	mov	r8, r3
 800486e:	4b74      	ldr	r3, [pc, #464]	; (8004a40 <_scanf_i+0x1d8>)
 8004870:	460c      	mov	r4, r1
 8004872:	4682      	mov	sl, r0
 8004874:	4616      	mov	r6, r2
 8004876:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800487a:	b087      	sub	sp, #28
 800487c:	ab03      	add	r3, sp, #12
 800487e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004882:	4b70      	ldr	r3, [pc, #448]	; (8004a44 <_scanf_i+0x1dc>)
 8004884:	69a1      	ldr	r1, [r4, #24]
 8004886:	4a70      	ldr	r2, [pc, #448]	; (8004a48 <_scanf_i+0x1e0>)
 8004888:	2903      	cmp	r1, #3
 800488a:	bf18      	it	ne
 800488c:	461a      	movne	r2, r3
 800488e:	68a3      	ldr	r3, [r4, #8]
 8004890:	9201      	str	r2, [sp, #4]
 8004892:	1e5a      	subs	r2, r3, #1
 8004894:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004898:	bf88      	it	hi
 800489a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800489e:	4627      	mov	r7, r4
 80048a0:	bf82      	ittt	hi
 80048a2:	eb03 0905 	addhi.w	r9, r3, r5
 80048a6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80048aa:	60a3      	strhi	r3, [r4, #8]
 80048ac:	f857 3b1c 	ldr.w	r3, [r7], #28
 80048b0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80048b4:	bf98      	it	ls
 80048b6:	f04f 0900 	movls.w	r9, #0
 80048ba:	6023      	str	r3, [r4, #0]
 80048bc:	463d      	mov	r5, r7
 80048be:	f04f 0b00 	mov.w	fp, #0
 80048c2:	6831      	ldr	r1, [r6, #0]
 80048c4:	ab03      	add	r3, sp, #12
 80048c6:	7809      	ldrb	r1, [r1, #0]
 80048c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80048cc:	2202      	movs	r2, #2
 80048ce:	f7fb fca7 	bl	8000220 <memchr>
 80048d2:	b328      	cbz	r0, 8004920 <_scanf_i+0xb8>
 80048d4:	f1bb 0f01 	cmp.w	fp, #1
 80048d8:	d159      	bne.n	800498e <_scanf_i+0x126>
 80048da:	6862      	ldr	r2, [r4, #4]
 80048dc:	b92a      	cbnz	r2, 80048ea <_scanf_i+0x82>
 80048de:	6822      	ldr	r2, [r4, #0]
 80048e0:	2308      	movs	r3, #8
 80048e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048e6:	6063      	str	r3, [r4, #4]
 80048e8:	6022      	str	r2, [r4, #0]
 80048ea:	6822      	ldr	r2, [r4, #0]
 80048ec:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80048f0:	6022      	str	r2, [r4, #0]
 80048f2:	68a2      	ldr	r2, [r4, #8]
 80048f4:	1e51      	subs	r1, r2, #1
 80048f6:	60a1      	str	r1, [r4, #8]
 80048f8:	b192      	cbz	r2, 8004920 <_scanf_i+0xb8>
 80048fa:	6832      	ldr	r2, [r6, #0]
 80048fc:	1c51      	adds	r1, r2, #1
 80048fe:	6031      	str	r1, [r6, #0]
 8004900:	7812      	ldrb	r2, [r2, #0]
 8004902:	f805 2b01 	strb.w	r2, [r5], #1
 8004906:	6872      	ldr	r2, [r6, #4]
 8004908:	3a01      	subs	r2, #1
 800490a:	2a00      	cmp	r2, #0
 800490c:	6072      	str	r2, [r6, #4]
 800490e:	dc07      	bgt.n	8004920 <_scanf_i+0xb8>
 8004910:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004914:	4631      	mov	r1, r6
 8004916:	4650      	mov	r0, sl
 8004918:	4790      	blx	r2
 800491a:	2800      	cmp	r0, #0
 800491c:	f040 8085 	bne.w	8004a2a <_scanf_i+0x1c2>
 8004920:	f10b 0b01 	add.w	fp, fp, #1
 8004924:	f1bb 0f03 	cmp.w	fp, #3
 8004928:	d1cb      	bne.n	80048c2 <_scanf_i+0x5a>
 800492a:	6863      	ldr	r3, [r4, #4]
 800492c:	b90b      	cbnz	r3, 8004932 <_scanf_i+0xca>
 800492e:	230a      	movs	r3, #10
 8004930:	6063      	str	r3, [r4, #4]
 8004932:	6863      	ldr	r3, [r4, #4]
 8004934:	4945      	ldr	r1, [pc, #276]	; (8004a4c <_scanf_i+0x1e4>)
 8004936:	6960      	ldr	r0, [r4, #20]
 8004938:	1ac9      	subs	r1, r1, r3
 800493a:	f000 f889 	bl	8004a50 <__sccl>
 800493e:	f04f 0b00 	mov.w	fp, #0
 8004942:	68a3      	ldr	r3, [r4, #8]
 8004944:	6822      	ldr	r2, [r4, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d03d      	beq.n	80049c6 <_scanf_i+0x15e>
 800494a:	6831      	ldr	r1, [r6, #0]
 800494c:	6960      	ldr	r0, [r4, #20]
 800494e:	f891 c000 	ldrb.w	ip, [r1]
 8004952:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004956:	2800      	cmp	r0, #0
 8004958:	d035      	beq.n	80049c6 <_scanf_i+0x15e>
 800495a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800495e:	d124      	bne.n	80049aa <_scanf_i+0x142>
 8004960:	0510      	lsls	r0, r2, #20
 8004962:	d522      	bpl.n	80049aa <_scanf_i+0x142>
 8004964:	f10b 0b01 	add.w	fp, fp, #1
 8004968:	f1b9 0f00 	cmp.w	r9, #0
 800496c:	d003      	beq.n	8004976 <_scanf_i+0x10e>
 800496e:	3301      	adds	r3, #1
 8004970:	f109 39ff 	add.w	r9, r9, #4294967295
 8004974:	60a3      	str	r3, [r4, #8]
 8004976:	6873      	ldr	r3, [r6, #4]
 8004978:	3b01      	subs	r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	6073      	str	r3, [r6, #4]
 800497e:	dd1b      	ble.n	80049b8 <_scanf_i+0x150>
 8004980:	6833      	ldr	r3, [r6, #0]
 8004982:	3301      	adds	r3, #1
 8004984:	6033      	str	r3, [r6, #0]
 8004986:	68a3      	ldr	r3, [r4, #8]
 8004988:	3b01      	subs	r3, #1
 800498a:	60a3      	str	r3, [r4, #8]
 800498c:	e7d9      	b.n	8004942 <_scanf_i+0xda>
 800498e:	f1bb 0f02 	cmp.w	fp, #2
 8004992:	d1ae      	bne.n	80048f2 <_scanf_i+0x8a>
 8004994:	6822      	ldr	r2, [r4, #0]
 8004996:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800499a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800499e:	d1bf      	bne.n	8004920 <_scanf_i+0xb8>
 80049a0:	2310      	movs	r3, #16
 80049a2:	6063      	str	r3, [r4, #4]
 80049a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a8:	e7a2      	b.n	80048f0 <_scanf_i+0x88>
 80049aa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80049ae:	6022      	str	r2, [r4, #0]
 80049b0:	780b      	ldrb	r3, [r1, #0]
 80049b2:	f805 3b01 	strb.w	r3, [r5], #1
 80049b6:	e7de      	b.n	8004976 <_scanf_i+0x10e>
 80049b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80049bc:	4631      	mov	r1, r6
 80049be:	4650      	mov	r0, sl
 80049c0:	4798      	blx	r3
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d0df      	beq.n	8004986 <_scanf_i+0x11e>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	05d9      	lsls	r1, r3, #23
 80049ca:	d50d      	bpl.n	80049e8 <_scanf_i+0x180>
 80049cc:	42bd      	cmp	r5, r7
 80049ce:	d909      	bls.n	80049e4 <_scanf_i+0x17c>
 80049d0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80049d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049d8:	4632      	mov	r2, r6
 80049da:	4650      	mov	r0, sl
 80049dc:	4798      	blx	r3
 80049de:	f105 39ff 	add.w	r9, r5, #4294967295
 80049e2:	464d      	mov	r5, r9
 80049e4:	42bd      	cmp	r5, r7
 80049e6:	d028      	beq.n	8004a3a <_scanf_i+0x1d2>
 80049e8:	6822      	ldr	r2, [r4, #0]
 80049ea:	f012 0210 	ands.w	r2, r2, #16
 80049ee:	d113      	bne.n	8004a18 <_scanf_i+0x1b0>
 80049f0:	702a      	strb	r2, [r5, #0]
 80049f2:	6863      	ldr	r3, [r4, #4]
 80049f4:	9e01      	ldr	r6, [sp, #4]
 80049f6:	4639      	mov	r1, r7
 80049f8:	4650      	mov	r0, sl
 80049fa:	47b0      	blx	r6
 80049fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004a00:	6821      	ldr	r1, [r4, #0]
 8004a02:	1d1a      	adds	r2, r3, #4
 8004a04:	f8c8 2000 	str.w	r2, [r8]
 8004a08:	f011 0f20 	tst.w	r1, #32
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	d00f      	beq.n	8004a30 <_scanf_i+0x1c8>
 8004a10:	6018      	str	r0, [r3, #0]
 8004a12:	68e3      	ldr	r3, [r4, #12]
 8004a14:	3301      	adds	r3, #1
 8004a16:	60e3      	str	r3, [r4, #12]
 8004a18:	1bed      	subs	r5, r5, r7
 8004a1a:	44ab      	add	fp, r5
 8004a1c:	6925      	ldr	r5, [r4, #16]
 8004a1e:	445d      	add	r5, fp
 8004a20:	6125      	str	r5, [r4, #16]
 8004a22:	2000      	movs	r0, #0
 8004a24:	b007      	add	sp, #28
 8004a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a2a:	f04f 0b00 	mov.w	fp, #0
 8004a2e:	e7ca      	b.n	80049c6 <_scanf_i+0x15e>
 8004a30:	07ca      	lsls	r2, r1, #31
 8004a32:	bf4c      	ite	mi
 8004a34:	8018      	strhmi	r0, [r3, #0]
 8004a36:	6018      	strpl	r0, [r3, #0]
 8004a38:	e7eb      	b.n	8004a12 <_scanf_i+0x1aa>
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	e7f2      	b.n	8004a24 <_scanf_i+0x1bc>
 8004a3e:	bf00      	nop
 8004a40:	08005098 	.word	0x08005098
 8004a44:	08004cc9 	.word	0x08004cc9
 8004a48:	08004bcd 	.word	0x08004bcd
 8004a4c:	08005108 	.word	0x08005108

08004a50 <__sccl>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	780b      	ldrb	r3, [r1, #0]
 8004a54:	4604      	mov	r4, r0
 8004a56:	2b5e      	cmp	r3, #94	; 0x5e
 8004a58:	bf0b      	itete	eq
 8004a5a:	784b      	ldrbeq	r3, [r1, #1]
 8004a5c:	1c48      	addne	r0, r1, #1
 8004a5e:	1c88      	addeq	r0, r1, #2
 8004a60:	2200      	movne	r2, #0
 8004a62:	bf08      	it	eq
 8004a64:	2201      	moveq	r2, #1
 8004a66:	1e61      	subs	r1, r4, #1
 8004a68:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004a6c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004a70:	42a9      	cmp	r1, r5
 8004a72:	d1fb      	bne.n	8004a6c <__sccl+0x1c>
 8004a74:	b90b      	cbnz	r3, 8004a7a <__sccl+0x2a>
 8004a76:	3801      	subs	r0, #1
 8004a78:	bd70      	pop	{r4, r5, r6, pc}
 8004a7a:	f082 0101 	eor.w	r1, r2, #1
 8004a7e:	54e1      	strb	r1, [r4, r3]
 8004a80:	1c42      	adds	r2, r0, #1
 8004a82:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8004a86:	2d2d      	cmp	r5, #45	; 0x2d
 8004a88:	f102 36ff 	add.w	r6, r2, #4294967295
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	d006      	beq.n	8004a9e <__sccl+0x4e>
 8004a90:	2d5d      	cmp	r5, #93	; 0x5d
 8004a92:	d0f1      	beq.n	8004a78 <__sccl+0x28>
 8004a94:	b90d      	cbnz	r5, 8004a9a <__sccl+0x4a>
 8004a96:	4630      	mov	r0, r6
 8004a98:	e7ee      	b.n	8004a78 <__sccl+0x28>
 8004a9a:	462b      	mov	r3, r5
 8004a9c:	e7ef      	b.n	8004a7e <__sccl+0x2e>
 8004a9e:	7816      	ldrb	r6, [r2, #0]
 8004aa0:	2e5d      	cmp	r6, #93	; 0x5d
 8004aa2:	d0fa      	beq.n	8004a9a <__sccl+0x4a>
 8004aa4:	42b3      	cmp	r3, r6
 8004aa6:	dcf8      	bgt.n	8004a9a <__sccl+0x4a>
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3001      	adds	r0, #1
 8004aac:	4286      	cmp	r6, r0
 8004aae:	5421      	strb	r1, [r4, r0]
 8004ab0:	dcfb      	bgt.n	8004aaa <__sccl+0x5a>
 8004ab2:	43d8      	mvns	r0, r3
 8004ab4:	4430      	add	r0, r6
 8004ab6:	1c5d      	adds	r5, r3, #1
 8004ab8:	42b3      	cmp	r3, r6
 8004aba:	bfa8      	it	ge
 8004abc:	2000      	movge	r0, #0
 8004abe:	182b      	adds	r3, r5, r0
 8004ac0:	3202      	adds	r2, #2
 8004ac2:	e7de      	b.n	8004a82 <__sccl+0x32>

08004ac4 <_strtol_l.isra.0>:
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aca:	d001      	beq.n	8004ad0 <_strtol_l.isra.0+0xc>
 8004acc:	2b24      	cmp	r3, #36	; 0x24
 8004ace:	d906      	bls.n	8004ade <_strtol_l.isra.0+0x1a>
 8004ad0:	f7ff f930 	bl	8003d34 <__errno>
 8004ad4:	2316      	movs	r3, #22
 8004ad6:	6003      	str	r3, [r0, #0]
 8004ad8:	2000      	movs	r0, #0
 8004ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ade:	4f3a      	ldr	r7, [pc, #232]	; (8004bc8 <_strtol_l.isra.0+0x104>)
 8004ae0:	468e      	mov	lr, r1
 8004ae2:	4676      	mov	r6, lr
 8004ae4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004ae8:	5de5      	ldrb	r5, [r4, r7]
 8004aea:	f015 0508 	ands.w	r5, r5, #8
 8004aee:	d1f8      	bne.n	8004ae2 <_strtol_l.isra.0+0x1e>
 8004af0:	2c2d      	cmp	r4, #45	; 0x2d
 8004af2:	d134      	bne.n	8004b5e <_strtol_l.isra.0+0x9a>
 8004af4:	f89e 4000 	ldrb.w	r4, [lr]
 8004af8:	f04f 0801 	mov.w	r8, #1
 8004afc:	f106 0e02 	add.w	lr, r6, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d05c      	beq.n	8004bbe <_strtol_l.isra.0+0xfa>
 8004b04:	2b10      	cmp	r3, #16
 8004b06:	d10c      	bne.n	8004b22 <_strtol_l.isra.0+0x5e>
 8004b08:	2c30      	cmp	r4, #48	; 0x30
 8004b0a:	d10a      	bne.n	8004b22 <_strtol_l.isra.0+0x5e>
 8004b0c:	f89e 4000 	ldrb.w	r4, [lr]
 8004b10:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004b14:	2c58      	cmp	r4, #88	; 0x58
 8004b16:	d14d      	bne.n	8004bb4 <_strtol_l.isra.0+0xf0>
 8004b18:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004b1c:	2310      	movs	r3, #16
 8004b1e:	f10e 0e02 	add.w	lr, lr, #2
 8004b22:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004b26:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004b2a:	2600      	movs	r6, #0
 8004b2c:	fbbc f9f3 	udiv	r9, ip, r3
 8004b30:	4635      	mov	r5, r6
 8004b32:	fb03 ca19 	mls	sl, r3, r9, ip
 8004b36:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004b3a:	2f09      	cmp	r7, #9
 8004b3c:	d818      	bhi.n	8004b70 <_strtol_l.isra.0+0xac>
 8004b3e:	463c      	mov	r4, r7
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	dd24      	ble.n	8004b8e <_strtol_l.isra.0+0xca>
 8004b44:	2e00      	cmp	r6, #0
 8004b46:	db1f      	blt.n	8004b88 <_strtol_l.isra.0+0xc4>
 8004b48:	45a9      	cmp	r9, r5
 8004b4a:	d31d      	bcc.n	8004b88 <_strtol_l.isra.0+0xc4>
 8004b4c:	d101      	bne.n	8004b52 <_strtol_l.isra.0+0x8e>
 8004b4e:	45a2      	cmp	sl, r4
 8004b50:	db1a      	blt.n	8004b88 <_strtol_l.isra.0+0xc4>
 8004b52:	fb05 4503 	mla	r5, r5, r3, r4
 8004b56:	2601      	movs	r6, #1
 8004b58:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004b5c:	e7eb      	b.n	8004b36 <_strtol_l.isra.0+0x72>
 8004b5e:	2c2b      	cmp	r4, #43	; 0x2b
 8004b60:	bf08      	it	eq
 8004b62:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004b66:	46a8      	mov	r8, r5
 8004b68:	bf08      	it	eq
 8004b6a:	f106 0e02 	addeq.w	lr, r6, #2
 8004b6e:	e7c7      	b.n	8004b00 <_strtol_l.isra.0+0x3c>
 8004b70:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004b74:	2f19      	cmp	r7, #25
 8004b76:	d801      	bhi.n	8004b7c <_strtol_l.isra.0+0xb8>
 8004b78:	3c37      	subs	r4, #55	; 0x37
 8004b7a:	e7e1      	b.n	8004b40 <_strtol_l.isra.0+0x7c>
 8004b7c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004b80:	2f19      	cmp	r7, #25
 8004b82:	d804      	bhi.n	8004b8e <_strtol_l.isra.0+0xca>
 8004b84:	3c57      	subs	r4, #87	; 0x57
 8004b86:	e7db      	b.n	8004b40 <_strtol_l.isra.0+0x7c>
 8004b88:	f04f 36ff 	mov.w	r6, #4294967295
 8004b8c:	e7e4      	b.n	8004b58 <_strtol_l.isra.0+0x94>
 8004b8e:	2e00      	cmp	r6, #0
 8004b90:	da05      	bge.n	8004b9e <_strtol_l.isra.0+0xda>
 8004b92:	2322      	movs	r3, #34	; 0x22
 8004b94:	6003      	str	r3, [r0, #0]
 8004b96:	4665      	mov	r5, ip
 8004b98:	b942      	cbnz	r2, 8004bac <_strtol_l.isra.0+0xe8>
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	e79d      	b.n	8004ada <_strtol_l.isra.0+0x16>
 8004b9e:	f1b8 0f00 	cmp.w	r8, #0
 8004ba2:	d000      	beq.n	8004ba6 <_strtol_l.isra.0+0xe2>
 8004ba4:	426d      	negs	r5, r5
 8004ba6:	2a00      	cmp	r2, #0
 8004ba8:	d0f7      	beq.n	8004b9a <_strtol_l.isra.0+0xd6>
 8004baa:	b10e      	cbz	r6, 8004bb0 <_strtol_l.isra.0+0xec>
 8004bac:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004bb0:	6011      	str	r1, [r2, #0]
 8004bb2:	e7f2      	b.n	8004b9a <_strtol_l.isra.0+0xd6>
 8004bb4:	2430      	movs	r4, #48	; 0x30
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1b3      	bne.n	8004b22 <_strtol_l.isra.0+0x5e>
 8004bba:	2308      	movs	r3, #8
 8004bbc:	e7b1      	b.n	8004b22 <_strtol_l.isra.0+0x5e>
 8004bbe:	2c30      	cmp	r4, #48	; 0x30
 8004bc0:	d0a4      	beq.n	8004b0c <_strtol_l.isra.0+0x48>
 8004bc2:	230a      	movs	r3, #10
 8004bc4:	e7ad      	b.n	8004b22 <_strtol_l.isra.0+0x5e>
 8004bc6:	bf00      	nop
 8004bc8:	0800510b 	.word	0x0800510b

08004bcc <_strtol_r>:
 8004bcc:	f7ff bf7a 	b.w	8004ac4 <_strtol_l.isra.0>

08004bd0 <_strtoul_l.isra.0>:
 8004bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bd4:	4e3b      	ldr	r6, [pc, #236]	; (8004cc4 <_strtoul_l.isra.0+0xf4>)
 8004bd6:	4686      	mov	lr, r0
 8004bd8:	468c      	mov	ip, r1
 8004bda:	4660      	mov	r0, ip
 8004bdc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004be0:	5da5      	ldrb	r5, [r4, r6]
 8004be2:	f015 0508 	ands.w	r5, r5, #8
 8004be6:	d1f8      	bne.n	8004bda <_strtoul_l.isra.0+0xa>
 8004be8:	2c2d      	cmp	r4, #45	; 0x2d
 8004bea:	d134      	bne.n	8004c56 <_strtoul_l.isra.0+0x86>
 8004bec:	f89c 4000 	ldrb.w	r4, [ip]
 8004bf0:	f04f 0801 	mov.w	r8, #1
 8004bf4:	f100 0c02 	add.w	ip, r0, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d05e      	beq.n	8004cba <_strtoul_l.isra.0+0xea>
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d10c      	bne.n	8004c1a <_strtoul_l.isra.0+0x4a>
 8004c00:	2c30      	cmp	r4, #48	; 0x30
 8004c02:	d10a      	bne.n	8004c1a <_strtoul_l.isra.0+0x4a>
 8004c04:	f89c 0000 	ldrb.w	r0, [ip]
 8004c08:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004c0c:	2858      	cmp	r0, #88	; 0x58
 8004c0e:	d14f      	bne.n	8004cb0 <_strtoul_l.isra.0+0xe0>
 8004c10:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004c14:	2310      	movs	r3, #16
 8004c16:	f10c 0c02 	add.w	ip, ip, #2
 8004c1a:	f04f 37ff 	mov.w	r7, #4294967295
 8004c1e:	2500      	movs	r5, #0
 8004c20:	fbb7 f7f3 	udiv	r7, r7, r3
 8004c24:	fb03 f907 	mul.w	r9, r3, r7
 8004c28:	ea6f 0909 	mvn.w	r9, r9
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004c32:	2e09      	cmp	r6, #9
 8004c34:	d818      	bhi.n	8004c68 <_strtoul_l.isra.0+0x98>
 8004c36:	4634      	mov	r4, r6
 8004c38:	42a3      	cmp	r3, r4
 8004c3a:	dd24      	ble.n	8004c86 <_strtoul_l.isra.0+0xb6>
 8004c3c:	2d00      	cmp	r5, #0
 8004c3e:	db1f      	blt.n	8004c80 <_strtoul_l.isra.0+0xb0>
 8004c40:	4287      	cmp	r7, r0
 8004c42:	d31d      	bcc.n	8004c80 <_strtoul_l.isra.0+0xb0>
 8004c44:	d101      	bne.n	8004c4a <_strtoul_l.isra.0+0x7a>
 8004c46:	45a1      	cmp	r9, r4
 8004c48:	db1a      	blt.n	8004c80 <_strtoul_l.isra.0+0xb0>
 8004c4a:	fb00 4003 	mla	r0, r0, r3, r4
 8004c4e:	2501      	movs	r5, #1
 8004c50:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004c54:	e7eb      	b.n	8004c2e <_strtoul_l.isra.0+0x5e>
 8004c56:	2c2b      	cmp	r4, #43	; 0x2b
 8004c58:	bf08      	it	eq
 8004c5a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004c5e:	46a8      	mov	r8, r5
 8004c60:	bf08      	it	eq
 8004c62:	f100 0c02 	addeq.w	ip, r0, #2
 8004c66:	e7c7      	b.n	8004bf8 <_strtoul_l.isra.0+0x28>
 8004c68:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004c6c:	2e19      	cmp	r6, #25
 8004c6e:	d801      	bhi.n	8004c74 <_strtoul_l.isra.0+0xa4>
 8004c70:	3c37      	subs	r4, #55	; 0x37
 8004c72:	e7e1      	b.n	8004c38 <_strtoul_l.isra.0+0x68>
 8004c74:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004c78:	2e19      	cmp	r6, #25
 8004c7a:	d804      	bhi.n	8004c86 <_strtoul_l.isra.0+0xb6>
 8004c7c:	3c57      	subs	r4, #87	; 0x57
 8004c7e:	e7db      	b.n	8004c38 <_strtoul_l.isra.0+0x68>
 8004c80:	f04f 35ff 	mov.w	r5, #4294967295
 8004c84:	e7e4      	b.n	8004c50 <_strtoul_l.isra.0+0x80>
 8004c86:	2d00      	cmp	r5, #0
 8004c88:	da07      	bge.n	8004c9a <_strtoul_l.isra.0+0xca>
 8004c8a:	2322      	movs	r3, #34	; 0x22
 8004c8c:	f8ce 3000 	str.w	r3, [lr]
 8004c90:	f04f 30ff 	mov.w	r0, #4294967295
 8004c94:	b942      	cbnz	r2, 8004ca8 <_strtoul_l.isra.0+0xd8>
 8004c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c9a:	f1b8 0f00 	cmp.w	r8, #0
 8004c9e:	d000      	beq.n	8004ca2 <_strtoul_l.isra.0+0xd2>
 8004ca0:	4240      	negs	r0, r0
 8004ca2:	2a00      	cmp	r2, #0
 8004ca4:	d0f7      	beq.n	8004c96 <_strtoul_l.isra.0+0xc6>
 8004ca6:	b10d      	cbz	r5, 8004cac <_strtoul_l.isra.0+0xdc>
 8004ca8:	f10c 31ff 	add.w	r1, ip, #4294967295
 8004cac:	6011      	str	r1, [r2, #0]
 8004cae:	e7f2      	b.n	8004c96 <_strtoul_l.isra.0+0xc6>
 8004cb0:	2430      	movs	r4, #48	; 0x30
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1b1      	bne.n	8004c1a <_strtoul_l.isra.0+0x4a>
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	e7af      	b.n	8004c1a <_strtoul_l.isra.0+0x4a>
 8004cba:	2c30      	cmp	r4, #48	; 0x30
 8004cbc:	d0a2      	beq.n	8004c04 <_strtoul_l.isra.0+0x34>
 8004cbe:	230a      	movs	r3, #10
 8004cc0:	e7ab      	b.n	8004c1a <_strtoul_l.isra.0+0x4a>
 8004cc2:	bf00      	nop
 8004cc4:	0800510b 	.word	0x0800510b

08004cc8 <_strtoul_r>:
 8004cc8:	f7ff bf82 	b.w	8004bd0 <_strtoul_l.isra.0>

08004ccc <__submore>:
 8004ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cd8:	4299      	cmp	r1, r3
 8004cda:	d11d      	bne.n	8004d18 <__submore+0x4c>
 8004cdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ce0:	f000 f8a8 	bl	8004e34 <_malloc_r>
 8004ce4:	b918      	cbnz	r0, 8004cee <__submore+0x22>
 8004ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cf2:	63a3      	str	r3, [r4, #56]	; 0x38
 8004cf4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004cf8:	6360      	str	r0, [r4, #52]	; 0x34
 8004cfa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004cfe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004d02:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004d06:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004d0a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004d0e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004d12:	6020      	str	r0, [r4, #0]
 8004d14:	2000      	movs	r0, #0
 8004d16:	e7e8      	b.n	8004cea <__submore+0x1e>
 8004d18:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004d1a:	0077      	lsls	r7, r6, #1
 8004d1c:	463a      	mov	r2, r7
 8004d1e:	f000 f8e3 	bl	8004ee8 <_realloc_r>
 8004d22:	4605      	mov	r5, r0
 8004d24:	2800      	cmp	r0, #0
 8004d26:	d0de      	beq.n	8004ce6 <__submore+0x1a>
 8004d28:	eb00 0806 	add.w	r8, r0, r6
 8004d2c:	4601      	mov	r1, r0
 8004d2e:	4632      	mov	r2, r6
 8004d30:	4640      	mov	r0, r8
 8004d32:	f000 f807 	bl	8004d44 <memcpy>
 8004d36:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004d3a:	f8c4 8000 	str.w	r8, [r4]
 8004d3e:	e7e9      	b.n	8004d14 <__submore+0x48>

08004d40 <__retarget_lock_acquire_recursive>:
 8004d40:	4770      	bx	lr

08004d42 <__retarget_lock_release_recursive>:
 8004d42:	4770      	bx	lr

08004d44 <memcpy>:
 8004d44:	440a      	add	r2, r1
 8004d46:	4291      	cmp	r1, r2
 8004d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d4c:	d100      	bne.n	8004d50 <memcpy+0xc>
 8004d4e:	4770      	bx	lr
 8004d50:	b510      	push	{r4, lr}
 8004d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d5a:	4291      	cmp	r1, r2
 8004d5c:	d1f9      	bne.n	8004d52 <memcpy+0xe>
 8004d5e:	bd10      	pop	{r4, pc}

08004d60 <memmove>:
 8004d60:	4288      	cmp	r0, r1
 8004d62:	b510      	push	{r4, lr}
 8004d64:	eb01 0402 	add.w	r4, r1, r2
 8004d68:	d902      	bls.n	8004d70 <memmove+0x10>
 8004d6a:	4284      	cmp	r4, r0
 8004d6c:	4623      	mov	r3, r4
 8004d6e:	d807      	bhi.n	8004d80 <memmove+0x20>
 8004d70:	1e43      	subs	r3, r0, #1
 8004d72:	42a1      	cmp	r1, r4
 8004d74:	d008      	beq.n	8004d88 <memmove+0x28>
 8004d76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d7e:	e7f8      	b.n	8004d72 <memmove+0x12>
 8004d80:	4402      	add	r2, r0
 8004d82:	4601      	mov	r1, r0
 8004d84:	428a      	cmp	r2, r1
 8004d86:	d100      	bne.n	8004d8a <memmove+0x2a>
 8004d88:	bd10      	pop	{r4, pc}
 8004d8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d92:	e7f7      	b.n	8004d84 <memmove+0x24>

08004d94 <_free_r>:
 8004d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d96:	2900      	cmp	r1, #0
 8004d98:	d048      	beq.n	8004e2c <_free_r+0x98>
 8004d9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d9e:	9001      	str	r0, [sp, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f1a1 0404 	sub.w	r4, r1, #4
 8004da6:	bfb8      	it	lt
 8004da8:	18e4      	addlt	r4, r4, r3
 8004daa:	f000 f8d3 	bl	8004f54 <__malloc_lock>
 8004dae:	4a20      	ldr	r2, [pc, #128]	; (8004e30 <_free_r+0x9c>)
 8004db0:	9801      	ldr	r0, [sp, #4]
 8004db2:	6813      	ldr	r3, [r2, #0]
 8004db4:	4615      	mov	r5, r2
 8004db6:	b933      	cbnz	r3, 8004dc6 <_free_r+0x32>
 8004db8:	6063      	str	r3, [r4, #4]
 8004dba:	6014      	str	r4, [r2, #0]
 8004dbc:	b003      	add	sp, #12
 8004dbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dc2:	f000 b8cd 	b.w	8004f60 <__malloc_unlock>
 8004dc6:	42a3      	cmp	r3, r4
 8004dc8:	d90b      	bls.n	8004de2 <_free_r+0x4e>
 8004dca:	6821      	ldr	r1, [r4, #0]
 8004dcc:	1862      	adds	r2, r4, r1
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	bf04      	itt	eq
 8004dd2:	681a      	ldreq	r2, [r3, #0]
 8004dd4:	685b      	ldreq	r3, [r3, #4]
 8004dd6:	6063      	str	r3, [r4, #4]
 8004dd8:	bf04      	itt	eq
 8004dda:	1852      	addeq	r2, r2, r1
 8004ddc:	6022      	streq	r2, [r4, #0]
 8004dde:	602c      	str	r4, [r5, #0]
 8004de0:	e7ec      	b.n	8004dbc <_free_r+0x28>
 8004de2:	461a      	mov	r2, r3
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	b10b      	cbz	r3, 8004dec <_free_r+0x58>
 8004de8:	42a3      	cmp	r3, r4
 8004dea:	d9fa      	bls.n	8004de2 <_free_r+0x4e>
 8004dec:	6811      	ldr	r1, [r2, #0]
 8004dee:	1855      	adds	r5, r2, r1
 8004df0:	42a5      	cmp	r5, r4
 8004df2:	d10b      	bne.n	8004e0c <_free_r+0x78>
 8004df4:	6824      	ldr	r4, [r4, #0]
 8004df6:	4421      	add	r1, r4
 8004df8:	1854      	adds	r4, r2, r1
 8004dfa:	42a3      	cmp	r3, r4
 8004dfc:	6011      	str	r1, [r2, #0]
 8004dfe:	d1dd      	bne.n	8004dbc <_free_r+0x28>
 8004e00:	681c      	ldr	r4, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	6053      	str	r3, [r2, #4]
 8004e06:	4421      	add	r1, r4
 8004e08:	6011      	str	r1, [r2, #0]
 8004e0a:	e7d7      	b.n	8004dbc <_free_r+0x28>
 8004e0c:	d902      	bls.n	8004e14 <_free_r+0x80>
 8004e0e:	230c      	movs	r3, #12
 8004e10:	6003      	str	r3, [r0, #0]
 8004e12:	e7d3      	b.n	8004dbc <_free_r+0x28>
 8004e14:	6825      	ldr	r5, [r4, #0]
 8004e16:	1961      	adds	r1, r4, r5
 8004e18:	428b      	cmp	r3, r1
 8004e1a:	bf04      	itt	eq
 8004e1c:	6819      	ldreq	r1, [r3, #0]
 8004e1e:	685b      	ldreq	r3, [r3, #4]
 8004e20:	6063      	str	r3, [r4, #4]
 8004e22:	bf04      	itt	eq
 8004e24:	1949      	addeq	r1, r1, r5
 8004e26:	6021      	streq	r1, [r4, #0]
 8004e28:	6054      	str	r4, [r2, #4]
 8004e2a:	e7c7      	b.n	8004dbc <_free_r+0x28>
 8004e2c:	b003      	add	sp, #12
 8004e2e:	bd30      	pop	{r4, r5, pc}
 8004e30:	20000098 	.word	0x20000098

08004e34 <_malloc_r>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	1ccd      	adds	r5, r1, #3
 8004e38:	f025 0503 	bic.w	r5, r5, #3
 8004e3c:	3508      	adds	r5, #8
 8004e3e:	2d0c      	cmp	r5, #12
 8004e40:	bf38      	it	cc
 8004e42:	250c      	movcc	r5, #12
 8004e44:	2d00      	cmp	r5, #0
 8004e46:	4606      	mov	r6, r0
 8004e48:	db01      	blt.n	8004e4e <_malloc_r+0x1a>
 8004e4a:	42a9      	cmp	r1, r5
 8004e4c:	d903      	bls.n	8004e56 <_malloc_r+0x22>
 8004e4e:	230c      	movs	r3, #12
 8004e50:	6033      	str	r3, [r6, #0]
 8004e52:	2000      	movs	r0, #0
 8004e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e56:	f000 f87d 	bl	8004f54 <__malloc_lock>
 8004e5a:	4921      	ldr	r1, [pc, #132]	; (8004ee0 <_malloc_r+0xac>)
 8004e5c:	680a      	ldr	r2, [r1, #0]
 8004e5e:	4614      	mov	r4, r2
 8004e60:	b99c      	cbnz	r4, 8004e8a <_malloc_r+0x56>
 8004e62:	4f20      	ldr	r7, [pc, #128]	; (8004ee4 <_malloc_r+0xb0>)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	b923      	cbnz	r3, 8004e72 <_malloc_r+0x3e>
 8004e68:	4621      	mov	r1, r4
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	f000 f862 	bl	8004f34 <_sbrk_r>
 8004e70:	6038      	str	r0, [r7, #0]
 8004e72:	4629      	mov	r1, r5
 8004e74:	4630      	mov	r0, r6
 8004e76:	f000 f85d 	bl	8004f34 <_sbrk_r>
 8004e7a:	1c43      	adds	r3, r0, #1
 8004e7c:	d123      	bne.n	8004ec6 <_malloc_r+0x92>
 8004e7e:	230c      	movs	r3, #12
 8004e80:	6033      	str	r3, [r6, #0]
 8004e82:	4630      	mov	r0, r6
 8004e84:	f000 f86c 	bl	8004f60 <__malloc_unlock>
 8004e88:	e7e3      	b.n	8004e52 <_malloc_r+0x1e>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	1b5b      	subs	r3, r3, r5
 8004e8e:	d417      	bmi.n	8004ec0 <_malloc_r+0x8c>
 8004e90:	2b0b      	cmp	r3, #11
 8004e92:	d903      	bls.n	8004e9c <_malloc_r+0x68>
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	441c      	add	r4, r3
 8004e98:	6025      	str	r5, [r4, #0]
 8004e9a:	e004      	b.n	8004ea6 <_malloc_r+0x72>
 8004e9c:	6863      	ldr	r3, [r4, #4]
 8004e9e:	42a2      	cmp	r2, r4
 8004ea0:	bf0c      	ite	eq
 8004ea2:	600b      	streq	r3, [r1, #0]
 8004ea4:	6053      	strne	r3, [r2, #4]
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	f000 f85a 	bl	8004f60 <__malloc_unlock>
 8004eac:	f104 000b 	add.w	r0, r4, #11
 8004eb0:	1d23      	adds	r3, r4, #4
 8004eb2:	f020 0007 	bic.w	r0, r0, #7
 8004eb6:	1ac2      	subs	r2, r0, r3
 8004eb8:	d0cc      	beq.n	8004e54 <_malloc_r+0x20>
 8004eba:	1a1b      	subs	r3, r3, r0
 8004ebc:	50a3      	str	r3, [r4, r2]
 8004ebe:	e7c9      	b.n	8004e54 <_malloc_r+0x20>
 8004ec0:	4622      	mov	r2, r4
 8004ec2:	6864      	ldr	r4, [r4, #4]
 8004ec4:	e7cc      	b.n	8004e60 <_malloc_r+0x2c>
 8004ec6:	1cc4      	adds	r4, r0, #3
 8004ec8:	f024 0403 	bic.w	r4, r4, #3
 8004ecc:	42a0      	cmp	r0, r4
 8004ece:	d0e3      	beq.n	8004e98 <_malloc_r+0x64>
 8004ed0:	1a21      	subs	r1, r4, r0
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	f000 f82e 	bl	8004f34 <_sbrk_r>
 8004ed8:	3001      	adds	r0, #1
 8004eda:	d1dd      	bne.n	8004e98 <_malloc_r+0x64>
 8004edc:	e7cf      	b.n	8004e7e <_malloc_r+0x4a>
 8004ede:	bf00      	nop
 8004ee0:	20000098 	.word	0x20000098
 8004ee4:	2000009c 	.word	0x2000009c

08004ee8 <_realloc_r>:
 8004ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eea:	4607      	mov	r7, r0
 8004eec:	4614      	mov	r4, r2
 8004eee:	460e      	mov	r6, r1
 8004ef0:	b921      	cbnz	r1, 8004efc <_realloc_r+0x14>
 8004ef2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	f7ff bf9c 	b.w	8004e34 <_malloc_r>
 8004efc:	b922      	cbnz	r2, 8004f08 <_realloc_r+0x20>
 8004efe:	f7ff ff49 	bl	8004d94 <_free_r>
 8004f02:	4625      	mov	r5, r4
 8004f04:	4628      	mov	r0, r5
 8004f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f08:	f000 f830 	bl	8004f6c <_malloc_usable_size_r>
 8004f0c:	42a0      	cmp	r0, r4
 8004f0e:	d20f      	bcs.n	8004f30 <_realloc_r+0x48>
 8004f10:	4621      	mov	r1, r4
 8004f12:	4638      	mov	r0, r7
 8004f14:	f7ff ff8e 	bl	8004e34 <_malloc_r>
 8004f18:	4605      	mov	r5, r0
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	d0f2      	beq.n	8004f04 <_realloc_r+0x1c>
 8004f1e:	4631      	mov	r1, r6
 8004f20:	4622      	mov	r2, r4
 8004f22:	f7ff ff0f 	bl	8004d44 <memcpy>
 8004f26:	4631      	mov	r1, r6
 8004f28:	4638      	mov	r0, r7
 8004f2a:	f7ff ff33 	bl	8004d94 <_free_r>
 8004f2e:	e7e9      	b.n	8004f04 <_realloc_r+0x1c>
 8004f30:	4635      	mov	r5, r6
 8004f32:	e7e7      	b.n	8004f04 <_realloc_r+0x1c>

08004f34 <_sbrk_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	4d06      	ldr	r5, [pc, #24]	; (8004f50 <_sbrk_r+0x1c>)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	602b      	str	r3, [r5, #0]
 8004f40:	f7fb fe66 	bl	8000c10 <_sbrk>
 8004f44:	1c43      	adds	r3, r0, #1
 8004f46:	d102      	bne.n	8004f4e <_sbrk_r+0x1a>
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	b103      	cbz	r3, 8004f4e <_sbrk_r+0x1a>
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	bd38      	pop	{r3, r4, r5, pc}
 8004f50:	20000150 	.word	0x20000150

08004f54 <__malloc_lock>:
 8004f54:	4801      	ldr	r0, [pc, #4]	; (8004f5c <__malloc_lock+0x8>)
 8004f56:	f7ff bef3 	b.w	8004d40 <__retarget_lock_acquire_recursive>
 8004f5a:	bf00      	nop
 8004f5c:	20000158 	.word	0x20000158

08004f60 <__malloc_unlock>:
 8004f60:	4801      	ldr	r0, [pc, #4]	; (8004f68 <__malloc_unlock+0x8>)
 8004f62:	f7ff beee 	b.w	8004d42 <__retarget_lock_release_recursive>
 8004f66:	bf00      	nop
 8004f68:	20000158 	.word	0x20000158

08004f6c <_malloc_usable_size_r>:
 8004f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f70:	1f18      	subs	r0, r3, #4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	bfbc      	itt	lt
 8004f76:	580b      	ldrlt	r3, [r1, r0]
 8004f78:	18c0      	addlt	r0, r0, r3
 8004f7a:	4770      	bx	lr

08004f7c <_init>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	bf00      	nop
 8004f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f82:	bc08      	pop	{r3}
 8004f84:	469e      	mov	lr, r3
 8004f86:	4770      	bx	lr

08004f88 <_fini>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	bf00      	nop
 8004f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8e:	bc08      	pop	{r3}
 8004f90:	469e      	mov	lr, r3
 8004f92:	4770      	bx	lr
