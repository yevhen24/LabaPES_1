
LabaPES_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eb0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003074  08003074  00013074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003094  08003094  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800309c  0800309c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800309c  0800309c  0001309c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030a0  080030a0  000130a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  080030b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  080030b0  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a63b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae5  00000000  00000000  0002a677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  0002c160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002c8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002087e  00000000  00000000  0002cfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad06  00000000  00000000  0004d826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4644  00000000  00000000  0005852c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011cb70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ca4  00000000  00000000  0011cbc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800305c 	.word	0x0800305c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800305c 	.word	0x0800305c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_DMA_Init+0x3c>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <MX_DMA_Init+0x3c>)
 800050c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_DMA_Init+0x3c>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	2010      	movs	r0, #16
 8000524:	f000 fc23 	bl	8000d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000528:	2010      	movs	r0, #16
 800052a:	f000 fc3c 	bl	8000da6 <HAL_NVIC_EnableIRQ>

}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40023800 	.word	0x40023800

0800053c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <MX_GPIO_Init+0xb4>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a25      	ldr	r2, [pc, #148]	; (80005f0 <MX_GPIO_Init+0xb4>)
 800055c:	f043 0304 	orr.w	r3, r3, #4
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <MX_GPIO_Init+0xb4>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0304 	and.w	r3, r3, #4
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <MX_GPIO_Init+0xb4>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a1e      	ldr	r2, [pc, #120]	; (80005f0 <MX_GPIO_Init+0xb4>)
 8000578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <MX_GPIO_Init+0xb4>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	603b      	str	r3, [r7, #0]
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <MX_GPIO_Init+0xb4>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <MX_GPIO_Init+0xb4>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <MX_GPIO_Init+0xb4>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	21e0      	movs	r1, #224	; 0xe0
 80005aa:	4812      	ldr	r0, [pc, #72]	; (80005f4 <MX_GPIO_Init+0xb8>)
 80005ac:	f001 f93e 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 80005b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4619      	mov	r1, r3
 80005c4:	480c      	ldr	r0, [pc, #48]	; (80005f8 <MX_GPIO_Init+0xbc>)
 80005c6:	f000 ff85 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80005ca:	23e0      	movs	r3, #224	; 0xe0
 80005cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	2301      	movs	r3, #1
 80005d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	4619      	mov	r1, r3
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <MX_GPIO_Init+0xb8>)
 80005e2:	f000 ff77 	bl	80014d4 <HAL_GPIO_Init>

}
 80005e6:	bf00      	nop
 80005e8:	3720      	adds	r7, #32
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40020000 	.word	0x40020000
 80005f8:	40020800 	.word	0x40020800

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fa68 	bl	8000ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f810 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f7ff ff98 	bl	800053c <MX_GPIO_Init>
  MX_DMA_Init();
 800060c:	f7ff ff76 	bl	80004fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000610:	f000 f98a 	bl	8000928 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ReadButton();
 8000614:	f000 f876 	bl	8000704 <ReadButton>
	  display_button_presses(flag);
 8000618:	4b02      	ldr	r3, [pc, #8]	; (8000624 <main+0x28>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f000 f8a7 	bl	8000770 <display_button_presses>
	  ReadButton();
 8000622:	e7f7      	b.n	8000614 <main+0x18>
 8000624:	2000002c 	.word	0x2000002c

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2234      	movs	r2, #52	; 0x34
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fd08 	bl	800304c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <SystemClock_Config+0xd4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a29      	ldr	r2, [pc, #164]	; (80006fc <SystemClock_Config+0xd4>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <SystemClock_Config+0xd4>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <SystemClock_Config+0xd8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000674:	4a22      	ldr	r2, [pc, #136]	; (8000700 <SystemClock_Config+0xd8>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b20      	ldr	r3, [pc, #128]	; (8000700 <SystemClock_Config+0xd8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800069c:	2310      	movs	r3, #16
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fb9e 	bl	8001df8 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006c2:	f000 f8b3 	bl	800082c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2302      	movs	r3, #2
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2102      	movs	r1, #2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 f8bc 	bl	8001860 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006ee:	f000 f89d 	bl	800082c <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <ReadButton>:

/* USER CODE BEGIN 4 */
void ReadButton(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, BTN1_Pin) == GPIO_PIN_RESET && flag_btn_press)
 8000708:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070c:	4814      	ldr	r0, [pc, #80]	; (8000760 <ReadButton+0x5c>)
 800070e:	f001 f875 	bl	80017fc <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d10b      	bne.n	8000730 <ReadButton+0x2c>
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <ReadButton+0x60>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d007      	beq.n	8000730 <ReadButton+0x2c>
	{
	  flag_btn_press = 0;
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <ReadButton+0x60>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
	  time_btn_press = HAL_GetTick();
 8000726:	f000 fa3b 	bl	8000ba0 <HAL_GetTick>
 800072a:	4603      	mov	r3, r0
 800072c:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <ReadButton+0x64>)
 800072e:	6013      	str	r3, [r2, #0]
	}

	if(!flag_btn_press && (HAL_GetTick() - time_btn_press) > 200)
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <ReadButton+0x60>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d110      	bne.n	800075a <ReadButton+0x56>
 8000738:	f000 fa32 	bl	8000ba0 <HAL_GetTick>
 800073c:	4602      	mov	r2, r0
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <ReadButton+0x64>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	2bc8      	cmp	r3, #200	; 0xc8
 8000746:	d908      	bls.n	800075a <ReadButton+0x56>
	{
	  flag_btn_press = 1;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <ReadButton+0x60>)
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
	  flag += 1;
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <ReadButton+0x68>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	3301      	adds	r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <ReadButton+0x68>)
 8000758:	701a      	strb	r2, [r3, #0]
	}
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40020800 	.word	0x40020800
 8000764:	2000002d 	.word	0x2000002d
 8000768:	20000028 	.word	0x20000028
 800076c:	2000002c 	.word	0x2000002c

08000770 <display_button_presses>:
void display_button_presses(int number)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	if (number == 0)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d10a      	bne.n	8000794 <display_button_presses+0x24>
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2140      	movs	r1, #64	; 0x40
 8000782:	4828      	ldr	r0, [pc, #160]	; (8000824 <display_button_presses+0xb4>)
 8000784:	f001 f852 	bl	800182c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2180      	movs	r1, #128	; 0x80
 800078c:	4825      	ldr	r0, [pc, #148]	; (8000824 <display_button_presses+0xb4>)
 800078e:	f001 f84d 	bl	800182c <HAL_GPIO_WritePin>
	else if (number % 3 == 0)
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
	}
}
 8000792:	e043      	b.n	800081c <display_button_presses+0xac>
	else if (number % 3 == 2)
 8000794:	6879      	ldr	r1, [r7, #4]
 8000796:	4b24      	ldr	r3, [pc, #144]	; (8000828 <display_button_presses+0xb8>)
 8000798:	fb83 3201 	smull	r3, r2, r3, r1
 800079c:	17cb      	asrs	r3, r1, #31
 800079e:	1ad2      	subs	r2, r2, r3
 80007a0:	4613      	mov	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	1aca      	subs	r2, r1, r3
 80007a8:	2a02      	cmp	r2, #2
 80007aa:	d10a      	bne.n	80007c2 <display_button_presses+0x52>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2140      	movs	r1, #64	; 0x40
 80007b0:	481c      	ldr	r0, [pc, #112]	; (8000824 <display_button_presses+0xb4>)
 80007b2:	f001 f83b 	bl	800182c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	481a      	ldr	r0, [pc, #104]	; (8000824 <display_button_presses+0xb4>)
 80007bc:	f001 f836 	bl	800182c <HAL_GPIO_WritePin>
}
 80007c0:	e02c      	b.n	800081c <display_button_presses+0xac>
	else if (number % 3 == 1)
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <display_button_presses+0xb8>)
 80007c6:	fb83 3201 	smull	r3, r2, r3, r1
 80007ca:	17cb      	asrs	r3, r1, #31
 80007cc:	1ad2      	subs	r2, r2, r3
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	1aca      	subs	r2, r1, r3
 80007d6:	2a01      	cmp	r2, #1
 80007d8:	d10a      	bne.n	80007f0 <display_button_presses+0x80>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2140      	movs	r1, #64	; 0x40
 80007de:	4811      	ldr	r0, [pc, #68]	; (8000824 <display_button_presses+0xb4>)
 80007e0:	f001 f824 	bl	800182c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2180      	movs	r1, #128	; 0x80
 80007e8:	480e      	ldr	r0, [pc, #56]	; (8000824 <display_button_presses+0xb4>)
 80007ea:	f001 f81f 	bl	800182c <HAL_GPIO_WritePin>
}
 80007ee:	e015      	b.n	800081c <display_button_presses+0xac>
	else if (number % 3 == 0)
 80007f0:	6879      	ldr	r1, [r7, #4]
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <display_button_presses+0xb8>)
 80007f4:	fb83 3201 	smull	r3, r2, r3, r1
 80007f8:	17cb      	asrs	r3, r1, #31
 80007fa:	1ad2      	subs	r2, r2, r3
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	1aca      	subs	r2, r1, r3
 8000804:	2a00      	cmp	r2, #0
 8000806:	d109      	bne.n	800081c <display_button_presses+0xac>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2140      	movs	r1, #64	; 0x40
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <display_button_presses+0xb4>)
 800080e:	f001 f80d 	bl	800182c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	4803      	ldr	r0, [pc, #12]	; (8000824 <display_button_presses+0xb4>)
 8000818:	f001 f808 	bl	800182c <HAL_GPIO_WritePin>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40020000 	.word	0x40020000
 8000828:	55555556 	.word	0x55555556

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	e7fe      	b.n	8000834 <Error_Handler+0x8>
	...

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <HAL_MspInit+0x4c>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084c:	6453      	str	r3, [r2, #68]	; 0x44
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a08      	ldr	r2, [pc, #32]	; (8000884 <HAL_MspInit+0x4c>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000876:	2007      	movs	r0, #7
 8000878:	f000 fa6e 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800088c:	e7fe      	b.n	800088c <NMI_Handler+0x4>

0800088e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <MemManage_Handler+0x4>

0800089a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d4:	f000 f950 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}

080008dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <DMA1_Stream5_IRQHandler+0x10>)
 80008e2:	f000 fbbb 	bl	800105c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000030 	.word	0x20000030

080008f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <USART2_IRQHandler+0x10>)
 80008f6:	f001 fd6b 	bl	80023d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000090 	.word	0x20000090

08000904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <SystemInit+0x20>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <SystemInit+0x20>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <MX_USART2_UART_Init+0x50>)
 8000930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000960:	f001 fce8 	bl	8002334 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800096a:	f7ff ff5f 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000090 	.word	0x20000090
 8000978:	40004400 	.word	0x40004400

0800097c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a34      	ldr	r2, [pc, #208]	; (8000a6c <HAL_UART_MspInit+0xf0>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d161      	bne.n	8000a62 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <HAL_UART_MspInit+0xf4>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a32      	ldr	r2, [pc, #200]	; (8000a70 <HAL_UART_MspInit+0xf4>)
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <HAL_UART_MspInit+0xf4>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <HAL_UART_MspInit+0xf4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a2b      	ldr	r2, [pc, #172]	; (8000a70 <HAL_UART_MspInit+0xf4>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <HAL_UART_MspInit+0xf4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009d6:	230c      	movs	r3, #12
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e6:	2307      	movs	r3, #7
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	4820      	ldr	r0, [pc, #128]	; (8000a74 <HAL_UART_MspInit+0xf8>)
 80009f2:	f000 fd6f 	bl	80014d4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80009f6:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <HAL_UART_MspInit+0xfc>)
 80009f8:	4a20      	ldr	r2, [pc, #128]	; (8000a7c <HAL_UART_MspInit+0x100>)
 80009fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <HAL_UART_MspInit+0xfc>)
 80009fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a02:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <HAL_UART_MspInit+0xfc>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <HAL_UART_MspInit+0xfc>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <HAL_UART_MspInit+0xfc>)
 8000a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a16:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0xfc>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_UART_MspInit+0xfc>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_UART_MspInit+0xfc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <HAL_UART_MspInit+0xfc>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_UART_MspInit+0xfc>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a36:	4810      	ldr	r0, [pc, #64]	; (8000a78 <HAL_UART_MspInit+0xfc>)
 8000a38:	f000 f9d0 	bl	8000ddc <HAL_DMA_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000a42:	f7ff fef3 	bl	800082c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <HAL_UART_MspInit+0xfc>)
 8000a4a:	639a      	str	r2, [r3, #56]	; 0x38
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <HAL_UART_MspInit+0xfc>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2026      	movs	r0, #38	; 0x26
 8000a58:	f000 f989 	bl	8000d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a5c:	2026      	movs	r0, #38	; 0x26
 8000a5e:	f000 f9a2 	bl	8000da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40004400 	.word	0x40004400
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020000 	.word	0x40020000
 8000a78:	20000030 	.word	0x20000030
 8000a7c:	40026088 	.word	0x40026088

08000a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a84:	480d      	ldr	r0, [pc, #52]	; (8000abc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a86:	490e      	ldr	r1, [pc, #56]	; (8000ac0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a88:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a9c:	4c0b      	ldr	r4, [pc, #44]	; (8000acc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aaa:	f7ff ff2b 	bl	8000904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aae:	f002 faa9 	bl	8003004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab2:	f7ff fda3 	bl	80005fc <main>
  bx  lr    
 8000ab6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ab8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac4:	080030a4 	.word	0x080030a4
  ldr r2, =_sbss
 8000ac8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000acc:	200000d8 	.word	0x200000d8

08000ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC_IRQHandler>
	...

08000ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <HAL_Init+0x40>)
 8000ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <HAL_Init+0x40>)
 8000aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_Init+0x40>)
 8000af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000afc:	2003      	movs	r0, #3
 8000afe:	f000 f92b 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 f808 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b08:	f7ff fe96 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023c00 	.word	0x40023c00

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_InitTick+0x54>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_InitTick+0x58>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f943 	bl	8000dc2 <HAL_SYSTICK_Config>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00e      	b.n	8000b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b0f      	cmp	r3, #15
 8000b4a:	d80a      	bhi.n	8000b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f000 f90b 	bl	8000d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b58:	4a06      	ldr	r2, [pc, #24]	; (8000b74 <HAL_InitTick+0x5c>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e000      	b.n	8000b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000004 	.word	0x20000004

08000b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x20>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x24>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_IncTick+0x24>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	200000d4 	.word	0x200000d4

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <HAL_GetTick+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	200000d4 	.word	0x200000d4

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4907      	ldr	r1, [pc, #28]	; (8000c54 <__NVIC_EnableIRQ+0x38>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f7ff ff8e 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff29 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff3e 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff8e 	bl	8000cac <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5d 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff31 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffa2 	bl	8000d14 <SysTick_Config>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff feda 	bl	8000ba0 <HAL_GetTick>
 8000dec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e099      	b.n	8000f2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 0201 	bic.w	r2, r2, #1
 8000e16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e18:	e00f      	b.n	8000e3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e1a:	f7ff fec1 	bl	8000ba0 <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	2b05      	cmp	r3, #5
 8000e26:	d908      	bls.n	8000e3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2220      	movs	r2, #32
 8000e2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2203      	movs	r2, #3
 8000e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e078      	b.n	8000f2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1e8      	bne.n	8000e1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	4b38      	ldr	r3, [pc, #224]	; (8000f34 <HAL_DMA_Init+0x158>)
 8000e54:	4013      	ands	r3, r2
 8000e56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e90:	2b04      	cmp	r3, #4
 8000e92:	d107      	bne.n	8000ea4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	f023 0307 	bic.w	r3, r3, #7
 8000eba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d117      	bne.n	8000efe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d00e      	beq.n	8000efe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 fa7b 	bl	80013dc <DMA_CheckFifoParam>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d008      	beq.n	8000efe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2240      	movs	r2, #64	; 0x40
 8000ef0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000efa:	2301      	movs	r3, #1
 8000efc:	e016      	b.n	8000f2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 fa32 	bl	8001370 <DMA_CalcBaseAndBitshift>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f14:	223f      	movs	r2, #63	; 0x3f
 8000f16:	409a      	lsls	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2201      	movs	r2, #1
 8000f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	f010803f 	.word	0xf010803f

08000f38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f46:	f7ff fe2b 	bl	8000ba0 <HAL_GetTick>
 8000f4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d008      	beq.n	8000f6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e052      	b.n	8001010 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0216 	bic.w	r2, r2, #22
 8000f78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	695a      	ldr	r2, [r3, #20]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d103      	bne.n	8000f9a <HAL_DMA_Abort+0x62>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d007      	beq.n	8000faa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0208 	bic.w	r2, r2, #8
 8000fa8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0201 	bic.w	r2, r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fba:	e013      	b.n	8000fe4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fbc:	f7ff fdf0 	bl	8000ba0 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b05      	cmp	r3, #5
 8000fc8:	d90c      	bls.n	8000fe4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2220      	movs	r2, #32
 8000fce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e015      	b.n	8001010 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1e4      	bne.n	8000fbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff6:	223f      	movs	r2, #63	; 0x3f
 8000ff8:	409a      	lsls	r2, r3
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d004      	beq.n	8001036 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2280      	movs	r2, #128	; 0x80
 8001030:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00c      	b.n	8001050 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2205      	movs	r2, #5
 800103a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f022 0201 	bic.w	r2, r2, #1
 800104c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001068:	4b92      	ldr	r3, [pc, #584]	; (80012b4 <HAL_DMA_IRQHandler+0x258>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a92      	ldr	r2, [pc, #584]	; (80012b8 <HAL_DMA_IRQHandler+0x25c>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	0a9b      	lsrs	r3, r3, #10
 8001074:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001086:	2208      	movs	r2, #8
 8001088:	409a      	lsls	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4013      	ands	r3, r2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d01a      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	d013      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0204 	bic.w	r2, r2, #4
 80010ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b4:	2208      	movs	r2, #8
 80010b6:	409a      	lsls	r2, r3
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c0:	f043 0201 	orr.w	r2, r3, #1
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010cc:	2201      	movs	r2, #1
 80010ce:	409a      	lsls	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4013      	ands	r3, r2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d012      	beq.n	80010fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00b      	beq.n	80010fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ea:	2201      	movs	r2, #1
 80010ec:	409a      	lsls	r2, r3
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f6:	f043 0202 	orr.w	r2, r3, #2
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001102:	2204      	movs	r2, #4
 8001104:	409a      	lsls	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4013      	ands	r3, r2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d012      	beq.n	8001134 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00b      	beq.n	8001134 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001120:	2204      	movs	r2, #4
 8001122:	409a      	lsls	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112c:	f043 0204 	orr.w	r2, r3, #4
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001138:	2210      	movs	r2, #16
 800113a:	409a      	lsls	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4013      	ands	r3, r2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d043      	beq.n	80011cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d03c      	beq.n	80011cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001156:	2210      	movs	r2, #16
 8001158:	409a      	lsls	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d018      	beq.n	800119e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d108      	bne.n	800118c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	2b00      	cmp	r3, #0
 8001180:	d024      	beq.n	80011cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	4798      	blx	r3
 800118a:	e01f      	b.n	80011cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001190:	2b00      	cmp	r3, #0
 8001192:	d01b      	beq.n	80011cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	4798      	blx	r3
 800119c:	e016      	b.n	80011cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d107      	bne.n	80011bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0208 	bic.w	r2, r2, #8
 80011ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d0:	2220      	movs	r2, #32
 80011d2:	409a      	lsls	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 808e 	beq.w	80012fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 8086 	beq.w	80012fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f2:	2220      	movs	r2, #32
 80011f4:	409a      	lsls	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b05      	cmp	r3, #5
 8001204:	d136      	bne.n	8001274 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0216 	bic.w	r2, r2, #22
 8001214:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	695a      	ldr	r2, [r3, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001224:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	2b00      	cmp	r3, #0
 800122c:	d103      	bne.n	8001236 <HAL_DMA_IRQHandler+0x1da>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001232:	2b00      	cmp	r3, #0
 8001234:	d007      	beq.n	8001246 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 0208 	bic.w	r2, r2, #8
 8001244:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124a:	223f      	movs	r2, #63	; 0x3f
 800124c:	409a      	lsls	r2, r3
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001266:	2b00      	cmp	r3, #0
 8001268:	d07d      	beq.n	8001366 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	4798      	blx	r3
        }
        return;
 8001272:	e078      	b.n	8001366 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d01c      	beq.n	80012bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d108      	bne.n	80012a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001294:	2b00      	cmp	r3, #0
 8001296:	d030      	beq.n	80012fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	4798      	blx	r3
 80012a0:	e02b      	b.n	80012fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d027      	beq.n	80012fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	4798      	blx	r3
 80012b2:	e022      	b.n	80012fa <HAL_DMA_IRQHandler+0x29e>
 80012b4:	20000000 	.word	0x20000000
 80012b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10f      	bne.n	80012ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0210 	bic.w	r2, r2, #16
 80012d8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d032      	beq.n	8001368 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d022      	beq.n	8001354 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2205      	movs	r2, #5
 8001312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0201 	bic.w	r2, r2, #1
 8001324:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	3301      	adds	r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	429a      	cmp	r2, r3
 8001330:	d307      	bcc.n	8001342 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f2      	bne.n	8001326 <HAL_DMA_IRQHandler+0x2ca>
 8001340:	e000      	b.n	8001344 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001342:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	2b00      	cmp	r3, #0
 800135a:	d005      	beq.n	8001368 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	4798      	blx	r3
 8001364:	e000      	b.n	8001368 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001366:	bf00      	nop
    }
  }
}
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop

08001370 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	3b10      	subs	r3, #16
 8001380:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <DMA_CalcBaseAndBitshift+0x64>)
 8001382:	fba2 2303 	umull	r2, r3, r2, r3
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800138a:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <DMA_CalcBaseAndBitshift+0x68>)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b03      	cmp	r3, #3
 800139c:	d909      	bls.n	80013b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013a6:	f023 0303 	bic.w	r3, r3, #3
 80013aa:	1d1a      	adds	r2, r3, #4
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	659a      	str	r2, [r3, #88]	; 0x58
 80013b0:	e007      	b.n	80013c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013ba:	f023 0303 	bic.w	r3, r3, #3
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	aaaaaaab 	.word	0xaaaaaaab
 80013d8:	0800308c 	.word	0x0800308c

080013dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d11f      	bne.n	8001436 <DMA_CheckFifoParam+0x5a>
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d856      	bhi.n	80014aa <DMA_CheckFifoParam+0xce>
 80013fc:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <DMA_CheckFifoParam+0x28>)
 80013fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001402:	bf00      	nop
 8001404:	08001415 	.word	0x08001415
 8001408:	08001427 	.word	0x08001427
 800140c:	08001415 	.word	0x08001415
 8001410:	080014ab 	.word	0x080014ab
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d046      	beq.n	80014ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001424:	e043      	b.n	80014ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800142e:	d140      	bne.n	80014b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001434:	e03d      	b.n	80014b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800143e:	d121      	bne.n	8001484 <DMA_CheckFifoParam+0xa8>
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b03      	cmp	r3, #3
 8001444:	d837      	bhi.n	80014b6 <DMA_CheckFifoParam+0xda>
 8001446:	a201      	add	r2, pc, #4	; (adr r2, 800144c <DMA_CheckFifoParam+0x70>)
 8001448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144c:	0800145d 	.word	0x0800145d
 8001450:	08001463 	.word	0x08001463
 8001454:	0800145d 	.word	0x0800145d
 8001458:	08001475 	.word	0x08001475
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
      break;
 8001460:	e030      	b.n	80014c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001466:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d025      	beq.n	80014ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001472:	e022      	b.n	80014ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800147c:	d11f      	bne.n	80014be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001482:	e01c      	b.n	80014be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d903      	bls.n	8001492 <DMA_CheckFifoParam+0xb6>
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	2b03      	cmp	r3, #3
 800148e:	d003      	beq.n	8001498 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001490:	e018      	b.n	80014c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
      break;
 8001496:	e015      	b.n	80014c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00e      	beq.n	80014c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	73fb      	strb	r3, [r7, #15]
      break;
 80014a8:	e00b      	b.n	80014c2 <DMA_CheckFifoParam+0xe6>
      break;
 80014aa:	bf00      	nop
 80014ac:	e00a      	b.n	80014c4 <DMA_CheckFifoParam+0xe8>
      break;
 80014ae:	bf00      	nop
 80014b0:	e008      	b.n	80014c4 <DMA_CheckFifoParam+0xe8>
      break;
 80014b2:	bf00      	nop
 80014b4:	e006      	b.n	80014c4 <DMA_CheckFifoParam+0xe8>
      break;
 80014b6:	bf00      	nop
 80014b8:	e004      	b.n	80014c4 <DMA_CheckFifoParam+0xe8>
      break;
 80014ba:	bf00      	nop
 80014bc:	e002      	b.n	80014c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80014be:	bf00      	nop
 80014c0:	e000      	b.n	80014c4 <DMA_CheckFifoParam+0xe8>
      break;
 80014c2:	bf00      	nop
    }
  } 
  
  return status; 
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop

080014d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	e165      	b.n	80017bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014f0:	2201      	movs	r2, #1
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	429a      	cmp	r2, r3
 800150a:	f040 8154 	bne.w	80017b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	2b01      	cmp	r3, #1
 8001518:	d005      	beq.n	8001526 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001522:	2b02      	cmp	r3, #2
 8001524:	d130      	bne.n	8001588 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800155c:	2201      	movs	r2, #1
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	f003 0201 	and.w	r2, r3, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b03      	cmp	r3, #3
 8001592:	d017      	beq.n	80015c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d123      	bne.n	8001618 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	08da      	lsrs	r2, r3, #3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3208      	adds	r2, #8
 80015d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	220f      	movs	r2, #15
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	08da      	lsrs	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3208      	adds	r2, #8
 8001612:	69b9      	ldr	r1, [r7, #24]
 8001614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0203 	and.w	r2, r3, #3
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80ae 	beq.w	80017b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b5d      	ldr	r3, [pc, #372]	; (80017d4 <HAL_GPIO_Init+0x300>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	4a5c      	ldr	r2, [pc, #368]	; (80017d4 <HAL_GPIO_Init+0x300>)
 8001664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
 800166a:	4b5a      	ldr	r3, [pc, #360]	; (80017d4 <HAL_GPIO_Init+0x300>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001676:	4a58      	ldr	r2, [pc, #352]	; (80017d8 <HAL_GPIO_Init+0x304>)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3302      	adds	r3, #2
 800167e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	220f      	movs	r2, #15
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4f      	ldr	r2, [pc, #316]	; (80017dc <HAL_GPIO_Init+0x308>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d025      	beq.n	80016ee <HAL_GPIO_Init+0x21a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4e      	ldr	r2, [pc, #312]	; (80017e0 <HAL_GPIO_Init+0x30c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d01f      	beq.n	80016ea <HAL_GPIO_Init+0x216>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4d      	ldr	r2, [pc, #308]	; (80017e4 <HAL_GPIO_Init+0x310>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d019      	beq.n	80016e6 <HAL_GPIO_Init+0x212>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4c      	ldr	r2, [pc, #304]	; (80017e8 <HAL_GPIO_Init+0x314>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d013      	beq.n	80016e2 <HAL_GPIO_Init+0x20e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4b      	ldr	r2, [pc, #300]	; (80017ec <HAL_GPIO_Init+0x318>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00d      	beq.n	80016de <HAL_GPIO_Init+0x20a>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4a      	ldr	r2, [pc, #296]	; (80017f0 <HAL_GPIO_Init+0x31c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d007      	beq.n	80016da <HAL_GPIO_Init+0x206>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a49      	ldr	r2, [pc, #292]	; (80017f4 <HAL_GPIO_Init+0x320>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d101      	bne.n	80016d6 <HAL_GPIO_Init+0x202>
 80016d2:	2306      	movs	r3, #6
 80016d4:	e00c      	b.n	80016f0 <HAL_GPIO_Init+0x21c>
 80016d6:	2307      	movs	r3, #7
 80016d8:	e00a      	b.n	80016f0 <HAL_GPIO_Init+0x21c>
 80016da:	2305      	movs	r3, #5
 80016dc:	e008      	b.n	80016f0 <HAL_GPIO_Init+0x21c>
 80016de:	2304      	movs	r3, #4
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x21c>
 80016e2:	2303      	movs	r3, #3
 80016e4:	e004      	b.n	80016f0 <HAL_GPIO_Init+0x21c>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e002      	b.n	80016f0 <HAL_GPIO_Init+0x21c>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <HAL_GPIO_Init+0x21c>
 80016ee:	2300      	movs	r3, #0
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	f002 0203 	and.w	r2, r2, #3
 80016f6:	0092      	lsls	r2, r2, #2
 80016f8:	4093      	lsls	r3, r2
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001700:	4935      	ldr	r1, [pc, #212]	; (80017d8 <HAL_GPIO_Init+0x304>)
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	3302      	adds	r3, #2
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170e:	4b3a      	ldr	r3, [pc, #232]	; (80017f8 <HAL_GPIO_Init+0x324>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001732:	4a31      	ldr	r2, [pc, #196]	; (80017f8 <HAL_GPIO_Init+0x324>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001738:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <HAL_GPIO_Init+0x324>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800175c:	4a26      	ldr	r2, [pc, #152]	; (80017f8 <HAL_GPIO_Init+0x324>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001762:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <HAL_GPIO_Init+0x324>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001786:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <HAL_GPIO_Init+0x324>)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <HAL_GPIO_Init+0x324>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b0:	4a11      	ldr	r2, [pc, #68]	; (80017f8 <HAL_GPIO_Init+0x324>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3301      	adds	r3, #1
 80017ba:	61fb      	str	r3, [r7, #28]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	2b0f      	cmp	r3, #15
 80017c0:	f67f ae96 	bls.w	80014f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40013800 	.word	0x40013800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40020400 	.word	0x40020400
 80017e4:	40020800 	.word	0x40020800
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40021400 	.word	0x40021400
 80017f4:	40021800 	.word	0x40021800
 80017f8:	40013c00 	.word	0x40013c00

080017fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	887b      	ldrh	r3, [r7, #2]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d002      	beq.n	800181a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	e001      	b.n	800181e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
 8001838:	4613      	mov	r3, r2
 800183a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800183c:	787b      	ldrb	r3, [r7, #1]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001848:	e003      	b.n	8001852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	041a      	lsls	r2, r3, #16
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	619a      	str	r2, [r3, #24]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0cc      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001874:	4b68      	ldr	r3, [pc, #416]	; (8001a18 <HAL_RCC_ClockConfig+0x1b8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d90c      	bls.n	800189c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b65      	ldr	r3, [pc, #404]	; (8001a18 <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188a:	4b63      	ldr	r3, [pc, #396]	; (8001a18 <HAL_RCC_ClockConfig+0x1b8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0b8      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d020      	beq.n	80018ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b4:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4a58      	ldr	r2, [pc, #352]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018cc:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	4a52      	ldr	r2, [pc, #328]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d8:	4b50      	ldr	r3, [pc, #320]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	494d      	ldr	r1, [pc, #308]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d044      	beq.n	8001980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d119      	bne.n	800193e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e07f      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d003      	beq.n	800191e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800191a:	2b03      	cmp	r3, #3
 800191c:	d107      	bne.n	800192e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191e:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d109      	bne.n	800193e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e06f      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192e:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e067      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800193e:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f023 0203 	bic.w	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4934      	ldr	r1, [pc, #208]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	4313      	orrs	r3, r2
 800194e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001950:	f7ff f926 	bl	8000ba0 <HAL_GetTick>
 8001954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	e00a      	b.n	800196e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001958:	f7ff f922 	bl	8000ba0 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	; 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e04f      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 020c 	and.w	r2, r3, #12
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	429a      	cmp	r2, r3
 800197e:	d1eb      	bne.n	8001958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001980:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <HAL_RCC_ClockConfig+0x1b8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d20c      	bcs.n	80019a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <HAL_RCC_ClockConfig+0x1b8>)
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <HAL_RCC_ClockConfig+0x1b8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e032      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4916      	ldr	r1, [pc, #88]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d009      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	490e      	ldr	r1, [pc, #56]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019e6:	f000 f855 	bl	8001a94 <HAL_RCC_GetSysClockFreq>
 80019ea:	4602      	mov	r2, r0
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	490a      	ldr	r1, [pc, #40]	; (8001a20 <HAL_RCC_ClockConfig+0x1c0>)
 80019f8:	5ccb      	ldrb	r3, [r1, r3]
 80019fa:	fa22 f303 	lsr.w	r3, r2, r3
 80019fe:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RCC_ClockConfig+0x1c8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff f886 	bl	8000b18 <HAL_InitTick>

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023c00 	.word	0x40023c00
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	08003074 	.word	0x08003074
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000004 	.word	0x20000004

08001a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000000 	.word	0x20000000

08001a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a48:	f7ff fff0 	bl	8001a2c <HAL_RCC_GetHCLKFreq>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	0a9b      	lsrs	r3, r3, #10
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	4903      	ldr	r1, [pc, #12]	; (8001a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a5a:	5ccb      	ldrb	r3, [r1, r3]
 8001a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	08003084 	.word	0x08003084

08001a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a70:	f7ff ffdc 	bl	8001a2c <HAL_RCC_GetHCLKFreq>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	0b5b      	lsrs	r3, r3, #13
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	4903      	ldr	r1, [pc, #12]	; (8001a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a82:	5ccb      	ldrb	r3, [r1, r3]
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	08003084 	.word	0x08003084

08001a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a98:	b088      	sub	sp, #32
 8001a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ab0:	4bce      	ldr	r3, [pc, #824]	; (8001dec <HAL_RCC_GetSysClockFreq+0x358>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b0c      	cmp	r3, #12
 8001aba:	f200 818d 	bhi.w	8001dd8 <HAL_RCC_GetSysClockFreq+0x344>
 8001abe:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <HAL_RCC_GetSysClockFreq+0x30>)
 8001ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac4:	08001af9 	.word	0x08001af9
 8001ac8:	08001dd9 	.word	0x08001dd9
 8001acc:	08001dd9 	.word	0x08001dd9
 8001ad0:	08001dd9 	.word	0x08001dd9
 8001ad4:	08001aff 	.word	0x08001aff
 8001ad8:	08001dd9 	.word	0x08001dd9
 8001adc:	08001dd9 	.word	0x08001dd9
 8001ae0:	08001dd9 	.word	0x08001dd9
 8001ae4:	08001b05 	.word	0x08001b05
 8001ae8:	08001dd9 	.word	0x08001dd9
 8001aec:	08001dd9 	.word	0x08001dd9
 8001af0:	08001dd9 	.word	0x08001dd9
 8001af4:	08001c79 	.word	0x08001c79
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001af8:	4bbd      	ldr	r3, [pc, #756]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001afa:	61bb      	str	r3, [r7, #24]
       break;
 8001afc:	e16f      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001afe:	4bbd      	ldr	r3, [pc, #756]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x360>)
 8001b00:	61bb      	str	r3, [r7, #24]
      break;
 8001b02:	e16c      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b04:	4bb9      	ldr	r3, [pc, #740]	; (8001dec <HAL_RCC_GetSysClockFreq+0x358>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b0c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b0e:	4bb7      	ldr	r3, [pc, #732]	; (8001dec <HAL_RCC_GetSysClockFreq+0x358>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d053      	beq.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1a:	4bb4      	ldr	r3, [pc, #720]	; (8001dec <HAL_RCC_GetSysClockFreq+0x358>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	099b      	lsrs	r3, r3, #6
 8001b20:	461a      	mov	r2, r3
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b2a:	f04f 0100 	mov.w	r1, #0
 8001b2e:	ea02 0400 	and.w	r4, r2, r0
 8001b32:	603c      	str	r4, [r7, #0]
 8001b34:	400b      	ands	r3, r1
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4629      	mov	r1, r5
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	014b      	lsls	r3, r1, #5
 8001b4a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b4e:	0142      	lsls	r2, r0, #5
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	4623      	mov	r3, r4
 8001b56:	1ac0      	subs	r0, r0, r3
 8001b58:	462b      	mov	r3, r5
 8001b5a:	eb61 0103 	sbc.w	r1, r1, r3
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	018b      	lsls	r3, r1, #6
 8001b68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b6c:	0182      	lsls	r2, r0, #6
 8001b6e:	1a12      	subs	r2, r2, r0
 8001b70:	eb63 0301 	sbc.w	r3, r3, r1
 8001b74:	f04f 0000 	mov.w	r0, #0
 8001b78:	f04f 0100 	mov.w	r1, #0
 8001b7c:	00d9      	lsls	r1, r3, #3
 8001b7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b82:	00d0      	lsls	r0, r2, #3
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4621      	mov	r1, r4
 8001b8a:	1852      	adds	r2, r2, r1
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	eb43 0101 	adc.w	r1, r3, r1
 8001b92:	460b      	mov	r3, r1
 8001b94:	f04f 0000 	mov.w	r0, #0
 8001b98:	f04f 0100 	mov.w	r1, #0
 8001b9c:	0259      	lsls	r1, r3, #9
 8001b9e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ba2:	0250      	lsls	r0, r2, #9
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	f7fe fb26 	bl	8000204 <__aeabi_uldivmod>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	e04c      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc2:	4b8a      	ldr	r3, [pc, #552]	; (8001dec <HAL_RCC_GetSysClockFreq+0x358>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	099b      	lsrs	r3, r3, #6
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bd2:	f04f 0100 	mov.w	r1, #0
 8001bd6:	ea02 0a00 	and.w	sl, r2, r0
 8001bda:	ea03 0b01 	and.w	fp, r3, r1
 8001bde:	4650      	mov	r0, sl
 8001be0:	4659      	mov	r1, fp
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	014b      	lsls	r3, r1, #5
 8001bec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bf0:	0142      	lsls	r2, r0, #5
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	ebb0 000a 	subs.w	r0, r0, sl
 8001bfa:	eb61 010b 	sbc.w	r1, r1, fp
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	018b      	lsls	r3, r1, #6
 8001c08:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c0c:	0182      	lsls	r2, r0, #6
 8001c0e:	1a12      	subs	r2, r2, r0
 8001c10:	eb63 0301 	sbc.w	r3, r3, r1
 8001c14:	f04f 0000 	mov.w	r0, #0
 8001c18:	f04f 0100 	mov.w	r1, #0
 8001c1c:	00d9      	lsls	r1, r3, #3
 8001c1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c22:	00d0      	lsls	r0, r2, #3
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	eb12 020a 	adds.w	r2, r2, sl
 8001c2c:	eb43 030b 	adc.w	r3, r3, fp
 8001c30:	f04f 0000 	mov.w	r0, #0
 8001c34:	f04f 0100 	mov.w	r1, #0
 8001c38:	0299      	lsls	r1, r3, #10
 8001c3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c3e:	0290      	lsls	r0, r2, #10
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	f7fe fad8 	bl	8000204 <__aeabi_uldivmod>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4613      	mov	r3, r2
 8001c5a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c5c:	4b63      	ldr	r3, [pc, #396]	; (8001dec <HAL_RCC_GetSysClockFreq+0x358>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	3301      	adds	r3, #1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	61bb      	str	r3, [r7, #24]
      break;
 8001c76:	e0b2      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c78:	4b5c      	ldr	r3, [pc, #368]	; (8001dec <HAL_RCC_GetSysClockFreq+0x358>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c80:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c82:	4b5a      	ldr	r3, [pc, #360]	; (8001dec <HAL_RCC_GetSysClockFreq+0x358>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d04d      	beq.n	8001d2a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8e:	4b57      	ldr	r3, [pc, #348]	; (8001dec <HAL_RCC_GetSysClockFreq+0x358>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	099b      	lsrs	r3, r3, #6
 8001c94:	461a      	mov	r2, r3
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c9e:	f04f 0100 	mov.w	r1, #0
 8001ca2:	ea02 0800 	and.w	r8, r2, r0
 8001ca6:	ea03 0901 	and.w	r9, r3, r1
 8001caa:	4640      	mov	r0, r8
 8001cac:	4649      	mov	r1, r9
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	014b      	lsls	r3, r1, #5
 8001cb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cbc:	0142      	lsls	r2, r0, #5
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	ebb0 0008 	subs.w	r0, r0, r8
 8001cc6:	eb61 0109 	sbc.w	r1, r1, r9
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	018b      	lsls	r3, r1, #6
 8001cd4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cd8:	0182      	lsls	r2, r0, #6
 8001cda:	1a12      	subs	r2, r2, r0
 8001cdc:	eb63 0301 	sbc.w	r3, r3, r1
 8001ce0:	f04f 0000 	mov.w	r0, #0
 8001ce4:	f04f 0100 	mov.w	r1, #0
 8001ce8:	00d9      	lsls	r1, r3, #3
 8001cea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cee:	00d0      	lsls	r0, r2, #3
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	eb12 0208 	adds.w	r2, r2, r8
 8001cf8:	eb43 0309 	adc.w	r3, r3, r9
 8001cfc:	f04f 0000 	mov.w	r0, #0
 8001d00:	f04f 0100 	mov.w	r1, #0
 8001d04:	0259      	lsls	r1, r3, #9
 8001d06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d0a:	0250      	lsls	r0, r2, #9
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	461a      	mov	r2, r3
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	f7fe fa72 	bl	8000204 <__aeabi_uldivmod>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4613      	mov	r3, r2
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	e04a      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d2a:	4b30      	ldr	r3, [pc, #192]	; (8001dec <HAL_RCC_GetSysClockFreq+0x358>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	099b      	lsrs	r3, r3, #6
 8001d30:	461a      	mov	r2, r3
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d3a:	f04f 0100 	mov.w	r1, #0
 8001d3e:	ea02 0400 	and.w	r4, r2, r0
 8001d42:	ea03 0501 	and.w	r5, r3, r1
 8001d46:	4620      	mov	r0, r4
 8001d48:	4629      	mov	r1, r5
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	014b      	lsls	r3, r1, #5
 8001d54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d58:	0142      	lsls	r2, r0, #5
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	1b00      	subs	r0, r0, r4
 8001d60:	eb61 0105 	sbc.w	r1, r1, r5
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	018b      	lsls	r3, r1, #6
 8001d6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d72:	0182      	lsls	r2, r0, #6
 8001d74:	1a12      	subs	r2, r2, r0
 8001d76:	eb63 0301 	sbc.w	r3, r3, r1
 8001d7a:	f04f 0000 	mov.w	r0, #0
 8001d7e:	f04f 0100 	mov.w	r1, #0
 8001d82:	00d9      	lsls	r1, r3, #3
 8001d84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d88:	00d0      	lsls	r0, r2, #3
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	1912      	adds	r2, r2, r4
 8001d90:	eb45 0303 	adc.w	r3, r5, r3
 8001d94:	f04f 0000 	mov.w	r0, #0
 8001d98:	f04f 0100 	mov.w	r1, #0
 8001d9c:	0299      	lsls	r1, r3, #10
 8001d9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001da2:	0290      	lsls	r0, r2, #10
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	461a      	mov	r2, r3
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	f7fe fa26 	bl	8000204 <__aeabi_uldivmod>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_RCC_GetSysClockFreq+0x358>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	0f1b      	lsrs	r3, r3, #28
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	61bb      	str	r3, [r7, #24]
      break;
 8001dd6:	e002      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001dda:	61bb      	str	r3, [r7, #24]
      break;
 8001ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dde:	69bb      	ldr	r3, [r7, #24]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	00f42400 	.word	0x00f42400
 8001df4:	007a1200 	.word	0x007a1200

08001df8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e28d      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8083 	beq.w	8001f1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e18:	4b94      	ldr	r3, [pc, #592]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d019      	beq.n	8001e58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e24:	4b91      	ldr	r3, [pc, #580]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e30:	4b8e      	ldr	r3, [pc, #568]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e3c:	d00c      	beq.n	8001e58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3e:	4b8b      	ldr	r3, [pc, #556]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d112      	bne.n	8001e70 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e4a:	4b88      	ldr	r3, [pc, #544]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e56:	d10b      	bne.n	8001e70 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	4b84      	ldr	r3, [pc, #528]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d05b      	beq.n	8001f1c <HAL_RCC_OscConfig+0x124>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d157      	bne.n	8001f1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e25a      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e78:	d106      	bne.n	8001e88 <HAL_RCC_OscConfig+0x90>
 8001e7a:	4b7c      	ldr	r3, [pc, #496]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a7b      	ldr	r2, [pc, #492]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e01d      	b.n	8001ec4 <HAL_RCC_OscConfig+0xcc>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0xb4>
 8001e92:	4b76      	ldr	r3, [pc, #472]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a75      	ldr	r2, [pc, #468]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	4b73      	ldr	r3, [pc, #460]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a72      	ldr	r2, [pc, #456]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e00b      	b.n	8001ec4 <HAL_RCC_OscConfig+0xcc>
 8001eac:	4b6f      	ldr	r3, [pc, #444]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a6e      	ldr	r2, [pc, #440]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	4b6c      	ldr	r3, [pc, #432]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a6b      	ldr	r2, [pc, #428]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d013      	beq.n	8001ef4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7fe fe68 	bl	8000ba0 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7fe fe64 	bl	8000ba0 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	; 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e21f      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	4b61      	ldr	r3, [pc, #388]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0xdc>
 8001ef2:	e014      	b.n	8001f1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7fe fe54 	bl	8000ba0 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001efc:	f7fe fe50 	bl	8000ba0 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	; 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e20b      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0e:	4b57      	ldr	r3, [pc, #348]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x104>
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d06f      	beq.n	800200a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f2a:	4b50      	ldr	r3, [pc, #320]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d017      	beq.n	8001f66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f36:	4b4d      	ldr	r3, [pc, #308]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d105      	bne.n	8001f4e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f42:	4b4a      	ldr	r3, [pc, #296]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00b      	beq.n	8001f66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d11c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f5a:	4b44      	ldr	r3, [pc, #272]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d116      	bne.n	8001f94 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	4b41      	ldr	r3, [pc, #260]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_RCC_OscConfig+0x186>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e1d3      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4937      	ldr	r1, [pc, #220]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	e03a      	b.n	800200a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d020      	beq.n	8001fde <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f9c:	4b34      	ldr	r3, [pc, #208]	; (8002070 <HAL_RCC_OscConfig+0x278>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7fe fdfd 	bl	8000ba0 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001faa:	f7fe fdf9 	bl	8000ba0 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e1b4      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	4b2b      	ldr	r3, [pc, #172]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc8:	4b28      	ldr	r3, [pc, #160]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4925      	ldr	r1, [pc, #148]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]
 8001fdc:	e015      	b.n	800200a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fde:	4b24      	ldr	r3, [pc, #144]	; (8002070 <HAL_RCC_OscConfig+0x278>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7fe fddc 	bl	8000ba0 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fec:	f7fe fdd8 	bl	8000ba0 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e193      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d036      	beq.n	8002084 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d016      	beq.n	800204c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_RCC_OscConfig+0x27c>)
 8002020:	2201      	movs	r2, #1
 8002022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7fe fdbc 	bl	8000ba0 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800202c:	f7fe fdb8 	bl	8000ba0 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e173      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8002040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x234>
 800204a:	e01b      	b.n	8002084 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_OscConfig+0x27c>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002052:	f7fe fda5 	bl	8000ba0 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	e00e      	b.n	8002078 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800205a:	f7fe fda1 	bl	8000ba0 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d907      	bls.n	8002078 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e15c      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
 800206c:	40023800 	.word	0x40023800
 8002070:	42470000 	.word	0x42470000
 8002074:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	4b8a      	ldr	r3, [pc, #552]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 800207a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1ea      	bne.n	800205a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 8097 	beq.w	80021c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002096:	4b83      	ldr	r3, [pc, #524]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10f      	bne.n	80020c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	4b7f      	ldr	r3, [pc, #508]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	4a7e      	ldr	r2, [pc, #504]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 80020ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b0:	6413      	str	r3, [r2, #64]	; 0x40
 80020b2:	4b7c      	ldr	r3, [pc, #496]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020be:	2301      	movs	r3, #1
 80020c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c2:	4b79      	ldr	r3, [pc, #484]	; (80022a8 <HAL_RCC_OscConfig+0x4b0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d118      	bne.n	8002100 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ce:	4b76      	ldr	r3, [pc, #472]	; (80022a8 <HAL_RCC_OscConfig+0x4b0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a75      	ldr	r2, [pc, #468]	; (80022a8 <HAL_RCC_OscConfig+0x4b0>)
 80020d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020da:	f7fe fd61 	bl	8000ba0 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e2:	f7fe fd5d 	bl	8000ba0 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e118      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	4b6c      	ldr	r3, [pc, #432]	; (80022a8 <HAL_RCC_OscConfig+0x4b0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d106      	bne.n	8002116 <HAL_RCC_OscConfig+0x31e>
 8002108:	4b66      	ldr	r3, [pc, #408]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210c:	4a65      	ldr	r2, [pc, #404]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6713      	str	r3, [r2, #112]	; 0x70
 8002114:	e01c      	b.n	8002150 <HAL_RCC_OscConfig+0x358>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b05      	cmp	r3, #5
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0x340>
 800211e:	4b61      	ldr	r3, [pc, #388]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 8002120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002122:	4a60      	ldr	r2, [pc, #384]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 8002124:	f043 0304 	orr.w	r3, r3, #4
 8002128:	6713      	str	r3, [r2, #112]	; 0x70
 800212a:	4b5e      	ldr	r3, [pc, #376]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 800212c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212e:	4a5d      	ldr	r2, [pc, #372]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6713      	str	r3, [r2, #112]	; 0x70
 8002136:	e00b      	b.n	8002150 <HAL_RCC_OscConfig+0x358>
 8002138:	4b5a      	ldr	r3, [pc, #360]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	4a59      	ldr	r2, [pc, #356]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 800213e:	f023 0301 	bic.w	r3, r3, #1
 8002142:	6713      	str	r3, [r2, #112]	; 0x70
 8002144:	4b57      	ldr	r3, [pc, #348]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002148:	4a56      	ldr	r2, [pc, #344]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 800214a:	f023 0304 	bic.w	r3, r3, #4
 800214e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d015      	beq.n	8002184 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002158:	f7fe fd22 	bl	8000ba0 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215e:	e00a      	b.n	8002176 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002160:	f7fe fd1e 	bl	8000ba0 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e0d7      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002176:	4b4b      	ldr	r3, [pc, #300]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0ee      	beq.n	8002160 <HAL_RCC_OscConfig+0x368>
 8002182:	e014      	b.n	80021ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002184:	f7fe fd0c 	bl	8000ba0 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218c:	f7fe fd08 	bl	8000ba0 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	; 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e0c1      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a2:	4b40      	ldr	r3, [pc, #256]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1ee      	bne.n	800218c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ae:	7dfb      	ldrb	r3, [r7, #23]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d105      	bne.n	80021c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b4:	4b3b      	ldr	r3, [pc, #236]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	4a3a      	ldr	r2, [pc, #232]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 80021ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80ad 	beq.w	8002324 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ca:	4b36      	ldr	r3, [pc, #216]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d060      	beq.n	8002298 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d145      	bne.n	800226a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021de:	4b33      	ldr	r3, [pc, #204]	; (80022ac <HAL_RCC_OscConfig+0x4b4>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7fe fcdc 	bl	8000ba0 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ec:	f7fe fcd8 	bl	8000ba0 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e093      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fe:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69da      	ldr	r2, [r3, #28]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	019b      	lsls	r3, r3, #6
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	085b      	lsrs	r3, r3, #1
 8002222:	3b01      	subs	r3, #1
 8002224:	041b      	lsls	r3, r3, #16
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002234:	071b      	lsls	r3, r3, #28
 8002236:	491b      	ldr	r1, [pc, #108]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800223c:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <HAL_RCC_OscConfig+0x4b4>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7fe fcad 	bl	8000ba0 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224a:	f7fe fca9 	bl	8000ba0 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e064      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x452>
 8002268:	e05c      	b.n	8002324 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <HAL_RCC_OscConfig+0x4b4>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe fc96 	bl	8000ba0 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002278:	f7fe fc92 	bl	8000ba0 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e04d      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x480>
 8002296:	e045      	b.n	8002324 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d107      	bne.n	80022b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e040      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40007000 	.word	0x40007000
 80022ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <HAL_RCC_OscConfig+0x538>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d030      	beq.n	8002320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d129      	bne.n	8002320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d122      	bne.n	8002320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022e0:	4013      	ands	r3, r2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d119      	bne.n	8002320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f6:	085b      	lsrs	r3, r3, #1
 80022f8:	3b01      	subs	r3, #1
 80022fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d10f      	bne.n	8002320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d107      	bne.n	8002320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800

08002334 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e03f      	b.n	80023c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe fb0e 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2224      	movs	r2, #36	; 0x24
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002376:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fc7b 	bl	8002c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800238c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695a      	ldr	r2, [r3, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800239c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b0ba      	sub	sp, #232	; 0xe8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800240e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10f      	bne.n	8002436 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800241a:	f003 0320 	and.w	r3, r3, #32
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <HAL_UART_IRQHandler+0x66>
 8002422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fb65 	bl	8002afe <UART_Receive_IT>
      return;
 8002434:	e256      	b.n	80028e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002436:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80de 	beq.w	80025fc <HAL_UART_IRQHandler+0x22c>
 8002440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d106      	bne.n	800245a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800244c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002450:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80d1 	beq.w	80025fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800245a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_UART_IRQHandler+0xae>
 8002466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f043 0201 	orr.w	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800247e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00b      	beq.n	80024a2 <HAL_UART_IRQHandler+0xd2>
 800248a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f043 0202 	orr.w	r2, r3, #2
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <HAL_UART_IRQHandler+0xf6>
 80024ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f043 0204 	orr.w	r2, r3, #4
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d011      	beq.n	80024f6 <HAL_UART_IRQHandler+0x126>
 80024d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024d6:	f003 0320 	and.w	r3, r3, #32
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d105      	bne.n	80024ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80024de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f043 0208 	orr.w	r2, r3, #8
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 81ed 	beq.w	80028da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_UART_IRQHandler+0x14e>
 800250c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 faf0 	bl	8002afe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002528:	2b40      	cmp	r3, #64	; 0x40
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d103      	bne.n	800254a <HAL_UART_IRQHandler+0x17a>
 8002542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002546:	2b00      	cmp	r3, #0
 8002548:	d04f      	beq.n	80025ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f9f8 	bl	8002940 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255a:	2b40      	cmp	r3, #64	; 0x40
 800255c:	d141      	bne.n	80025e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	3314      	adds	r3, #20
 8002564:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002568:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800256c:	e853 3f00 	ldrex	r3, [r3]
 8002570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002574:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800257c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	3314      	adds	r3, #20
 8002586:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800258a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800258e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002592:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002596:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800259a:	e841 2300 	strex	r3, r2, [r1]
 800259e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80025a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1d9      	bne.n	800255e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d013      	beq.n	80025da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b6:	4a7d      	ldr	r2, [pc, #500]	; (80027ac <HAL_UART_IRQHandler+0x3dc>)
 80025b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fd2a 	bl	8001018 <HAL_DMA_Abort_IT>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d016      	beq.n	80025f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025d4:	4610      	mov	r0, r2
 80025d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d8:	e00e      	b.n	80025f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f99a 	bl	8002914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e0:	e00a      	b.n	80025f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f996 	bl	8002914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e8:	e006      	b.n	80025f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f992 	bl	8002914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80025f6:	e170      	b.n	80028da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f8:	bf00      	nop
    return;
 80025fa:	e16e      	b.n	80028da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	2b01      	cmp	r3, #1
 8002602:	f040 814a 	bne.w	800289a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8143 	beq.w	800289a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002618:	f003 0310 	and.w	r3, r3, #16
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 813c 	beq.w	800289a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002622:	2300      	movs	r3, #0
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002642:	2b40      	cmp	r3, #64	; 0x40
 8002644:	f040 80b4 	bne.w	80027b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002654:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8140 	beq.w	80028de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002662:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002666:	429a      	cmp	r2, r3
 8002668:	f080 8139 	bcs.w	80028de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002672:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800267e:	f000 8088 	beq.w	8002792 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	330c      	adds	r3, #12
 8002688:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002690:	e853 3f00 	ldrex	r3, [r3]
 8002694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002698:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800269c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	330c      	adds	r3, #12
 80026aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80026ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80026ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80026be:	e841 2300 	strex	r3, r2, [r1]
 80026c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80026c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1d9      	bne.n	8002682 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3314      	adds	r3, #20
 80026d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d8:	e853 3f00 	ldrex	r3, [r3]
 80026dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80026de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3314      	adds	r3, #20
 80026ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80026f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80026fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80026fe:	e841 2300 	strex	r3, r2, [r1]
 8002702:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1e1      	bne.n	80026ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3314      	adds	r3, #20
 8002710:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002714:	e853 3f00 	ldrex	r3, [r3]
 8002718:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800271a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800271c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3314      	adds	r3, #20
 800272a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800272e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002730:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002732:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002734:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002736:	e841 2300 	strex	r3, r2, [r1]
 800273a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800273c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1e3      	bne.n	800270a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	330c      	adds	r3, #12
 8002756:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800275a:	e853 3f00 	ldrex	r3, [r3]
 800275e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002762:	f023 0310 	bic.w	r3, r3, #16
 8002766:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	330c      	adds	r3, #12
 8002770:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002774:	65ba      	str	r2, [r7, #88]	; 0x58
 8002776:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002778:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800277a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800277c:	e841 2300 	strex	r3, r2, [r1]
 8002780:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1e3      	bne.n	8002750 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	4618      	mov	r0, r3
 800278e:	f7fe fbd3 	bl	8000f38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800279a:	b29b      	uxth	r3, r3
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	b29b      	uxth	r3, r3
 80027a0:	4619      	mov	r1, r3
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f8c0 	bl	8002928 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027a8:	e099      	b.n	80028de <HAL_UART_IRQHandler+0x50e>
 80027aa:	bf00      	nop
 80027ac:	08002a07 	.word	0x08002a07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 808b 	beq.w	80028e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80027cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 8086 	beq.w	80028e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	330c      	adds	r3, #12
 80027dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e0:	e853 3f00 	ldrex	r3, [r3]
 80027e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80027e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	330c      	adds	r3, #12
 80027f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80027fa:	647a      	str	r2, [r7, #68]	; 0x44
 80027fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002800:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002802:	e841 2300 	strex	r3, r2, [r1]
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1e3      	bne.n	80027d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	3314      	adds	r3, #20
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	e853 3f00 	ldrex	r3, [r3]
 800281c:	623b      	str	r3, [r7, #32]
   return(result);
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	f023 0301 	bic.w	r3, r3, #1
 8002824:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3314      	adds	r3, #20
 800282e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002832:	633a      	str	r2, [r7, #48]	; 0x30
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800283a:	e841 2300 	strex	r3, r2, [r1]
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1e3      	bne.n	800280e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	330c      	adds	r3, #12
 800285a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	e853 3f00 	ldrex	r3, [r3]
 8002862:	60fb      	str	r3, [r7, #12]
   return(result);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0310 	bic.w	r3, r3, #16
 800286a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	330c      	adds	r3, #12
 8002874:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002878:	61fa      	str	r2, [r7, #28]
 800287a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287c:	69b9      	ldr	r1, [r7, #24]
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	e841 2300 	strex	r3, r2, [r1]
 8002884:	617b      	str	r3, [r7, #20]
   return(result);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e3      	bne.n	8002854 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800288c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002890:	4619      	mov	r1, r3
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f848 	bl	8002928 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002898:	e023      	b.n	80028e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800289a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800289e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_UART_IRQHandler+0x4ea>
 80028a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f8bb 	bl	8002a2e <UART_Transmit_IT>
    return;
 80028b8:	e014      	b.n	80028e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00e      	beq.n	80028e4 <HAL_UART_IRQHandler+0x514>
 80028c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d008      	beq.n	80028e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f8fb 	bl	8002ace <UART_EndTransmit_IT>
    return;
 80028d8:	e004      	b.n	80028e4 <HAL_UART_IRQHandler+0x514>
    return;
 80028da:	bf00      	nop
 80028dc:	e002      	b.n	80028e4 <HAL_UART_IRQHandler+0x514>
      return;
 80028de:	bf00      	nop
 80028e0:	e000      	b.n	80028e4 <HAL_UART_IRQHandler+0x514>
      return;
 80028e2:	bf00      	nop
  }
}
 80028e4:	37e8      	adds	r7, #232	; 0xe8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop

080028ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002940:	b480      	push	{r7}
 8002942:	b095      	sub	sp, #84	; 0x54
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	330c      	adds	r3, #12
 800294e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002952:	e853 3f00 	ldrex	r3, [r3]
 8002956:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800295e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	330c      	adds	r3, #12
 8002966:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002968:	643a      	str	r2, [r7, #64]	; 0x40
 800296a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800296e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002970:	e841 2300 	strex	r3, r2, [r1]
 8002974:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e5      	bne.n	8002948 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	3314      	adds	r3, #20
 8002982:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	e853 3f00 	ldrex	r3, [r3]
 800298a:	61fb      	str	r3, [r7, #28]
   return(result);
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	64bb      	str	r3, [r7, #72]	; 0x48
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	3314      	adds	r3, #20
 800299a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800299c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029a4:	e841 2300 	strex	r3, r2, [r1]
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1e5      	bne.n	800297c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d119      	bne.n	80029ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	330c      	adds	r3, #12
 80029be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	e853 3f00 	ldrex	r3, [r3]
 80029c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f023 0310 	bic.w	r3, r3, #16
 80029ce:	647b      	str	r3, [r7, #68]	; 0x44
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	330c      	adds	r3, #12
 80029d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029d8:	61ba      	str	r2, [r7, #24]
 80029da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029dc:	6979      	ldr	r1, [r7, #20]
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	e841 2300 	strex	r3, r2, [r1]
 80029e4:	613b      	str	r3, [r7, #16]
   return(result);
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e5      	bne.n	80029b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029fa:	bf00      	nop
 80029fc:	3754      	adds	r7, #84	; 0x54
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f7ff ff77 	bl	8002914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b085      	sub	sp, #20
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b21      	cmp	r3, #33	; 0x21
 8002a40:	d13e      	bne.n	8002ac0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4a:	d114      	bne.n	8002a76 <UART_Transmit_IT+0x48>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d110      	bne.n	8002a76 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	1c9a      	adds	r2, r3, #2
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	621a      	str	r2, [r3, #32]
 8002a74:	e008      	b.n	8002a88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	1c59      	adds	r1, r3, #1
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6211      	str	r1, [r2, #32]
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	4619      	mov	r1, r3
 8002a96:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10f      	bne.n	8002abc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aaa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	e000      	b.n	8002ac2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ac0:	2302      	movs	r3, #2
  }
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ae4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff fefc 	bl	80028ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b08c      	sub	sp, #48	; 0x30
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b22      	cmp	r3, #34	; 0x22
 8002b10:	f040 80ab 	bne.w	8002c6a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1c:	d117      	bne.n	8002b4e <UART_Receive_IT+0x50>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d113      	bne.n	8002b4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	1c9a      	adds	r2, r3, #2
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b4c:	e026      	b.n	8002b9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b60:	d007      	beq.n	8002b72 <UART_Receive_IT+0x74>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10a      	bne.n	8002b80 <UART_Receive_IT+0x82>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	e008      	b.n	8002b92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d15a      	bne.n	8002c66 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0220 	bic.w	r2, r2, #32
 8002bbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d135      	bne.n	8002c5c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	330c      	adds	r3, #12
 8002bfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	e853 3f00 	ldrex	r3, [r3]
 8002c04:	613b      	str	r3, [r7, #16]
   return(result);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f023 0310 	bic.w	r3, r3, #16
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	330c      	adds	r3, #12
 8002c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c16:	623a      	str	r2, [r7, #32]
 8002c18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1a:	69f9      	ldr	r1, [r7, #28]
 8002c1c:	6a3a      	ldr	r2, [r7, #32]
 8002c1e:	e841 2300 	strex	r3, r2, [r1]
 8002c22:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1e5      	bne.n	8002bf6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b10      	cmp	r3, #16
 8002c36:	d10a      	bne.n	8002c4e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c52:	4619      	mov	r1, r3
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff fe67 	bl	8002928 <HAL_UARTEx_RxEventCallback>
 8002c5a:	e002      	b.n	8002c62 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff fe4f 	bl	8002900 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e002      	b.n	8002c6c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e000      	b.n	8002c6c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002c6a:	2302      	movs	r3, #2
  }
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3730      	adds	r7, #48	; 0x30
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c78:	b09f      	sub	sp, #124	; 0x7c
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8a:	68d9      	ldr	r1, [r3, #12]
 8002c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	ea40 0301 	orr.w	r3, r0, r1
 8002c94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002cb8:	f021 010c 	bic.w	r1, r1, #12
 8002cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd2:	6999      	ldr	r1, [r3, #24]
 8002cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	ea40 0301 	orr.w	r3, r0, r1
 8002cdc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	4bc5      	ldr	r3, [pc, #788]	; (8002ff8 <UART_SetConfig+0x384>)
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d004      	beq.n	8002cf2 <UART_SetConfig+0x7e>
 8002ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4bc3      	ldr	r3, [pc, #780]	; (8002ffc <UART_SetConfig+0x388>)
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d103      	bne.n	8002cfa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cf2:	f7fe febb 	bl	8001a6c <HAL_RCC_GetPCLK2Freq>
 8002cf6:	6778      	str	r0, [r7, #116]	; 0x74
 8002cf8:	e002      	b.n	8002d00 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cfa:	f7fe fea3 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
 8002cfe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d08:	f040 80b6 	bne.w	8002e78 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d0e:	461c      	mov	r4, r3
 8002d10:	f04f 0500 	mov.w	r5, #0
 8002d14:	4622      	mov	r2, r4
 8002d16:	462b      	mov	r3, r5
 8002d18:	1891      	adds	r1, r2, r2
 8002d1a:	6439      	str	r1, [r7, #64]	; 0x40
 8002d1c:	415b      	adcs	r3, r3
 8002d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d24:	1912      	adds	r2, r2, r4
 8002d26:	eb45 0303 	adc.w	r3, r5, r3
 8002d2a:	f04f 0000 	mov.w	r0, #0
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	00d9      	lsls	r1, r3, #3
 8002d34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d38:	00d0      	lsls	r0, r2, #3
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	1911      	adds	r1, r2, r4
 8002d40:	6639      	str	r1, [r7, #96]	; 0x60
 8002d42:	416b      	adcs	r3, r5
 8002d44:	667b      	str	r3, [r7, #100]	; 0x64
 8002d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	1891      	adds	r1, r2, r2
 8002d52:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d54:	415b      	adcs	r3, r3
 8002d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d5c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002d60:	f7fd fa50 	bl	8000204 <__aeabi_uldivmod>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4ba5      	ldr	r3, [pc, #660]	; (8003000 <UART_SetConfig+0x38c>)
 8002d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	011e      	lsls	r6, r3, #4
 8002d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d74:	461c      	mov	r4, r3
 8002d76:	f04f 0500 	mov.w	r5, #0
 8002d7a:	4622      	mov	r2, r4
 8002d7c:	462b      	mov	r3, r5
 8002d7e:	1891      	adds	r1, r2, r2
 8002d80:	6339      	str	r1, [r7, #48]	; 0x30
 8002d82:	415b      	adcs	r3, r3
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
 8002d86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d8a:	1912      	adds	r2, r2, r4
 8002d8c:	eb45 0303 	adc.w	r3, r5, r3
 8002d90:	f04f 0000 	mov.w	r0, #0
 8002d94:	f04f 0100 	mov.w	r1, #0
 8002d98:	00d9      	lsls	r1, r3, #3
 8002d9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d9e:	00d0      	lsls	r0, r2, #3
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	1911      	adds	r1, r2, r4
 8002da6:	65b9      	str	r1, [r7, #88]	; 0x58
 8002da8:	416b      	adcs	r3, r5
 8002daa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	461a      	mov	r2, r3
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	1891      	adds	r1, r2, r2
 8002db8:	62b9      	str	r1, [r7, #40]	; 0x28
 8002dba:	415b      	adcs	r3, r3
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dc2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002dc6:	f7fd fa1d 	bl	8000204 <__aeabi_uldivmod>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4b8c      	ldr	r3, [pc, #560]	; (8003000 <UART_SetConfig+0x38c>)
 8002dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	2164      	movs	r1, #100	; 0x64
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	3332      	adds	r3, #50	; 0x32
 8002de2:	4a87      	ldr	r2, [pc, #540]	; (8003000 <UART_SetConfig+0x38c>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002df0:	441e      	add	r6, r3
 8002df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df4:	4618      	mov	r0, r3
 8002df6:	f04f 0100 	mov.w	r1, #0
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	1894      	adds	r4, r2, r2
 8002e00:	623c      	str	r4, [r7, #32]
 8002e02:	415b      	adcs	r3, r3
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
 8002e06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e0a:	1812      	adds	r2, r2, r0
 8002e0c:	eb41 0303 	adc.w	r3, r1, r3
 8002e10:	f04f 0400 	mov.w	r4, #0
 8002e14:	f04f 0500 	mov.w	r5, #0
 8002e18:	00dd      	lsls	r5, r3, #3
 8002e1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e1e:	00d4      	lsls	r4, r2, #3
 8002e20:	4622      	mov	r2, r4
 8002e22:	462b      	mov	r3, r5
 8002e24:	1814      	adds	r4, r2, r0
 8002e26:	653c      	str	r4, [r7, #80]	; 0x50
 8002e28:	414b      	adcs	r3, r1
 8002e2a:	657b      	str	r3, [r7, #84]	; 0x54
 8002e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	461a      	mov	r2, r3
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	1891      	adds	r1, r2, r2
 8002e38:	61b9      	str	r1, [r7, #24]
 8002e3a:	415b      	adcs	r3, r3
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002e46:	f7fd f9dd 	bl	8000204 <__aeabi_uldivmod>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4b6c      	ldr	r3, [pc, #432]	; (8003000 <UART_SetConfig+0x38c>)
 8002e50:	fba3 1302 	umull	r1, r3, r3, r2
 8002e54:	095b      	lsrs	r3, r3, #5
 8002e56:	2164      	movs	r1, #100	; 0x64
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	3332      	adds	r3, #50	; 0x32
 8002e62:	4a67      	ldr	r2, [pc, #412]	; (8003000 <UART_SetConfig+0x38c>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	095b      	lsrs	r3, r3, #5
 8002e6a:	f003 0207 	and.w	r2, r3, #7
 8002e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4432      	add	r2, r6
 8002e74:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e76:	e0b9      	b.n	8002fec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e7a:	461c      	mov	r4, r3
 8002e7c:	f04f 0500 	mov.w	r5, #0
 8002e80:	4622      	mov	r2, r4
 8002e82:	462b      	mov	r3, r5
 8002e84:	1891      	adds	r1, r2, r2
 8002e86:	6139      	str	r1, [r7, #16]
 8002e88:	415b      	adcs	r3, r3
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e90:	1912      	adds	r2, r2, r4
 8002e92:	eb45 0303 	adc.w	r3, r5, r3
 8002e96:	f04f 0000 	mov.w	r0, #0
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	00d9      	lsls	r1, r3, #3
 8002ea0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ea4:	00d0      	lsls	r0, r2, #3
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	eb12 0804 	adds.w	r8, r2, r4
 8002eae:	eb43 0905 	adc.w	r9, r3, r5
 8002eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f04f 0100 	mov.w	r1, #0
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	008b      	lsls	r3, r1, #2
 8002ec6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002eca:	0082      	lsls	r2, r0, #2
 8002ecc:	4640      	mov	r0, r8
 8002ece:	4649      	mov	r1, r9
 8002ed0:	f7fd f998 	bl	8000204 <__aeabi_uldivmod>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4b49      	ldr	r3, [pc, #292]	; (8003000 <UART_SetConfig+0x38c>)
 8002eda:	fba3 2302 	umull	r2, r3, r3, r2
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	011e      	lsls	r6, r3, #4
 8002ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f04f 0100 	mov.w	r1, #0
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	1894      	adds	r4, r2, r2
 8002ef0:	60bc      	str	r4, [r7, #8]
 8002ef2:	415b      	adcs	r3, r3
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002efa:	1812      	adds	r2, r2, r0
 8002efc:	eb41 0303 	adc.w	r3, r1, r3
 8002f00:	f04f 0400 	mov.w	r4, #0
 8002f04:	f04f 0500 	mov.w	r5, #0
 8002f08:	00dd      	lsls	r5, r3, #3
 8002f0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f0e:	00d4      	lsls	r4, r2, #3
 8002f10:	4622      	mov	r2, r4
 8002f12:	462b      	mov	r3, r5
 8002f14:	1814      	adds	r4, r2, r0
 8002f16:	64bc      	str	r4, [r7, #72]	; 0x48
 8002f18:	414b      	adcs	r3, r1
 8002f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f04f 0100 	mov.w	r1, #0
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	008b      	lsls	r3, r1, #2
 8002f30:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f34:	0082      	lsls	r2, r0, #2
 8002f36:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002f3a:	f7fd f963 	bl	8000204 <__aeabi_uldivmod>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4b2f      	ldr	r3, [pc, #188]	; (8003000 <UART_SetConfig+0x38c>)
 8002f44:	fba3 1302 	umull	r1, r3, r3, r2
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	2164      	movs	r1, #100	; 0x64
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	3332      	adds	r3, #50	; 0x32
 8002f56:	4a2a      	ldr	r2, [pc, #168]	; (8003000 <UART_SetConfig+0x38c>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f62:	441e      	add	r6, r3
 8002f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f66:	4618      	mov	r0, r3
 8002f68:	f04f 0100 	mov.w	r1, #0
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	1894      	adds	r4, r2, r2
 8002f72:	603c      	str	r4, [r7, #0]
 8002f74:	415b      	adcs	r3, r3
 8002f76:	607b      	str	r3, [r7, #4]
 8002f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f7c:	1812      	adds	r2, r2, r0
 8002f7e:	eb41 0303 	adc.w	r3, r1, r3
 8002f82:	f04f 0400 	mov.w	r4, #0
 8002f86:	f04f 0500 	mov.w	r5, #0
 8002f8a:	00dd      	lsls	r5, r3, #3
 8002f8c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f90:	00d4      	lsls	r4, r2, #3
 8002f92:	4622      	mov	r2, r4
 8002f94:	462b      	mov	r3, r5
 8002f96:	eb12 0a00 	adds.w	sl, r2, r0
 8002f9a:	eb43 0b01 	adc.w	fp, r3, r1
 8002f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f04f 0100 	mov.w	r1, #0
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	008b      	lsls	r3, r1, #2
 8002fb2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002fb6:	0082      	lsls	r2, r0, #2
 8002fb8:	4650      	mov	r0, sl
 8002fba:	4659      	mov	r1, fp
 8002fbc:	f7fd f922 	bl	8000204 <__aeabi_uldivmod>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <UART_SetConfig+0x38c>)
 8002fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	2164      	movs	r1, #100	; 0x64
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	3332      	adds	r3, #50	; 0x32
 8002fd8:	4a09      	ldr	r2, [pc, #36]	; (8003000 <UART_SetConfig+0x38c>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	f003 020f 	and.w	r2, r3, #15
 8002fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4432      	add	r2, r6
 8002fea:	609a      	str	r2, [r3, #8]
}
 8002fec:	bf00      	nop
 8002fee:	377c      	adds	r7, #124	; 0x7c
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40011000 	.word	0x40011000
 8002ffc:	40011400 	.word	0x40011400
 8003000:	51eb851f 	.word	0x51eb851f

08003004 <__libc_init_array>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	4d0d      	ldr	r5, [pc, #52]	; (800303c <__libc_init_array+0x38>)
 8003008:	4c0d      	ldr	r4, [pc, #52]	; (8003040 <__libc_init_array+0x3c>)
 800300a:	1b64      	subs	r4, r4, r5
 800300c:	10a4      	asrs	r4, r4, #2
 800300e:	2600      	movs	r6, #0
 8003010:	42a6      	cmp	r6, r4
 8003012:	d109      	bne.n	8003028 <__libc_init_array+0x24>
 8003014:	4d0b      	ldr	r5, [pc, #44]	; (8003044 <__libc_init_array+0x40>)
 8003016:	4c0c      	ldr	r4, [pc, #48]	; (8003048 <__libc_init_array+0x44>)
 8003018:	f000 f820 	bl	800305c <_init>
 800301c:	1b64      	subs	r4, r4, r5
 800301e:	10a4      	asrs	r4, r4, #2
 8003020:	2600      	movs	r6, #0
 8003022:	42a6      	cmp	r6, r4
 8003024:	d105      	bne.n	8003032 <__libc_init_array+0x2e>
 8003026:	bd70      	pop	{r4, r5, r6, pc}
 8003028:	f855 3b04 	ldr.w	r3, [r5], #4
 800302c:	4798      	blx	r3
 800302e:	3601      	adds	r6, #1
 8003030:	e7ee      	b.n	8003010 <__libc_init_array+0xc>
 8003032:	f855 3b04 	ldr.w	r3, [r5], #4
 8003036:	4798      	blx	r3
 8003038:	3601      	adds	r6, #1
 800303a:	e7f2      	b.n	8003022 <__libc_init_array+0x1e>
 800303c:	0800309c 	.word	0x0800309c
 8003040:	0800309c 	.word	0x0800309c
 8003044:	0800309c 	.word	0x0800309c
 8003048:	080030a0 	.word	0x080030a0

0800304c <memset>:
 800304c:	4402      	add	r2, r0
 800304e:	4603      	mov	r3, r0
 8003050:	4293      	cmp	r3, r2
 8003052:	d100      	bne.n	8003056 <memset+0xa>
 8003054:	4770      	bx	lr
 8003056:	f803 1b01 	strb.w	r1, [r3], #1
 800305a:	e7f9      	b.n	8003050 <memset+0x4>

0800305c <_init>:
 800305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305e:	bf00      	nop
 8003060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003062:	bc08      	pop	{r3}
 8003064:	469e      	mov	lr, r3
 8003066:	4770      	bx	lr

08003068 <_fini>:
 8003068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306a:	bf00      	nop
 800306c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306e:	bc08      	pop	{r3}
 8003070:	469e      	mov	lr, r3
 8003072:	4770      	bx	lr
